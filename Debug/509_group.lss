
509_group.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000064bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000194  00800060  000064bc  00006550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008001f4  008001f4  000066e4  2**0
                  ALLOC
  3 .stab         00005d30  00000000  00000000  000066e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d7d  00000000  00000000  0000c414  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000e191  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000e371  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  0000e5a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00010e34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0001245c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0001383c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00013a3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  00013d4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000147a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 55 0d 	jmp	0x1aaa	; 0x1aaa <__vector_1>
       8:	0c 94 82 0d 	jmp	0x1b04	; 0x1b04 <__vector_2>
       c:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 ef 09 	jmp	0x13de	; 0x13de <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec eb       	ldi	r30, 0xBC	; 188
      68:	f4 e6       	ldi	r31, 0x64	; 100
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 30       	cpi	r26, 0x09	; 9
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ae 24 	call	0x495c	; 0x495c <main>
      8a:	0c 94 5c 32 	jmp	0x64b8	; 0x64b8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 25 32 	jmp	0x644a	; 0x644a <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab ed       	ldi	r26, 0xDB	; 219
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 41 32 	jmp	0x6482	; 0x6482 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4d 32 	jmp	0x649a	; 0x649a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4d 32 	jmp	0x649a	; 0x649a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 25 32 	jmp	0x644a	; 0x644a <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b ed       	ldi	r24, 0xDB	; 219
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 41 32 	jmp	0x6482	; 0x6482 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2d 32 	jmp	0x645a	; 0x645a <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b ed       	ldi	r22, 0xDB	; 219
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 49 32 	jmp	0x6492	; 0x6492 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 4d 32 	jmp	0x649a	; 0x649a <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 4d 32 	jmp	0x649a	; 0x649a <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 4d 32 	jmp	0x649a	; 0x649a <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 31 32 	jmp	0x6462	; 0x6462 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 4d 32 	jmp	0x649a	; 0x649a <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 2e 32 	jmp	0x645c	; 0x645c <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 4a 32 	jmp	0x6494	; 0x6494 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 35 32 	jmp	0x646a	; 0x646a <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 51 32 	jmp	0x64a2	; 0x64a2 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 2d 32 	jmp	0x645a	; 0x645a <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 49 32 	jmp	0x6492	; 0x6492 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	ed 51       	subi	r30, 0x1D	; 29
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <M_WDT_Void_WDTInit>:

#include "WDT_Interface.h"
#include "WDT_Private.h"

void M_WDT_Void_WDTInit(void)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	//to enable wdt
	SET_BIT(WDTCR_REG,WDE_BIT);
     f52:	a1 e4       	ldi	r26, 0x41	; 65
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e1 e4       	ldi	r30, 0x41	; 65
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	88 60       	ori	r24, 0x08	; 8
     f5e:	8c 93       	st	X, r24
	//to select 2.1 second as window time
	SET_BIT(WDTCR_REG,WDP0_BIT);
     f60:	a1 e4       	ldi	r26, 0x41	; 65
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	e1 e4       	ldi	r30, 0x41	; 65
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	80 81       	ld	r24, Z
     f6a:	81 60       	ori	r24, 0x01	; 1
     f6c:	8c 93       	st	X, r24
	SET_BIT(WDTCR_REG,WDP1_BIT);
     f6e:	a1 e4       	ldi	r26, 0x41	; 65
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	e1 e4       	ldi	r30, 0x41	; 65
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	80 81       	ld	r24, Z
     f78:	82 60       	ori	r24, 0x02	; 2
     f7a:	8c 93       	st	X, r24
	SET_BIT(WDTCR_REG,WDP2_BIT);
     f7c:	a1 e4       	ldi	r26, 0x41	; 65
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	e1 e4       	ldi	r30, 0x41	; 65
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	84 60       	ori	r24, 0x04	; 4
     f88:	8c 93       	st	X, r24
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <M_WDT_Void_WDTRefresh>:
void M_WDT_Void_WDTRefresh(void)
{
     f90:	df 93       	push	r29
     f92:	cf 93       	push	r28
     f94:	cd b7       	in	r28, 0x3d	; 61
     f96:	de b7       	in	r29, 0x3e	; 62
	asm("WDR");
     f98:	a8 95       	wdr
}
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <M_UART_Void_UARTInit>:
#define UART_1_STOP_BIT                    1
#define UART_2_STOP_BIT                    2


void M_UART_Void_UARTInit(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	0f 92       	push	r0
     fa6:	cd b7       	in	r28, 0x3d	; 61
     fa8:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_UCSRCValue = 0b10000000;
     faa:	80 e8       	ldi	r24, 0x80	; 128
     fac:	89 83       	std	Y+1, r24	; 0x01

	M_DIO_Void_SetPinDirection(PD0_PIN,INPUT);
     fae:	88 e2       	ldi	r24, 0x28	; 40
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(PD0_PIN,OUTPUT);
     fb6:	88 e2       	ldi	r24, 0x28	; 40
     fb8:	61 e0       	ldi	r22, 0x01	; 1
     fba:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	//to enable rx circuit
	SET_BIT(UCSRB_REG,RXEN_BIT);
     fbe:	aa e2       	ldi	r26, 0x2A	; 42
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	ea e2       	ldi	r30, 0x2A	; 42
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	88 60       	ori	r24, 0x08	; 8
     fca:	8c 93       	st	X, r24
	//to enable tx circuit
	SET_BIT(UCSRB_REG,TXEN_BIT);
     fcc:	aa e2       	ldi	r26, 0x2A	; 42
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	ea e2       	ldi	r30, 0x2A	; 42
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	80 61       	ori	r24, 0x10	; 16
     fd8:	8c 93       	st	X, r24
	//to select charcter size 8 bit
	CLR_BIT(UCSRB_REG,UCSZ2_BIT);
     fda:	aa e2       	ldi	r26, 0x2A	; 42
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	ea e2       	ldi	r30, 0x2A	; 42
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8b 7f       	andi	r24, 0xFB	; 251
     fe6:	8c 93       	st	X, r24
	SET_BIT(Local_U8_UCSRCValue,UCSZ1_BIT);
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	84 60       	ori	r24, 0x04	; 4
     fec:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_U8_UCSRCValue,UCSZ0_BIT);
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	89 83       	std	Y+1, r24	; 0x01
	//to select asynch. mode
	CLR_BIT(Local_U8_UCSRCValue,UMSEL_BIT);
     ff4:	89 81       	ldd	r24, Y+1	; 0x01
     ff6:	8f 7b       	andi	r24, 0xBF	; 191
     ff8:	89 83       	std	Y+1, r24	; 0x01
#if UART_PARITY_MODE  == UART_PARITY_DISABLE
	CLR_BIT(Local_U8_UCSRCValue,UPM0_BIT);
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	8f 7e       	andi	r24, 0xEF	; 239
     ffe:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_U8_UCSRCValue,UPM1_BIT);
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	8f 7d       	andi	r24, 0xDF	; 223
    1004:	89 83       	std	Y+1, r24	; 0x01
#elif UART_PARITY_MODE  == UART_PARITY_ODD
	SET_BIT(Local_U8_UCSRCValue,UPM0_BIT);
	SET_BIT(Local_U8_UCSRCValue,UPM1_BIT);
#endif
#if UART_STOP_BITS  == UART_1_STOP_BIT
	CLR_BIT(Local_U8_UCSRCValue,USBS_BIT);
    1006:	89 81       	ldd	r24, Y+1	; 0x01
    1008:	87 7f       	andi	r24, 0xF7	; 247
    100a:	89 83       	std	Y+1, r24	; 0x01
#elif UART_STOP_BITS  == UART_2_STOP_BIT
	SET_BIT(Local_U8_UCSRCValue,USBS_BIT);
#endif
	UCSRC_REG = Local_U8_UCSRCValue;
    100c:	e0 e4       	ldi	r30, 0x40	; 64
    100e:	f0 e0       	ldi	r31, 0x00	; 0
    1010:	89 81       	ldd	r24, Y+1	; 0x01
    1012:	80 83       	st	Z, r24
	/* TO SELECT BAUDRATE -> 9600 */
	UBRRL_REG = ((F_OSC * (u32)1000000) / ((u32)16 * UART_BAUDRATE)) - 1;
    1014:	e9 e2       	ldi	r30, 0x29	; 41
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	87 e6       	ldi	r24, 0x67	; 103
    101a:	80 83       	st	Z, r24
	/* TO ENABLE RX CICUIT */
	SET_BIT(UCSRB_REG,RXEN_BIT);
    101c:	aa e2       	ldi	r26, 0x2A	; 42
    101e:	b0 e0       	ldi	r27, 0x00	; 0
    1020:	ea e2       	ldi	r30, 0x2A	; 42
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	80 81       	ld	r24, Z
    1026:	88 60       	ori	r24, 0x08	; 8
    1028:	8c 93       	st	X, r24
	/* TO ENABLE TX CIRCUIT */
	SET_BIT(UCSRB_REG,TXEN_BIT);
    102a:	aa e2       	ldi	r26, 0x2A	; 42
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ea e2       	ldi	r30, 0x2A	; 42
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	80 61       	ori	r24, 0x10	; 16
    1036:	8c 93       	st	X, r24

}
    1038:	0f 90       	pop	r0
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <M_UART_U8_UARTSend>:
void M_UART_U8_UARTSend(u8 Copy_U8_Data)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <M_UART_U8_UARTSend+0x6>
    1046:	00 d0       	rcall	.+0      	; 0x1048 <M_UART_U8_UARTSend+0x8>
    1048:	0f 92       	push	r0
    104a:	cd b7       	in	r28, 0x3d	; 61
    104c:	de b7       	in	r29, 0x3e	; 62
    104e:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_U32_Counter = 0;
    1050:	19 82       	std	Y+1, r1	; 0x01
    1052:	1a 82       	std	Y+2, r1	; 0x02
    1054:	1b 82       	std	Y+3, r1	; 0x03
    1056:	1c 82       	std	Y+4, r1	; 0x04
	UDR_REG = Copy_U8_Data;
    1058:	ec e2       	ldi	r30, 0x2C	; 44
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	80 83       	st	Z, r24
    1060:	18 c0       	rjmp	.+48     	; 0x1092 <M_UART_U8_UARTSend+0x52>
	while(Local_U32_Counter<POLLING_TIME)
	{
		Local_U32_Counter++;
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	9a 81       	ldd	r25, Y+2	; 0x02
    1066:	ab 81       	ldd	r26, Y+3	; 0x03
    1068:	bc 81       	ldd	r27, Y+4	; 0x04
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	a1 1d       	adc	r26, r1
    106e:	b1 1d       	adc	r27, r1
    1070:	89 83       	std	Y+1, r24	; 0x01
    1072:	9a 83       	std	Y+2, r25	; 0x02
    1074:	ab 83       	std	Y+3, r26	; 0x03
    1076:	bc 83       	std	Y+4, r27	; 0x04
	if(GET_BIT(UCSRA_REG,TXC_BIT)==UART_FINISHED_TRANSMITTING)
    1078:	eb e2       	ldi	r30, 0x2B	; 43
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	82 95       	swap	r24
    1080:	86 95       	lsr	r24
    1082:	86 95       	lsr	r24
    1084:	83 70       	andi	r24, 0x03	; 3
    1086:	88 2f       	mov	r24, r24
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	81 70       	andi	r24, 0x01	; 1
    108c:	90 70       	andi	r25, 0x00	; 0
    108e:	88 23       	and	r24, r24
    1090:	61 f4       	brne	.+24     	; 0x10aa <M_UART_U8_UARTSend+0x6a>
}
void M_UART_U8_UARTSend(u8 Copy_U8_Data)
{
	u32 Local_U32_Counter = 0;
	UDR_REG = Copy_U8_Data;
	while(Local_U32_Counter<POLLING_TIME)
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	ab 81       	ldd	r26, Y+3	; 0x03
    1098:	bc 81       	ldd	r27, Y+4	; 0x04
    109a:	80 38       	cpi	r24, 0x80	; 128
    109c:	24 e8       	ldi	r18, 0x84	; 132
    109e:	92 07       	cpc	r25, r18
    10a0:	2e e1       	ldi	r18, 0x1E	; 30
    10a2:	a2 07       	cpc	r26, r18
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	b2 07       	cpc	r27, r18
    10a8:	e0 f2       	brcs	.-72     	; 0x1062 <M_UART_U8_UARTSend+0x22>
	if(GET_BIT(UCSRA_REG,TXC_BIT)==UART_FINISHED_TRANSMITTING)
	{
		break;
	}
	}
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	0f 90       	pop	r0
    10b0:	0f 90       	pop	r0
    10b2:	0f 90       	pop	r0
    10b4:	cf 91       	pop	r28
    10b6:	df 91       	pop	r29
    10b8:	08 95       	ret

000010ba <M_UART_Void_UARTRec>:
u8 M_UART_Void_UARTRec(void)
{
    10ba:	df 93       	push	r29
    10bc:	cf 93       	push	r28
    10be:	00 d0       	rcall	.+0      	; 0x10c0 <M_UART_Void_UARTRec+0x6>
    10c0:	00 d0       	rcall	.+0      	; 0x10c2 <M_UART_Void_UARTRec+0x8>
    10c2:	cd b7       	in	r28, 0x3d	; 61
    10c4:	de b7       	in	r29, 0x3e	; 62
	u32 Local_U32_Counter = 0;
    10c6:	19 82       	std	Y+1, r1	; 0x01
    10c8:	1a 82       	std	Y+2, r1	; 0x02
    10ca:	1b 82       	std	Y+3, r1	; 0x03
    10cc:	1c 82       	std	Y+4, r1	; 0x04
    10ce:	13 c0       	rjmp	.+38     	; 0x10f6 <M_UART_Void_UARTRec+0x3c>
	while(Local_U32_Counter<POLLING_TIME)
	{
		Local_U32_Counter++;
    10d0:	89 81       	ldd	r24, Y+1	; 0x01
    10d2:	9a 81       	ldd	r25, Y+2	; 0x02
    10d4:	ab 81       	ldd	r26, Y+3	; 0x03
    10d6:	bc 81       	ldd	r27, Y+4	; 0x04
    10d8:	01 96       	adiw	r24, 0x01	; 1
    10da:	a1 1d       	adc	r26, r1
    10dc:	b1 1d       	adc	r27, r1
    10de:	89 83       	std	Y+1, r24	; 0x01
    10e0:	9a 83       	std	Y+2, r25	; 0x02
    10e2:	ab 83       	std	Y+3, r26	; 0x03
    10e4:	bc 83       	std	Y+4, r27	; 0x04
	if(GET_BIT(UCSRA_REG,RXC_BIT)==UART_FINISHED_RECIVING)
    10e6:	eb e2       	ldi	r30, 0x2B	; 43
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	88 1f       	adc	r24, r24
    10ee:	88 27       	eor	r24, r24
    10f0:	88 1f       	adc	r24, r24
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	61 f0       	breq	.+24     	; 0x110e <M_UART_Void_UARTRec+0x54>
	}
}
u8 M_UART_Void_UARTRec(void)
{
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter<POLLING_TIME)
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	9a 81       	ldd	r25, Y+2	; 0x02
    10fa:	ab 81       	ldd	r26, Y+3	; 0x03
    10fc:	bc 81       	ldd	r27, Y+4	; 0x04
    10fe:	80 38       	cpi	r24, 0x80	; 128
    1100:	24 e8       	ldi	r18, 0x84	; 132
    1102:	92 07       	cpc	r25, r18
    1104:	2e e1       	ldi	r18, 0x1E	; 30
    1106:	a2 07       	cpc	r26, r18
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	b2 07       	cpc	r27, r18
    110c:	08 f3       	brcs	.-62     	; 0x10d0 <M_UART_Void_UARTRec+0x16>
	if(GET_BIT(UCSRA_REG,RXC_BIT)==UART_FINISHED_RECIVING)
	{
		break;
	}
	}
	return UDR_REG;
    110e:	ec e2       	ldi	r30, 0x2C	; 44
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	80 81       	ld	r24, Z
}
    1114:	0f 90       	pop	r0
    1116:	0f 90       	pop	r0
    1118:	0f 90       	pop	r0
    111a:	0f 90       	pop	r0
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <M_TIMER_Void_TimerInit>:
void(*Timer0_CallBack) (void);
void(*Timer1_CallBack) (void);
void(*Timer2_CallBack) (void);

void M_TIMER_Void_TimerInit(u8 Copy_U8_TimerChannel)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	0f 92       	push	r0
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	00 97       	sbiw	r24, 0x00	; 0
    1136:	a9 f4       	brne	.+42     	; 0x1162 <M_TIMER_Void_TimerInit+0x40>
	{
	case TIMER0_CHANNEL:

#if  TIMER0_MODE == NORMAL_MODE
	CLR_BIT(TCCR0_REG,WGM00_BIT);
    1138:	a3 e5       	ldi	r26, 0x53	; 83
    113a:	b0 e0       	ldi	r27, 0x00	; 0
    113c:	e3 e5       	ldi	r30, 0x53	; 83
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	80 81       	ld	r24, Z
    1142:	8f 7b       	andi	r24, 0xBF	; 191
    1144:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,WGM01_BIT);
    1146:	a3 e5       	ldi	r26, 0x53	; 83
    1148:	b0 e0       	ldi	r27, 0x00	; 0
    114a:	e3 e5       	ldi	r30, 0x53	; 83
    114c:	f0 e0       	ldi	r31, 0x00	; 0
    114e:	80 81       	ld	r24, Z
    1150:	87 7f       	andi	r24, 0xF7	; 247
    1152:	8c 93       	st	X, r24
	//to enable local interrupt
	SET_BIT(TIMSK_REG,TOIE0_BIT);
    1154:	a9 e5       	ldi	r26, 0x59	; 89
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e9 e5       	ldi	r30, 0x59	; 89
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	81 60       	ori	r24, 0x01	; 1
    1160:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1162:	0f 90       	pop	r0
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <M_TIMER_U32_TimerSetTime>:
void M_TIMER_U32_TimerSetTime(u8 Copy_U8_TimerChannel,u32 Copy_U32_DesiredTime)
{
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	2e 97       	sbiw	r28, 0x0e	; 14
    1174:	0f b6       	in	r0, 0x3f	; 63
    1176:	f8 94       	cli
    1178:	de bf       	out	0x3e, r29	; 62
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	cd bf       	out	0x3d, r28	; 61
    117e:	8a 87       	std	Y+10, r24	; 0x0a
    1180:	4b 87       	std	Y+11, r20	; 0x0b
    1182:	5c 87       	std	Y+12, r21	; 0x0c
    1184:	6d 87       	std	Y+13, r22	; 0x0d
    1186:	7e 87       	std	Y+14, r23	; 0x0e
	u32 Local_U32_TickTime   = TIMER_PRESCALER_DV / F_OSC; //result in micro second
    1188:	80 e4       	ldi	r24, 0x40	; 64
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	a0 e0       	ldi	r26, 0x00	; 0
    118e:	b0 e0       	ldi	r27, 0x00	; 0
    1190:	8e 83       	std	Y+6, r24	; 0x06
    1192:	9f 83       	std	Y+7, r25	; 0x07
    1194:	a8 87       	std	Y+8, r26	; 0x08
    1196:	b9 87       	std	Y+9, r27	; 0x09
	u32 Local_U32_TotalTicks = (Copy_U32_DesiredTime * 1000)/ Local_U32_TickTime;
    1198:	8b 85       	ldd	r24, Y+11	; 0x0b
    119a:	9c 85       	ldd	r25, Y+12	; 0x0c
    119c:	ad 85       	ldd	r26, Y+13	; 0x0d
    119e:	be 85       	ldd	r27, Y+14	; 0x0e
    11a0:	28 ee       	ldi	r18, 0xE8	; 232
    11a2:	33 e0       	ldi	r19, 0x03	; 3
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	bc 01       	movw	r22, r24
    11aa:	cd 01       	movw	r24, r26
    11ac:	0e 94 96 31 	call	0x632c	; 0x632c <__mulsi3>
    11b0:	dc 01       	movw	r26, r24
    11b2:	cb 01       	movw	r24, r22
    11b4:	2e 81       	ldd	r18, Y+6	; 0x06
    11b6:	3f 81       	ldd	r19, Y+7	; 0x07
    11b8:	48 85       	ldd	r20, Y+8	; 0x08
    11ba:	59 85       	ldd	r21, Y+9	; 0x09
    11bc:	bc 01       	movw	r22, r24
    11be:	cd 01       	movw	r24, r26
    11c0:	0e 94 d4 31 	call	0x63a8	; 0x63a8 <__udivmodsi4>
    11c4:	da 01       	movw	r26, r20
    11c6:	c9 01       	movw	r24, r18
    11c8:	8a 83       	std	Y+2, r24	; 0x02
    11ca:	9b 83       	std	Y+3, r25	; 0x03
    11cc:	ac 83       	std	Y+4, r26	; 0x04
    11ce:	bd 83       	std	Y+5, r27	; 0x05
	u8 Local_U8_DF  = 255;
    11d0:	8f ef       	ldi	r24, 0xFF	; 255
    11d2:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    11d4:	8a 85       	ldd	r24, Y+10	; 0x0a
    11d6:	88 2f       	mov	r24, r24
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	00 97       	sbiw	r24, 0x00	; 0
    11dc:	81 f5       	brne	.+96     	; 0x123e <M_TIMER_U32_TimerSetTime+0xd4>
	{
	case TIMER0_CHANNEL:
#if TIMER0_MODE == NORMAL_MODE
	Timer_U32_NumOfOverFlows = Local_U32_TotalTicks / 256;
    11de:	8a 81       	ldd	r24, Y+2	; 0x02
    11e0:	9b 81       	ldd	r25, Y+3	; 0x03
    11e2:	ac 81       	ldd	r26, Y+4	; 0x04
    11e4:	bd 81       	ldd	r27, Y+5	; 0x05
    11e6:	89 2f       	mov	r24, r25
    11e8:	9a 2f       	mov	r25, r26
    11ea:	ab 2f       	mov	r26, r27
    11ec:	bb 27       	eor	r27, r27
    11ee:	80 93 f4 01 	sts	0x01F4, r24
    11f2:	90 93 f5 01 	sts	0x01F5, r25
    11f6:	a0 93 f6 01 	sts	0x01F6, r26
    11fa:	b0 93 f7 01 	sts	0x01F7, r27
	Timer_U8_RemTicks        = Local_U32_TotalTicks % 256;
    11fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1200:	80 93 f8 01 	sts	0x01F8, r24
	if(Timer_U8_RemTicks !=0)
    1204:	80 91 f8 01 	lds	r24, 0x01F8
    1208:	88 23       	and	r24, r24
    120a:	c9 f0       	breq	.+50     	; 0x123e <M_TIMER_U32_TimerSetTime+0xd4>
	{
	TCNT0_REG = 256-Timer_U8_RemTicks;
    120c:	e2 e5       	ldi	r30, 0x52	; 82
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 91 f8 01 	lds	r24, 0x01F8
    1214:	81 95       	neg	r24
    1216:	80 83       	st	Z, r24
	Timer_U32_NumOfOverFlows++;
    1218:	80 91 f4 01 	lds	r24, 0x01F4
    121c:	90 91 f5 01 	lds	r25, 0x01F5
    1220:	a0 91 f6 01 	lds	r26, 0x01F6
    1224:	b0 91 f7 01 	lds	r27, 0x01F7
    1228:	01 96       	adiw	r24, 0x01	; 1
    122a:	a1 1d       	adc	r26, r1
    122c:	b1 1d       	adc	r27, r1
    122e:	80 93 f4 01 	sts	0x01F4, r24
    1232:	90 93 f5 01 	sts	0x01F5, r25
    1236:	a0 93 f6 01 	sts	0x01F6, r26
    123a:	b0 93 f7 01 	sts	0x01F7, r27
	case TIMER2_CHANNEL:
		break;
	default:
		break;
	}
}
    123e:	2e 96       	adiw	r28, 0x0e	; 14
    1240:	0f b6       	in	r0, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	de bf       	out	0x3e, r29	; 62
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	cd bf       	out	0x3d, r28	; 61
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <M_TIMER_Void_TimerStart>:
void M_TIMER_Void_TimerStart(u8 Copy_U8_TimerChannel)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <M_TIMER_Void_TimerStart+0x6>
    1256:	0f 92       	push	r0
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	28 2f       	mov	r18, r24
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	3b 83       	std	Y+3, r19	; 0x03
    1266:	2a 83       	std	Y+2, r18	; 0x02
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	9b 81       	ldd	r25, Y+3	; 0x03
    126c:	00 97       	sbiw	r24, 0x00	; 0
    126e:	31 f0       	breq	.+12     	; 0x127c <M_TIMER_Void_TimerStart+0x2c>
    1270:	2a 81       	ldd	r18, Y+2	; 0x02
    1272:	3b 81       	ldd	r19, Y+3	; 0x03
    1274:	21 30       	cpi	r18, 0x01	; 1
    1276:	31 05       	cpc	r19, r1
    1278:	b9 f0       	breq	.+46     	; 0x12a8 <M_TIMER_Void_TimerStart+0x58>
    127a:	2b c0       	rjmp	.+86     	; 0x12d2 <M_TIMER_Void_TimerStart+0x82>
	{
	case TIMER0_CHANNEL:
#if TIMER_PRESCALER_DV == 1024
	SET_BIT(TCCR0_REG,CS00_BIT);
    127c:	a3 e5       	ldi	r26, 0x53	; 83
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	e3 e5       	ldi	r30, 0x53	; 83
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	81 60       	ori	r24, 0x01	; 1
    1288:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
    128a:	a3 e5       	ldi	r26, 0x53	; 83
    128c:	b0 e0       	ldi	r27, 0x00	; 0
    128e:	e3 e5       	ldi	r30, 0x53	; 83
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8d 7f       	andi	r24, 0xFD	; 253
    1296:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,CS02_BIT);
    1298:	a3 e5       	ldi	r26, 0x53	; 83
    129a:	b0 e0       	ldi	r27, 0x00	; 0
    129c:	e3 e5       	ldi	r30, 0x53	; 83
    129e:	f0 e0       	ldi	r31, 0x00	; 0
    12a0:	80 81       	ld	r24, Z
    12a2:	84 60       	ori	r24, 0x04	; 4
    12a4:	8c 93       	st	X, r24
    12a6:	15 c0       	rjmp	.+42     	; 0x12d2 <M_TIMER_Void_TimerStart+0x82>
	SET_BIT(TCCR0_REG,CS02_BIT);
#endif
	break;
	case TIMER1_CHANNEL:
		// to select timer1 prescaler dv -> 256
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    12a8:	ae e4       	ldi	r26, 0x4E	; 78
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ee e4       	ldi	r30, 0x4E	; 78
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8e 7f       	andi	r24, 0xFE	; 254
    12b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    12b6:	ae e4       	ldi	r26, 0x4E	; 78
    12b8:	b0 e0       	ldi	r27, 0x00	; 0
    12ba:	ee e4       	ldi	r30, 0x4E	; 78
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	8d 7f       	andi	r24, 0xFD	; 253
    12c2:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,CS12_BIT);
    12c4:	ae e4       	ldi	r26, 0x4E	; 78
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	ee e4       	ldi	r30, 0x4E	; 78
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	84 60       	ori	r24, 0x04	; 4
    12d0:	8c 93       	st	X, r24
	case TIMER2_CHANNEL:
		break;
	default:
		break;
	}
}
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	cf 91       	pop	r28
    12da:	df 91       	pop	r29
    12dc:	08 95       	ret

000012de <M_TIMER_Void_TimerStop>:
void M_TIMER_Void_TimerStop(u8 Copy_U8_TimerChannel)
{
    12de:	df 93       	push	r29
    12e0:	cf 93       	push	r28
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <M_TIMER_Void_TimerStop+0x6>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	3b 83       	std	Y+3, r19	; 0x03
    12f4:	2a 83       	std	Y+2, r18	; 0x02
    12f6:	8a 81       	ldd	r24, Y+2	; 0x02
    12f8:	9b 81       	ldd	r25, Y+3	; 0x03
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	31 f0       	breq	.+12     	; 0x130a <M_TIMER_Void_TimerStop+0x2c>
    12fe:	2a 81       	ldd	r18, Y+2	; 0x02
    1300:	3b 81       	ldd	r19, Y+3	; 0x03
    1302:	21 30       	cpi	r18, 0x01	; 1
    1304:	31 05       	cpc	r19, r1
    1306:	b9 f0       	breq	.+46     	; 0x1336 <M_TIMER_Void_TimerStop+0x58>
    1308:	2b c0       	rjmp	.+86     	; 0x1360 <M_TIMER_Void_TimerStop+0x82>
	{
	case TIMER0_CHANNEL:
	CLR_BIT(TCCR0_REG,CS00_BIT);
    130a:	a3 e5       	ldi	r26, 0x53	; 83
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e3 e5       	ldi	r30, 0x53	; 83
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	8e 7f       	andi	r24, 0xFE	; 254
    1316:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS01_BIT);
    1318:	a3 e5       	ldi	r26, 0x53	; 83
    131a:	b0 e0       	ldi	r27, 0x00	; 0
    131c:	e3 e5       	ldi	r30, 0x53	; 83
    131e:	f0 e0       	ldi	r31, 0x00	; 0
    1320:	80 81       	ld	r24, Z
    1322:	8d 7f       	andi	r24, 0xFD	; 253
    1324:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG,CS02_BIT);
    1326:	a3 e5       	ldi	r26, 0x53	; 83
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e3 e5       	ldi	r30, 0x53	; 83
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	8b 7f       	andi	r24, 0xFB	; 251
    1332:	8c 93       	st	X, r24
    1334:	15 c0       	rjmp	.+42     	; 0x1360 <M_TIMER_Void_TimerStop+0x82>
	break;
	case TIMER1_CHANNEL:
		CLR_BIT(TCCR1B_REG,CS10_BIT);
    1336:	ae e4       	ldi	r26, 0x4E	; 78
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	ee e4       	ldi	r30, 0x4E	; 78
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	8e 7f       	andi	r24, 0xFE	; 254
    1342:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS11_BIT);
    1344:	ae e4       	ldi	r26, 0x4E	; 78
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	ee e4       	ldi	r30, 0x4E	; 78
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	8d 7f       	andi	r24, 0xFD	; 253
    1350:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,CS12_BIT);
    1352:	ae e4       	ldi	r26, 0x4E	; 78
    1354:	b0 e0       	ldi	r27, 0x00	; 0
    1356:	ee e4       	ldi	r30, 0x4E	; 78
    1358:	f0 e0       	ldi	r31, 0x00	; 0
    135a:	80 81       	ld	r24, Z
    135c:	8b 7f       	andi	r24, 0xFB	; 251
    135e:	8c 93       	st	X, r24
	case TIMER2_CHANNEL:
		break;
	default:
		break;
	}
}
    1360:	0f 90       	pop	r0
    1362:	0f 90       	pop	r0
    1364:	0f 90       	pop	r0
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <M_TIMER_VOID_SetCallBack>:
void M_TIMER_VOID_SetCallBack(u8 Copy_U8_TimerChannel,void(*Copy_Ptr)(void))
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	00 d0       	rcall	.+0      	; 0x1372 <M_TIMER_VOID_SetCallBack+0x6>
    1372:	00 d0       	rcall	.+0      	; 0x1374 <M_TIMER_VOID_SetCallBack+0x8>
    1374:	0f 92       	push	r0
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	89 83       	std	Y+1, r24	; 0x01
    137c:	7b 83       	std	Y+3, r23	; 0x03
    137e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_U8_TimerChannel)
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3d 83       	std	Y+5, r19	; 0x05
    1388:	2c 83       	std	Y+4, r18	; 0x04
    138a:	8c 81       	ldd	r24, Y+4	; 0x04
    138c:	9d 81       	ldd	r25, Y+5	; 0x05
    138e:	81 30       	cpi	r24, 0x01	; 1
    1390:	91 05       	cpc	r25, r1
    1392:	81 f0       	breq	.+32     	; 0x13b4 <M_TIMER_VOID_SetCallBack+0x48>
    1394:	2c 81       	ldd	r18, Y+4	; 0x04
    1396:	3d 81       	ldd	r19, Y+5	; 0x05
    1398:	22 30       	cpi	r18, 0x02	; 2
    139a:	31 05       	cpc	r19, r1
    139c:	91 f0       	breq	.+36     	; 0x13c2 <M_TIMER_VOID_SetCallBack+0x56>
    139e:	8c 81       	ldd	r24, Y+4	; 0x04
    13a0:	9d 81       	ldd	r25, Y+5	; 0x05
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	a1 f4       	brne	.+40     	; 0x13ce <M_TIMER_VOID_SetCallBack+0x62>
	{
	case TIMER0_CHANNEL:
	Timer0_CallBack=Copy_Ptr;
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	9b 81       	ldd	r25, Y+3	; 0x03
    13aa:	90 93 06 02 	sts	0x0206, r25
    13ae:	80 93 05 02 	sts	0x0205, r24
    13b2:	0d c0       	rjmp	.+26     	; 0x13ce <M_TIMER_VOID_SetCallBack+0x62>
	break;
	case TIMER1_CHANNEL:
	Timer1_CallBack=Copy_Ptr;
    13b4:	8a 81       	ldd	r24, Y+2	; 0x02
    13b6:	9b 81       	ldd	r25, Y+3	; 0x03
    13b8:	90 93 04 02 	sts	0x0204, r25
    13bc:	80 93 03 02 	sts	0x0203, r24
    13c0:	06 c0       	rjmp	.+12     	; 0x13ce <M_TIMER_VOID_SetCallBack+0x62>
	break;
	case TIMER2_CHANNEL:
	Timer2_CallBack=Copy_Ptr;
    13c2:	8a 81       	ldd	r24, Y+2	; 0x02
    13c4:	9b 81       	ldd	r25, Y+3	; 0x03
    13c6:	90 93 02 02 	sts	0x0202, r25
    13ca:	80 93 01 02 	sts	0x0201, r24
	break;
	default:
	break;
	}
}
    13ce:	0f 90       	pop	r0
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <__vector_11>:
#if TIMER0_MODE == NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
    13de:	1f 92       	push	r1
    13e0:	0f 92       	push	r0
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	0f 92       	push	r0
    13e6:	11 24       	eor	r1, r1
    13e8:	2f 93       	push	r18
    13ea:	3f 93       	push	r19
    13ec:	4f 93       	push	r20
    13ee:	5f 93       	push	r21
    13f0:	6f 93       	push	r22
    13f2:	7f 93       	push	r23
    13f4:	8f 93       	push	r24
    13f6:	9f 93       	push	r25
    13f8:	af 93       	push	r26
    13fa:	bf 93       	push	r27
    13fc:	ef 93       	push	r30
    13fe:	ff 93       	push	r31
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
	static u32 Local_U32_Counter = 0;
	Local_U32_Counter++;
    1408:	80 91 fd 01 	lds	r24, 0x01FD
    140c:	90 91 fe 01 	lds	r25, 0x01FE
    1410:	a0 91 ff 01 	lds	r26, 0x01FF
    1414:	b0 91 00 02 	lds	r27, 0x0200
    1418:	01 96       	adiw	r24, 0x01	; 1
    141a:	a1 1d       	adc	r26, r1
    141c:	b1 1d       	adc	r27, r1
    141e:	80 93 fd 01 	sts	0x01FD, r24
    1422:	90 93 fe 01 	sts	0x01FE, r25
    1426:	a0 93 ff 01 	sts	0x01FF, r26
    142a:	b0 93 00 02 	sts	0x0200, r27
	if(Local_U32_Counter == Timer_U32_NumOfOverFlows)
    142e:	20 91 fd 01 	lds	r18, 0x01FD
    1432:	30 91 fe 01 	lds	r19, 0x01FE
    1436:	40 91 ff 01 	lds	r20, 0x01FF
    143a:	50 91 00 02 	lds	r21, 0x0200
    143e:	80 91 f4 01 	lds	r24, 0x01F4
    1442:	90 91 f5 01 	lds	r25, 0x01F5
    1446:	a0 91 f6 01 	lds	r26, 0x01F6
    144a:	b0 91 f7 01 	lds	r27, 0x01F7
    144e:	28 17       	cp	r18, r24
    1450:	39 07       	cpc	r19, r25
    1452:	4a 07       	cpc	r20, r26
    1454:	5b 07       	cpc	r21, r27
    1456:	99 f4       	brne	.+38     	; 0x147e <__vector_11+0xa0>
	{
		Timer0_CallBack();
    1458:	e0 91 05 02 	lds	r30, 0x0205
    145c:	f0 91 06 02 	lds	r31, 0x0206
    1460:	09 95       	icall
		TCNT0_REG = 256-Timer_U8_RemTicks;
    1462:	e2 e5       	ldi	r30, 0x52	; 82
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 91 f8 01 	lds	r24, 0x01F8
    146a:	81 95       	neg	r24
    146c:	80 83       	st	Z, r24
		Local_U32_Counter = 0;
    146e:	10 92 fd 01 	sts	0x01FD, r1
    1472:	10 92 fe 01 	sts	0x01FE, r1
    1476:	10 92 ff 01 	sts	0x01FF, r1
    147a:	10 92 00 02 	sts	0x0200, r1
	}
}
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	ff 91       	pop	r31
    1484:	ef 91       	pop	r30
    1486:	bf 91       	pop	r27
    1488:	af 91       	pop	r26
    148a:	9f 91       	pop	r25
    148c:	8f 91       	pop	r24
    148e:	7f 91       	pop	r23
    1490:	6f 91       	pop	r22
    1492:	5f 91       	pop	r21
    1494:	4f 91       	pop	r20
    1496:	3f 91       	pop	r19
    1498:	2f 91       	pop	r18
    149a:	0f 90       	pop	r0
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	0f 90       	pop	r0
    14a0:	1f 90       	pop	r1
    14a2:	18 95       	reti

000014a4 <M_TIMER_Void_PWMInit>:
		Local_U32_Counter = 0;
	}
}
#endif
void M_TIMER_Void_PWMInit(u8 Copy_U8_TimerChannel)
{
    14a4:	df 93       	push	r29
    14a6:	cf 93       	push	r28
    14a8:	00 d0       	rcall	.+0      	; 0x14aa <M_TIMER_Void_PWMInit+0x6>
    14aa:	0f 92       	push	r0
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_TimerChannel)
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	3b 83       	std	Y+3, r19	; 0x03
    14ba:	2a 83       	std	Y+2, r18	; 0x02
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	31 f0       	breq	.+12     	; 0x14d0 <M_TIMER_Void_PWMInit+0x2c>
    14c4:	2a 81       	ldd	r18, Y+2	; 0x02
    14c6:	3b 81       	ldd	r19, Y+3	; 0x03
    14c8:	21 30       	cpi	r18, 0x01	; 1
    14ca:	31 05       	cpc	r19, r1
    14cc:	11 f1       	breq	.+68     	; 0x1512 <M_TIMER_Void_PWMInit+0x6e>
    14ce:	4f c0       	rjmp	.+158    	; 0x156e <M_TIMER_Void_PWMInit+0xca>
	{
	case TIMER0_CHANNEL:
	M_DIO_Void_SetPinDirection(PB3_PIN,OUTPUT);
    14d0:	87 e1       	ldi	r24, 0x17	; 23
    14d2:	61 e0       	ldi	r22, 0x01	; 1
    14d4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
#if PWM0_MODE == FAST_PWM
	SET_BIT(TCCR0_REG,WGM00_BIT);
    14d8:	a3 e5       	ldi	r26, 0x53	; 83
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	e3 e5       	ldi	r30, 0x53	; 83
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	80 64       	ori	r24, 0x40	; 64
    14e4:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,WGM01_BIT);
    14e6:	a3 e5       	ldi	r26, 0x53	; 83
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	e3 e5       	ldi	r30, 0x53	; 83
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	88 60       	ori	r24, 0x08	; 8
    14f2:	8c 93       	st	X, r24
#endif
#if PWM0_MODE2 == NON_INVERTED
	CLR_BIT(TCCR0_REG,COM00_BIT);
	SET_BIT(TCCR0_REG,COM01_BIT);
#elif PWM0_MODE2 == INVERTED
	SET_BIT(TCCR0_REG,COM00_BIT);
    14f4:	a3 e5       	ldi	r26, 0x53	; 83
    14f6:	b0 e0       	ldi	r27, 0x00	; 0
    14f8:	e3 e5       	ldi	r30, 0x53	; 83
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	80 81       	ld	r24, Z
    14fe:	80 61       	ori	r24, 0x10	; 16
    1500:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG,COM01_BIT);
    1502:	a3 e5       	ldi	r26, 0x53	; 83
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	e3 e5       	ldi	r30, 0x53	; 83
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	80 62       	ori	r24, 0x20	; 32
    150e:	8c 93       	st	X, r24
    1510:	2e c0       	rjmp	.+92     	; 0x156e <M_TIMER_Void_PWMInit+0xca>
#endif
	break;
	case TIMER1_CHANNEL:
		M_DIO_Void_SetPinDirection(PD5_PIN,OUTPUT);
    1512:	8d e2       	ldi	r24, 0x2D	; 45
    1514:	61 e0       	ldi	r22, 0x01	; 1
    1516:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		//TO SELECT MODE NUMBER 14 AT TABLE 47
		CLR_BIT(TCCR1A_REG,WGM10_BIT);
    151a:	af e4       	ldi	r26, 0x4F	; 79
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	ef e4       	ldi	r30, 0x4F	; 79
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	8e 7f       	andi	r24, 0xFE	; 254
    1526:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,WGM11_BIT);
    1528:	af e4       	ldi	r26, 0x4F	; 79
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	ef e4       	ldi	r30, 0x4F	; 79
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	82 60       	ori	r24, 0x02	; 2
    1534:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM12_BIT);
    1536:	ae e4       	ldi	r26, 0x4E	; 78
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	ee e4       	ldi	r30, 0x4E	; 78
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	88 60       	ori	r24, 0x08	; 8
    1542:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,WGM13_BIT);
    1544:	ae e4       	ldi	r26, 0x4E	; 78
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	ee e4       	ldi	r30, 0x4E	; 78
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	80 61       	ori	r24, 0x10	; 16
    1550:	8c 93       	st	X, r24
		//TO SELECT NON INVERTED MODE
		CLR_BIT(TCCR1A_REG,COM1A0_BIT);
    1552:	af e4       	ldi	r26, 0x4F	; 79
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ef e4       	ldi	r30, 0x4F	; 79
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8f 7b       	andi	r24, 0xBF	; 191
    155e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,COM1A1_BIT);
    1560:	af e4       	ldi	r26, 0x4F	; 79
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ef e4       	ldi	r30, 0x4F	; 79
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	80 68       	ori	r24, 0x80	; 128
    156c:	8c 93       	st	X, r24
	case TIMER2_CHANNEL:
		break;
	default:
		break;
	}
}
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	0f 90       	pop	r0
    1574:	cf 91       	pop	r28
    1576:	df 91       	pop	r29
    1578:	08 95       	ret

0000157a <M_TIMER_F32_PWMSetDutyCycle>:
void M_TIMER_F32_PWMSetDutyCycle(u8 Copy_U8_TimerChannel,f32 Copy_F32_DutyCycle)
{
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	00 d0       	rcall	.+0      	; 0x1584 <M_TIMER_F32_PWMSetDutyCycle+0xa>
    1584:	00 d0       	rcall	.+0      	; 0x1586 <M_TIMER_F32_PWMSetDutyCycle+0xc>
    1586:	0f 92       	push	r0
    1588:	cd b7       	in	r28, 0x3d	; 61
    158a:	de b7       	in	r29, 0x3e	; 62
    158c:	89 83       	std	Y+1, r24	; 0x01
    158e:	4a 83       	std	Y+2, r20	; 0x02
    1590:	5b 83       	std	Y+3, r21	; 0x03
    1592:	6c 83       	std	Y+4, r22	; 0x04
    1594:	7d 83       	std	Y+5, r23	; 0x05
	switch(Copy_U8_TimerChannel)
    1596:	89 81       	ldd	r24, Y+1	; 0x01
    1598:	88 2f       	mov	r24, r24
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	91 05       	cpc	r25, r1
    15a0:	b1 f5       	brne	.+108    	; 0x160e <M_TIMER_F32_PWMSetDutyCycle+0x94>
#elif PWM0_MODE2 == INVERTED
#endif
#endif
	break;
	case TIMER1_CHANNEL:
		OCR1A_REG = ((Copy_F32_DutyCycle * ICR1_REG)/100)-1;
    15a2:	0a e4       	ldi	r16, 0x4A	; 74
    15a4:	10 e0       	ldi	r17, 0x00	; 0
    15a6:	e6 e4       	ldi	r30, 0x46	; 70
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	91 81       	ldd	r25, Z+1	; 0x01
    15ae:	cc 01       	movw	r24, r24
    15b0:	a0 e0       	ldi	r26, 0x00	; 0
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	bc 01       	movw	r22, r24
    15c2:	cd 01       	movw	r24, r26
    15c4:	2a 81       	ldd	r18, Y+2	; 0x02
    15c6:	3b 81       	ldd	r19, Y+3	; 0x03
    15c8:	4c 81       	ldd	r20, Y+4	; 0x04
    15ca:	5d 81       	ldd	r21, Y+5	; 0x05
    15cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	bc 01       	movw	r22, r24
    15d6:	cd 01       	movw	r24, r26
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	48 ec       	ldi	r20, 0xC8	; 200
    15de:	52 e4       	ldi	r21, 0x42	; 66
    15e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    15e4:	dc 01       	movw	r26, r24
    15e6:	cb 01       	movw	r24, r22
    15e8:	bc 01       	movw	r22, r24
    15ea:	cd 01       	movw	r24, r26
    15ec:	20 e0       	ldi	r18, 0x00	; 0
    15ee:	30 e0       	ldi	r19, 0x00	; 0
    15f0:	40 e8       	ldi	r20, 0x80	; 128
    15f2:	5f e3       	ldi	r21, 0x3F	; 63
    15f4:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15f8:	dc 01       	movw	r26, r24
    15fa:	cb 01       	movw	r24, r22
    15fc:	bc 01       	movw	r22, r24
    15fe:	cd 01       	movw	r24, r26
    1600:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1604:	dc 01       	movw	r26, r24
    1606:	cb 01       	movw	r24, r22
    1608:	f8 01       	movw	r30, r16
    160a:	91 83       	std	Z+1, r25	; 0x01
    160c:	80 83       	st	Z, r24
	case TIMER2_CHANNEL:
		break;
	default:
		break;
	}
}
    160e:	0f 90       	pop	r0
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	08 95       	ret

00001622 <M_TIMER_U8_PWMSetFrequency>:
void M_TIMER_U8_PWMSetFrequency(u8 Copy_U8_Freq)
{
    1622:	0f 93       	push	r16
    1624:	1f 93       	push	r17
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	0f 92       	push	r0
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	89 83       	std	Y+1, r24	; 0x01
	ICR1_REG = ((F_OSC * 1000000 / 256) / Copy_U8_Freq);
    1632:	06 e4       	ldi	r16, 0x46	; 70
    1634:	10 e0       	ldi	r17, 0x00	; 0
    1636:	89 81       	ldd	r24, Y+1	; 0x01
    1638:	28 2f       	mov	r18, r24
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	40 e0       	ldi	r20, 0x00	; 0
    163e:	50 e0       	ldi	r21, 0x00	; 0
    1640:	84 e2       	ldi	r24, 0x24	; 36
    1642:	94 ef       	ldi	r25, 0xF4	; 244
    1644:	a0 e0       	ldi	r26, 0x00	; 0
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	bc 01       	movw	r22, r24
    164a:	cd 01       	movw	r24, r26
    164c:	0e 94 f6 31 	call	0x63ec	; 0x63ec <__divmodsi4>
    1650:	da 01       	movw	r26, r20
    1652:	c9 01       	movw	r24, r18
    1654:	f8 01       	movw	r30, r16
    1656:	91 83       	std	Z+1, r25	; 0x01
    1658:	80 83       	st	Z, r24
}
    165a:	0f 90       	pop	r0
    165c:	cf 91       	pop	r28
    165e:	df 91       	pop	r29
    1660:	1f 91       	pop	r17
    1662:	0f 91       	pop	r16
    1664:	08 95       	ret

00001666 <M_TIMER_U32_PWMStart>:
void M_TIMER_U32_PWMStart(u8 Copy_U8_TimerChannel)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	0f 92       	push	r0
    166c:	cd b7       	in	r28, 0x3d	; 61
    166e:	de b7       	in	r29, 0x3e	; 62
    1670:	89 83       	std	Y+1, r24	; 0x01
	M_TIMER_Void_TimerStart(Copy_U8_TimerChannel);
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	0e 94 28 09 	call	0x1250	; 0x1250 <M_TIMER_Void_TimerStart>
}
    1678:	0f 90       	pop	r0
    167a:	cf 91       	pop	r28
    167c:	df 91       	pop	r29
    167e:	08 95       	ret

00001680 <M_TIMER_U32_PWMStop>:
void M_TIMER_U32_PWMStop(u8 Copy_U8_TimerChannel)
{
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	0f 92       	push	r0
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	89 83       	std	Y+1, r24	; 0x01
	M_TIMER_Void_TimerStop(Copy_U8_TimerChannel);
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	0e 94 6f 09 	call	0x12de	; 0x12de <M_TIMER_Void_TimerStop>
}
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <M_SPI_Void_SPIInit>:

#include "SPI_Private.h"
#include "SPI_Interface.h"

void M_SPI_Void_SPIInit(void)
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(PB6_PIN,OUTPUT);
	M_DIO_Void_SetPinDirection(PB4_PIN,INPUT);
	M_DIO_Void_SetPinDirection(PB7_PIN,INPUT);
#endif
	//to select sending from lsb
	SET_BIT(SPCR_REG,DORD_BIT);
    16a2:	ad e2       	ldi	r26, 0x2D	; 45
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ed e2       	ldi	r30, 0x2D	; 45
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 62       	ori	r24, 0x20	; 32
    16ae:	8c 93       	st	X, r24
	//to enable sPE circut
	SET_BIT(SPCR_REG,SPE_BIT);
    16b0:	ad e2       	ldi	r26, 0x2D	; 45
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	ed e2       	ldi	r30, 0x2D	; 45
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	80 64       	ori	r24, 0x40	; 64
    16bc:	8c 93       	st	X, r24
}
    16be:	cf 91       	pop	r28
    16c0:	df 91       	pop	r29
    16c2:	08 95       	ret

000016c4 <M_SPI_U8_SPITransive>:
u8 M_SPI_U8_SPITransive(u8 Copy_U8_DataSend)
{
    16c4:	df 93       	push	r29
    16c6:	cf 93       	push	r28
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <M_SPI_U8_SPITransive+0x6>
    16ca:	00 d0       	rcall	.+0      	; 0x16cc <M_SPI_U8_SPITransive+0x8>
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	8d 83       	std	Y+5, r24	; 0x05
	SPDR_REG = Copy_U8_DataSend;
    16d4:	ef e2       	ldi	r30, 0x2F	; 47
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	8d 81       	ldd	r24, Y+5	; 0x05
    16da:	80 83       	st	Z, r24
	u32 Local_U32_Counter = 0;
    16dc:	19 82       	std	Y+1, r1	; 0x01
    16de:	1a 82       	std	Y+2, r1	; 0x02
    16e0:	1b 82       	std	Y+3, r1	; 0x03
    16e2:	1c 82       	std	Y+4, r1	; 0x04
    16e4:	13 c0       	rjmp	.+38     	; 0x170c <M_SPI_U8_SPITransive+0x48>
	while(Local_U32_Counter<POLLING_TIME)
		{
			Local_U32_Counter++;
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	ab 81       	ldd	r26, Y+3	; 0x03
    16ec:	bc 81       	ldd	r27, Y+4	; 0x04
    16ee:	01 96       	adiw	r24, 0x01	; 1
    16f0:	a1 1d       	adc	r26, r1
    16f2:	b1 1d       	adc	r27, r1
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	9a 83       	std	Y+2, r25	; 0x02
    16f8:	ab 83       	std	Y+3, r26	; 0x03
    16fa:	bc 83       	std	Y+4, r27	; 0x04
		if(GET_BIT(SPSR_REG,SPIF_BIT)==SPA_FINISHED_TRANSIVE)
    16fc:	ee e2       	ldi	r30, 0x2E	; 46
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 81       	ld	r24, Z
    1702:	88 1f       	adc	r24, r24
    1704:	88 27       	eor	r24, r24
    1706:	88 1f       	adc	r24, r24
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	61 f0       	breq	.+24     	; 0x1724 <M_SPI_U8_SPITransive+0x60>
}
u8 M_SPI_U8_SPITransive(u8 Copy_U8_DataSend)
{
	SPDR_REG = Copy_U8_DataSend;
	u32 Local_U32_Counter = 0;
	while(Local_U32_Counter<POLLING_TIME)
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	ab 81       	ldd	r26, Y+3	; 0x03
    1712:	bc 81       	ldd	r27, Y+4	; 0x04
    1714:	80 38       	cpi	r24, 0x80	; 128
    1716:	24 e8       	ldi	r18, 0x84	; 132
    1718:	92 07       	cpc	r25, r18
    171a:	2e e1       	ldi	r18, 0x1E	; 30
    171c:	a2 07       	cpc	r26, r18
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	b2 07       	cpc	r27, r18
    1722:	08 f3       	brcs	.-62     	; 0x16e6 <M_SPI_U8_SPITransive+0x22>
		if(GET_BIT(SPSR_REG,SPIF_BIT)==SPA_FINISHED_TRANSIVE)
		{
			break;
		}
		}
	return SPDR_REG;
    1724:	ef e2       	ldi	r30, 0x2F	; 47
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
}
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	cf 91       	pop	r28
    1736:	df 91       	pop	r29
    1738:	08 95       	ret

0000173a <M_I2C_Void_I2CInit>:

#include "I2C_Interface.h"
#include "I2C_Private.h"

void M_I2C_Void_I2CInit(void)
{
    173a:	df 93       	push	r29
    173c:	cf 93       	push	r28
    173e:	cd b7       	in	r28, 0x3d	; 61
    1740:	de b7       	in	r29, 0x3e	; 62
	TWBR_REG = 12;
#elif I2C_MODE  == I2C_SLAVE_MODE
	TWAR_REG = (SLAVE_ADDRESS << 1) | GENERAL_CALL_RESPONSE;
#endif
	//to enable i2c circuit
	SET_BIT(TWCR_REG,TWEN_BIT);
    1742:	a6 e5       	ldi	r26, 0x56	; 86
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e6 e5       	ldi	r30, 0x56	; 86
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	84 60       	ori	r24, 0x04	; 4
    174e:	8c 93       	st	X, r24
}
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <M_I2C_Void_I2CStartCondition>:
void M_I2C_Void_I2CStartCondition(void)
{
    1756:	df 93       	push	r29
    1758:	cf 93       	push	r28
    175a:	cd b7       	in	r28, 0x3d	; 61
    175c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_REG,TWSTA_BIT);  //to make a start condition
    175e:	a6 e5       	ldi	r26, 0x56	; 86
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e6 e5       	ldi	r30, 0x56	; 86
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	80 62       	ori	r24, 0x20	; 32
    176a:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  //to clear the flag
    176c:	a6 e5       	ldi	r26, 0x56	; 86
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e6 e5       	ldi	r30, 0x56	; 86
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	80 68       	ori	r24, 0x80	; 128
    1778:	8c 93       	st	X, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    177a:	e6 e5       	ldi	r30, 0x56	; 86
    177c:	f0 e0       	ldi	r31, 0x00	; 0
    177e:	80 81       	ld	r24, Z
    1780:	88 23       	and	r24, r24
    1782:	dc f7       	brge	.-10     	; 0x177a <M_I2C_Void_I2CStartCondition+0x24>
	while((TWSR_REG & 0xF8) != START_CONDITION_HAS_BEEN_TRANSMITTED);
    1784:	e1 e2       	ldi	r30, 0x21	; 33
    1786:	f0 e0       	ldi	r31, 0x00	; 0
    1788:	80 81       	ld	r24, Z
    178a:	88 2f       	mov	r24, r24
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	88 7f       	andi	r24, 0xF8	; 248
    1790:	90 70       	andi	r25, 0x00	; 0
    1792:	88 30       	cpi	r24, 0x08	; 8
    1794:	91 05       	cpc	r25, r1
    1796:	b1 f7       	brne	.-20     	; 0x1784 <M_I2C_Void_I2CStartCondition+0x2e>
}
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <M_I2C_Void_I2CStopCondition>:
void M_I2C_Void_I2CStopCondition(void)
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	cd b7       	in	r28, 0x3d	; 61
    17a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_REG,TWSTO_BIT);
    17a6:	a6 e5       	ldi	r26, 0x56	; 86
    17a8:	b0 e0       	ldi	r27, 0x00	; 0
    17aa:	e6 e5       	ldi	r30, 0x56	; 86
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	80 81       	ld	r24, Z
    17b0:	80 61       	ori	r24, 0x10	; 16
    17b2:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  //to clear the flag
    17b4:	a6 e5       	ldi	r26, 0x56	; 86
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	e6 e5       	ldi	r30, 0x56	; 86
    17ba:	f0 e0       	ldi	r31, 0x00	; 0
    17bc:	80 81       	ld	r24, Z
    17be:	80 68       	ori	r24, 0x80	; 128
    17c0:	8c 93       	st	X, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    17c2:	e6 e5       	ldi	r30, 0x56	; 86
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	88 23       	and	r24, r24
    17ca:	dc f7       	brge	.-10     	; 0x17c2 <M_I2C_Void_I2CStopCondition+0x24>
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <M_I2C_Void_I2CRepeatedStart>:
void M_I2C_Void_I2CRepeatedStart(void)
{
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR_REG,TWSTA_BIT);
    17da:	a6 e5       	ldi	r26, 0x56	; 86
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	e6 e5       	ldi	r30, 0x56	; 86
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	80 62       	ori	r24, 0x20	; 32
    17e6:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  //to clear the flag
    17e8:	a6 e5       	ldi	r26, 0x56	; 86
    17ea:	b0 e0       	ldi	r27, 0x00	; 0
    17ec:	e6 e5       	ldi	r30, 0x56	; 86
    17ee:	f0 e0       	ldi	r31, 0x00	; 0
    17f0:	80 81       	ld	r24, Z
    17f2:	80 68       	ori	r24, 0x80	; 128
    17f4:	8c 93       	st	X, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    17f6:	e6 e5       	ldi	r30, 0x56	; 86
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	88 23       	and	r24, r24
    17fe:	dc f7       	brge	.-10     	; 0x17f6 <M_I2C_Void_I2CRepeatedStart+0x24>
	while((TWSR_REG & 0xF8) != REPEATED_START_CONDITION_HAS_BEEN_TRANSMITTED);
    1800:	e1 e2       	ldi	r30, 0x21	; 33
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	88 7f       	andi	r24, 0xF8	; 248
    180c:	90 70       	andi	r25, 0x00	; 0
    180e:	80 31       	cpi	r24, 0x10	; 16
    1810:	91 05       	cpc	r25, r1
    1812:	b1 f7       	brne	.-20     	; 0x1800 <M_I2C_Void_I2CRepeatedStart+0x2e>

}
    1814:	cf 91       	pop	r28
    1816:	df 91       	pop	r29
    1818:	08 95       	ret

0000181a <M_I2C_Void_I2CSendSlaveAddressWrite>:
void M_I2C_Void_I2CSendSlaveAddressWrite(u8 Copy_U8_Address)
{
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	0f 92       	push	r0
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	89 83       	std	Y+1, r24	; 0x01
	TWDR_REG = Copy_U8_Address << 1;
    1826:	e3 e2       	ldi	r30, 0x23	; 35
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	89 81       	ldd	r24, Y+1	; 0x01
    182c:	88 0f       	add	r24, r24
    182e:	80 83       	st	Z, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  //to clear the flag
    1830:	a6 e5       	ldi	r26, 0x56	; 86
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e6 e5       	ldi	r30, 0x56	; 86
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	80 68       	ori	r24, 0x80	; 128
    183c:	8c 93       	st	X, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    183e:	e6 e5       	ldi	r30, 0x56	; 86
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	88 23       	and	r24, r24
    1846:	dc f7       	brge	.-10     	; 0x183e <M_I2C_Void_I2CSendSlaveAddressWrite+0x24>
	while((TWSR_REG & 0xF8) != SLAVE_ADDRESS_W_TRANSMITTED_ACK_REC);
    1848:	e1 e2       	ldi	r30, 0x21	; 33
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	88 2f       	mov	r24, r24
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	88 7f       	andi	r24, 0xF8	; 248
    1854:	90 70       	andi	r25, 0x00	; 0
    1856:	88 31       	cpi	r24, 0x18	; 24
    1858:	91 05       	cpc	r25, r1
    185a:	b1 f7       	brne	.-20     	; 0x1848 <M_I2C_Void_I2CSendSlaveAddressWrite+0x2e>
}
    185c:	0f 90       	pop	r0
    185e:	cf 91       	pop	r28
    1860:	df 91       	pop	r29
    1862:	08 95       	ret

00001864 <M_I2C_Void_I2CSendSlaveAddressRead>:
void M_I2C_Void_I2CSendSlaveAddressRead(u8 Copy_U8_Address)
{
    1864:	df 93       	push	r29
    1866:	cf 93       	push	r28
    1868:	0f 92       	push	r0
    186a:	cd b7       	in	r28, 0x3d	; 61
    186c:	de b7       	in	r29, 0x3e	; 62
    186e:	89 83       	std	Y+1, r24	; 0x01
	TWDR_REG = (Copy_U8_Address << 1) | 1;
    1870:	e3 e2       	ldi	r30, 0x23	; 35
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	89 81       	ldd	r24, Y+1	; 0x01
    1876:	88 2f       	mov	r24, r24
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	88 0f       	add	r24, r24
    187c:	99 1f       	adc	r25, r25
    187e:	81 60       	ori	r24, 0x01	; 1
    1880:	80 83       	st	Z, r24
	CLR_BIT(TWCR_REG,TWSTA_BIT);
    1882:	a6 e5       	ldi	r26, 0x56	; 86
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e6 e5       	ldi	r30, 0x56	; 86
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8f 7d       	andi	r24, 0xDF	; 223
    188e:	8c 93       	st	X, r24
	CLR_BIT(TWCR_REG,TWSTO_BIT);
    1890:	a6 e5       	ldi	r26, 0x56	; 86
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e6 e5       	ldi	r30, 0x56	; 86
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	8f 7e       	andi	r24, 0xEF	; 239
    189c:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  //to clear the flag
    189e:	a6 e5       	ldi	r26, 0x56	; 86
    18a0:	b0 e0       	ldi	r27, 0x00	; 0
    18a2:	e6 e5       	ldi	r30, 0x56	; 86
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	80 68       	ori	r24, 0x80	; 128
    18aa:	8c 93       	st	X, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    18ac:	e6 e5       	ldi	r30, 0x56	; 86
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	88 23       	and	r24, r24
    18b4:	dc f7       	brge	.-10     	; 0x18ac <M_I2C_Void_I2CSendSlaveAddressRead+0x48>
	while((TWSR_REG & 0xF8) != SLAVE_ADDRESS_R_TRANSMITTED_ACK_REC);
    18b6:	e1 e2       	ldi	r30, 0x21	; 33
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	88 2f       	mov	r24, r24
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	88 7f       	andi	r24, 0xF8	; 248
    18c2:	90 70       	andi	r25, 0x00	; 0
    18c4:	80 34       	cpi	r24, 0x40	; 64
    18c6:	91 05       	cpc	r25, r1
    18c8:	b1 f7       	brne	.-20     	; 0x18b6 <M_I2C_Void_I2CSendSlaveAddressRead+0x52>

}
    18ca:	0f 90       	pop	r0
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <M_I2C_Void_I2CSendByte>:
void M_I2C_Void_I2CSendByte(u8 Copy_U8_Data)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	0f 92       	push	r0
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	89 83       	std	Y+1, r24	; 0x01
	TWDR_REG = Copy_U8_Data;
    18de:	e3 e2       	ldi	r30, 0x23	; 35
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	89 81       	ldd	r24, Y+1	; 0x01
    18e4:	80 83       	st	Z, r24
	CLR_BIT(TWCR_REG,TWSTA_BIT);
    18e6:	a6 e5       	ldi	r26, 0x56	; 86
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e6 e5       	ldi	r30, 0x56	; 86
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	8f 7d       	andi	r24, 0xDF	; 223
    18f2:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  //to clear the flag
    18f4:	a6 e5       	ldi	r26, 0x56	; 86
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e6 e5       	ldi	r30, 0x56	; 86
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	80 68       	ori	r24, 0x80	; 128
    1900:	8c 93       	st	X, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1902:	e6 e5       	ldi	r30, 0x56	; 86
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	88 23       	and	r24, r24
    190a:	dc f7       	brge	.-10     	; 0x1902 <M_I2C_Void_I2CSendByte+0x30>
	while((TWSR_REG & 0xF8) != BYTE_TRANSMITTED_ACK_REC);
    190c:	e1 e2       	ldi	r30, 0x21	; 33
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	88 7f       	andi	r24, 0xF8	; 248
    1918:	90 70       	andi	r25, 0x00	; 0
    191a:	88 32       	cpi	r24, 0x28	; 40
    191c:	91 05       	cpc	r25, r1
    191e:	b1 f7       	brne	.-20     	; 0x190c <M_I2C_Void_I2CSendByte+0x3a>
}
    1920:	0f 90       	pop	r0
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <M_I2C_Void_I2CReadByte>:
u8 M_I2C_Void_I2CReadByte(void)
{
    1928:	df 93       	push	r29
    192a:	cf 93       	push	r28
    192c:	0f 92       	push	r0
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
	u8 Local_U8_Data = TWDR_REG;
    1932:	e3 e2       	ldi	r30, 0x23	; 35
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TWCR_REG,TWSTA_BIT);
    193a:	a6 e5       	ldi	r26, 0x56	; 86
    193c:	b0 e0       	ldi	r27, 0x00	; 0
    193e:	e6 e5       	ldi	r30, 0x56	; 86
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	80 81       	ld	r24, Z
    1944:	8f 7d       	andi	r24, 0xDF	; 223
    1946:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWEA_BIT);
    1948:	a6 e5       	ldi	r26, 0x56	; 86
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e6 e5       	ldi	r30, 0x56	; 86
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	80 64       	ori	r24, 0x40	; 64
    1954:	8c 93       	st	X, r24
	CLR_BIT(TWCR_REG,TWSTO_BIT);
    1956:	a6 e5       	ldi	r26, 0x56	; 86
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e6 e5       	ldi	r30, 0x56	; 86
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	8f 7e       	andi	r24, 0xEF	; 239
    1962:	8c 93       	st	X, r24
	SET_BIT(TWCR_REG,TWINT_BIT);  //to clear the flag
    1964:	a6 e5       	ldi	r26, 0x56	; 86
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e6 e5       	ldi	r30, 0x56	; 86
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	80 68       	ori	r24, 0x80	; 128
    1970:	8c 93       	st	X, r24
	while(GET_BIT(TWCR_REG,TWINT_BIT) == I2C_STILL_PROCESSING);
    1972:	e6 e5       	ldi	r30, 0x56	; 86
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	88 23       	and	r24, r24
    197a:	dc f7       	brge	.-10     	; 0x1972 <M_I2C_Void_I2CReadByte+0x4a>
	while((TWSR_REG & 0xF8) != BYTE_REC_ACK_TRANSMITTED);
    197c:	e1 e2       	ldi	r30, 0x21	; 33
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	88 2f       	mov	r24, r24
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	88 7f       	andi	r24, 0xF8	; 248
    1988:	90 70       	andi	r25, 0x00	; 0
    198a:	80 35       	cpi	r24, 0x50	; 80
    198c:	91 05       	cpc	r25, r1
    198e:	b1 f7       	brne	.-20     	; 0x197c <M_I2C_Void_I2CReadByte+0x54>
	return Local_U8_Data;
    1990:	89 81       	ldd	r24, Y+1	; 0x01
}
    1992:	0f 90       	pop	r0
    1994:	cf 91       	pop	r28
    1996:	df 91       	pop	r29
    1998:	08 95       	ret

0000199a <M_GIE_Void_GlobalInterruptEnable>:

#include "GIE_Interface.h"
#include "GIE_Private.h"

void M_GIE_Void_GlobalInterruptEnable(void)
{
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG,I_BIT);
    19a2:	af e5       	ldi	r26, 0x5F	; 95
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	ef e5       	ldi	r30, 0x5F	; 95
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	80 68       	ori	r24, 0x80	; 128
    19ae:	8c 93       	st	X, r24
}
    19b0:	cf 91       	pop	r28
    19b2:	df 91       	pop	r29
    19b4:	08 95       	ret

000019b6 <M_GIE_Void_GlobalInterruptDisable>:
void M_GIE_Void_GlobalInterruptDisable(void)
{
    19b6:	df 93       	push	r29
    19b8:	cf 93       	push	r28
    19ba:	cd b7       	in	r28, 0x3d	; 61
    19bc:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG,I_BIT);
    19be:	af e5       	ldi	r26, 0x5F	; 95
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	ef e5       	ldi	r30, 0x5F	; 95
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	80 81       	ld	r24, Z
    19c8:	8f 77       	andi	r24, 0x7F	; 127
    19ca:	8c 93       	st	X, r24
}
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <M_EXT_INT_Void_ExtIntInit>:
#include "EXT_INT_Private.h"

void (*EXT_INT0_CallBack) (void);

void M_EXT_INT_Void_ExtIntInit(u8 Copy_U8_Num)
{
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	00 d0       	rcall	.+0      	; 0x19d8 <M_EXT_INT_Void_ExtIntInit+0x6>
    19d8:	0f 92       	push	r0
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Num)
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	28 2f       	mov	r18, r24
    19e4:	30 e0       	ldi	r19, 0x00	; 0
    19e6:	3b 83       	std	Y+3, r19	; 0x03
    19e8:	2a 83       	std	Y+2, r18	; 0x02
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	81 30       	cpi	r24, 0x01	; 1
    19f0:	91 05       	cpc	r25, r1
    19f2:	f9 f0       	breq	.+62     	; 0x1a32 <M_EXT_INT_Void_ExtIntInit+0x60>
    19f4:	2a 81       	ldd	r18, Y+2	; 0x02
    19f6:	3b 81       	ldd	r19, Y+3	; 0x03
    19f8:	22 30       	cpi	r18, 0x02	; 2
    19fa:	31 05       	cpc	r19, r1
    19fc:	81 f1       	breq	.+96     	; 0x1a5e <M_EXT_INT_Void_ExtIntInit+0x8c>
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	9b 81       	ldd	r25, Y+3	; 0x03
    1a02:	00 97       	sbiw	r24, 0x00	; 0
    1a04:	d1 f5       	brne	.+116    	; 0x1a7a <M_EXT_INT_Void_ExtIntInit+0xa8>
	{
	case EXT_INT_0:
#if   SENSE_CONTROL0   ==   RISING_EDGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
    1a06:	a5 e5       	ldi	r26, 0x55	; 85
    1a08:	b0 e0       	ldi	r27, 0x00	; 0
    1a0a:	e5 e5       	ldi	r30, 0x55	; 85
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	80 81       	ld	r24, Z
    1a10:	81 60       	ori	r24, 0x01	; 1
    1a12:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC01_BIT);
    1a14:	a5 e5       	ldi	r26, 0x55	; 85
    1a16:	b0 e0       	ldi	r27, 0x00	; 0
    1a18:	e5 e5       	ldi	r30, 0x55	; 85
    1a1a:	f0 e0       	ldi	r31, 0x00	; 0
    1a1c:	80 81       	ld	r24, Z
    1a1e:	82 60       	ori	r24, 0x02	; 2
    1a20:	8c 93       	st	X, r24
#elif SENSE_CONTROL0   ==   ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC00_BIT);
		CLR_BIT(MCUCR_REG,ISC01_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT0_BIT);
    1a22:	ab e5       	ldi	r26, 0x5B	; 91
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	eb e5       	ldi	r30, 0x5B	; 91
    1a28:	f0 e0       	ldi	r31, 0x00	; 0
    1a2a:	80 81       	ld	r24, Z
    1a2c:	80 64       	ori	r24, 0x40	; 64
    1a2e:	8c 93       	st	X, r24
    1a30:	24 c0       	rjmp	.+72     	; 0x1a7a <M_EXT_INT_Void_ExtIntInit+0xa8>
	case EXT_INT_1:
#if   SENSE_CONTROL1   ==   RISING_EDGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		SET_BIT(MCUCR_REG,ISC11_BIT);
#elif SENSE_CONTROL1   ==   FALLING_EDGE
		CLR_BIT(MCUCR_REG,ISC10_BIT);
    1a32:	a5 e5       	ldi	r26, 0x55	; 85
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e5 e5       	ldi	r30, 0x55	; 85
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	8b 7f       	andi	r24, 0xFB	; 251
    1a3e:	8c 93       	st	X, r24
		SET_BIT(MCUCR_REG,ISC11_BIT);
    1a40:	a5 e5       	ldi	r26, 0x55	; 85
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e5 e5       	ldi	r30, 0x55	; 85
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	88 60       	ori	r24, 0x08	; 8
    1a4c:	8c 93       	st	X, r24
#elif SENSE_CONTROL1   ==   ANY_LOGICAL_CHANGE
		SET_BIT(MCUCR_REG,ISC10_BIT);
		CLR_BIT(MCUCR_REG,ISC11_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT1_BIT);
    1a4e:	ab e5       	ldi	r26, 0x5B	; 91
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	eb e5       	ldi	r30, 0x5B	; 91
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 68       	ori	r24, 0x80	; 128
    1a5a:	8c 93       	st	X, r24
    1a5c:	0e c0       	rjmp	.+28     	; 0x1a7a <M_EXT_INT_Void_ExtIntInit+0xa8>
		break;
	case EXT_INT_2:
#if   SENSE_CONTROL2   ==   RISING_EDGE
		SET_BIT(MCUCSR_REG,ISC2_BIT);
    1a5e:	a4 e5       	ldi	r26, 0x54	; 84
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	e4 e5       	ldi	r30, 0x54	; 84
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	80 64       	ori	r24, 0x40	; 64
    1a6a:	8c 93       	st	X, r24
#elif SENSE_CONTROL2   ==   FALLING_EDGE
		CLR_BIT(MCUCSR_REG,ISC2_BIT);
#endif
		// to enable local int
		SET_BIT(GICR_REG,INT2_BIT);
    1a6c:	ab e5       	ldi	r26, 0x5B	; 91
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	eb e5       	ldi	r30, 0x5B	; 91
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	80 62       	ori	r24, 0x20	; 32
    1a78:	8c 93       	st	X, r24
		break;
	default:  break;
	}
}
    1a7a:	0f 90       	pop	r0
    1a7c:	0f 90       	pop	r0
    1a7e:	0f 90       	pop	r0
    1a80:	cf 91       	pop	r28
    1a82:	df 91       	pop	r29
    1a84:	08 95       	ret

00001a86 <M_EXT_INT_VOID_SetCallBack>:

void M_EXT_INT_VOID_SetCallBack(void(*Copy_Ptr)(void))
{
    1a86:	df 93       	push	r29
    1a88:	cf 93       	push	r28
    1a8a:	00 d0       	rcall	.+0      	; 0x1a8c <M_EXT_INT_VOID_SetCallBack+0x6>
    1a8c:	cd b7       	in	r28, 0x3d	; 61
    1a8e:	de b7       	in	r29, 0x3e	; 62
    1a90:	9a 83       	std	Y+2, r25	; 0x02
    1a92:	89 83       	std	Y+1, r24	; 0x01
	EXT_INT0_CallBack=Copy_Ptr;
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	90 93 08 02 	sts	0x0208, r25
    1a9c:	80 93 07 02 	sts	0x0207, r24
}
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <__vector_1>:


ISR(INT0_vect)
{
    1aaa:	1f 92       	push	r1
    1aac:	0f 92       	push	r0
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	0f 92       	push	r0
    1ab2:	11 24       	eor	r1, r1
    1ab4:	2f 93       	push	r18
    1ab6:	3f 93       	push	r19
    1ab8:	4f 93       	push	r20
    1aba:	5f 93       	push	r21
    1abc:	6f 93       	push	r22
    1abe:	7f 93       	push	r23
    1ac0:	8f 93       	push	r24
    1ac2:	9f 93       	push	r25
    1ac4:	af 93       	push	r26
    1ac6:	bf 93       	push	r27
    1ac8:	ef 93       	push	r30
    1aca:	ff 93       	push	r31
    1acc:	df 93       	push	r29
    1ace:	cf 93       	push	r28
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	EXT_INT0_CallBack();
    1ad4:	e0 91 07 02 	lds	r30, 0x0207
    1ad8:	f0 91 08 02 	lds	r31, 0x0208
    1adc:	09 95       	icall
}
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	ff 91       	pop	r31
    1ae4:	ef 91       	pop	r30
    1ae6:	bf 91       	pop	r27
    1ae8:	af 91       	pop	r26
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	7f 91       	pop	r23
    1af0:	6f 91       	pop	r22
    1af2:	5f 91       	pop	r21
    1af4:	4f 91       	pop	r20
    1af6:	3f 91       	pop	r19
    1af8:	2f 91       	pop	r18
    1afa:	0f 90       	pop	r0
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	0f 90       	pop	r0
    1b00:	1f 90       	pop	r1
    1b02:	18 95       	reti

00001b04 <__vector_2>:
ISR(INT1_vect)
{
    1b04:	1f 92       	push	r1
    1b06:	0f 92       	push	r0
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	0f 92       	push	r0
    1b0c:	11 24       	eor	r1, r1
    1b0e:	df 93       	push	r29
    1b10:	cf 93       	push	r28
    1b12:	cd b7       	in	r28, 0x3d	; 61
    1b14:	de b7       	in	r29, 0x3e	; 62
	//EXT_INT1_CallBack();
}
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	0f 90       	pop	r0
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	0f 90       	pop	r0
    1b20:	1f 90       	pop	r1
    1b22:	18 95       	reti

00001b24 <__vector_3>:
ISR(INT2_vect)
{
    1b24:	1f 92       	push	r1
    1b26:	0f 92       	push	r0
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	0f 92       	push	r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	cd b7       	in	r28, 0x3d	; 61
    1b34:	de b7       	in	r29, 0x3e	; 62
	//EXT_INT2_CallBack();
}
    1b36:	cf 91       	pop	r28
    1b38:	df 91       	pop	r29
    1b3a:	0f 90       	pop	r0
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	0f 90       	pop	r0
    1b40:	1f 90       	pop	r1
    1b42:	18 95       	reti

00001b44 <M_DIO_Void_SetPinDirection>:
 */

#include <DIO_Interface.h>
#include "DIO_Private.h"
void M_DIO_Void_SetPinDirection(u8 Copy_U8_Num,u8 state)
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	cd b7       	in	r28, 0x3d	; 61
    1b4a:	de b7       	in	r29, 0x3e	; 62
    1b4c:	2a 97       	sbiw	r28, 0x0a	; 10
    1b4e:	0f b6       	in	r0, 0x3f	; 63
    1b50:	f8 94       	cli
    1b52:	de bf       	out	0x3e, r29	; 62
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cd bf       	out	0x3d, r28	; 61
    1b58:	8b 83       	std	Y+3, r24	; 0x03
    1b5a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9a e0       	ldi	r25, 0x0A	; 10
    1b60:	69 2f       	mov	r22, r25
    1b62:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    1b66:	89 2f       	mov	r24, r25
    1b68:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num /10;
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	9a e0       	ldi	r25, 0x0A	; 10
    1b6e:	69 2f       	mov	r22, r25
    1b70:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    1b74:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1b76:	8c 81       	ldd	r24, Y+4	; 0x04
    1b78:	28 2f       	mov	r18, r24
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	3a 87       	std	Y+10, r19	; 0x0a
    1b7e:	29 87       	std	Y+9, r18	; 0x09
    1b80:	89 85       	ldd	r24, Y+9	; 0x09
    1b82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b84:	00 97       	sbiw	r24, 0x00	; 0
    1b86:	39 f0       	breq	.+14     	; 0x1b96 <M_DIO_Void_SetPinDirection+0x52>
    1b88:	29 85       	ldd	r18, Y+9	; 0x09
    1b8a:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b8c:	21 30       	cpi	r18, 0x01	; 1
    1b8e:	31 05       	cpc	r19, r1
    1b90:	09 f4       	brne	.+2      	; 0x1b94 <M_DIO_Void_SetPinDirection+0x50>
    1b92:	76 c0       	rjmp	.+236    	; 0x1c80 <M_DIO_Void_SetPinDirection+0x13c>
    1b94:	e4 c0       	rjmp	.+456    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
	{
	case INPUT:
		switch(Local_U8_Port)
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	38 87       	std	Y+8, r19	; 0x08
    1b9e:	2f 83       	std	Y+7, r18	; 0x07
    1ba0:	8f 81       	ldd	r24, Y+7	; 0x07
    1ba2:	98 85       	ldd	r25, Y+8	; 0x08
    1ba4:	82 30       	cpi	r24, 0x02	; 2
    1ba6:	91 05       	cpc	r25, r1
    1ba8:	61 f1       	breq	.+88     	; 0x1c02 <M_DIO_Void_SetPinDirection+0xbe>
    1baa:	2f 81       	ldd	r18, Y+7	; 0x07
    1bac:	38 85       	ldd	r19, Y+8	; 0x08
    1bae:	23 30       	cpi	r18, 0x03	; 3
    1bb0:	31 05       	cpc	r19, r1
    1bb2:	34 f4       	brge	.+12     	; 0x1bc0 <M_DIO_Void_SetPinDirection+0x7c>
    1bb4:	8f 81       	ldd	r24, Y+7	; 0x07
    1bb6:	98 85       	ldd	r25, Y+8	; 0x08
    1bb8:	81 30       	cpi	r24, 0x01	; 1
    1bba:	91 05       	cpc	r25, r1
    1bbc:	69 f0       	breq	.+26     	; 0x1bd8 <M_DIO_Void_SetPinDirection+0x94>
    1bbe:	cf c0       	rjmp	.+414    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
    1bc0:	2f 81       	ldd	r18, Y+7	; 0x07
    1bc2:	38 85       	ldd	r19, Y+8	; 0x08
    1bc4:	23 30       	cpi	r18, 0x03	; 3
    1bc6:	31 05       	cpc	r19, r1
    1bc8:	89 f1       	breq	.+98     	; 0x1c2c <M_DIO_Void_SetPinDirection+0xe8>
    1bca:	8f 81       	ldd	r24, Y+7	; 0x07
    1bcc:	98 85       	ldd	r25, Y+8	; 0x08
    1bce:	84 30       	cpi	r24, 0x04	; 4
    1bd0:	91 05       	cpc	r25, r1
    1bd2:	09 f4       	brne	.+2      	; 0x1bd6 <M_DIO_Void_SetPinDirection+0x92>
    1bd4:	40 c0       	rjmp	.+128    	; 0x1c56 <M_DIO_Void_SetPinDirection+0x112>
    1bd6:	c3 c0       	rjmp	.+390    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: CLR_BIT(DDRA_REG,Local_U8_Pin); break;
    1bd8:	aa e3       	ldi	r26, 0x3A	; 58
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	ea e3       	ldi	r30, 0x3A	; 58
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	48 2f       	mov	r20, r24
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	81 e0       	ldi	r24, 0x01	; 1
    1bec:	90 e0       	ldi	r25, 0x00	; 0
    1bee:	02 2e       	mov	r0, r18
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <M_DIO_Void_SetPinDirection+0xb2>
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	0a 94       	dec	r0
    1bf8:	e2 f7       	brpl	.-8      	; 0x1bf2 <M_DIO_Void_SetPinDirection+0xae>
    1bfa:	80 95       	com	r24
    1bfc:	84 23       	and	r24, r20
    1bfe:	8c 93       	st	X, r24
    1c00:	ae c0       	rjmp	.+348    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
		case 2: CLR_BIT(DDRB_REG,Local_U8_Pin); break;
    1c02:	a7 e3       	ldi	r26, 0x37	; 55
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e7 e3       	ldi	r30, 0x37	; 55
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	48 2f       	mov	r20, r24
    1c0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c10:	28 2f       	mov	r18, r24
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	02 2e       	mov	r0, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <M_DIO_Void_SetPinDirection+0xdc>
    1c1c:	88 0f       	add	r24, r24
    1c1e:	99 1f       	adc	r25, r25
    1c20:	0a 94       	dec	r0
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <M_DIO_Void_SetPinDirection+0xd8>
    1c24:	80 95       	com	r24
    1c26:	84 23       	and	r24, r20
    1c28:	8c 93       	st	X, r24
    1c2a:	99 c0       	rjmp	.+306    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
		case 3: CLR_BIT(DDRC_REG,Local_U8_Pin); break;
    1c2c:	a4 e3       	ldi	r26, 0x34	; 52
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e4 e3       	ldi	r30, 0x34	; 52
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	48 2f       	mov	r20, r24
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	28 2f       	mov	r18, r24
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	81 e0       	ldi	r24, 0x01	; 1
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	02 2e       	mov	r0, r18
    1c44:	02 c0       	rjmp	.+4      	; 0x1c4a <M_DIO_Void_SetPinDirection+0x106>
    1c46:	88 0f       	add	r24, r24
    1c48:	99 1f       	adc	r25, r25
    1c4a:	0a 94       	dec	r0
    1c4c:	e2 f7       	brpl	.-8      	; 0x1c46 <M_DIO_Void_SetPinDirection+0x102>
    1c4e:	80 95       	com	r24
    1c50:	84 23       	and	r24, r20
    1c52:	8c 93       	st	X, r24
    1c54:	84 c0       	rjmp	.+264    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
		case 4: CLR_BIT(DDRD_REG,Local_U8_Pin); break;
    1c56:	a1 e3       	ldi	r26, 0x31	; 49
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e1 e3       	ldi	r30, 0x31	; 49
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	48 2f       	mov	r20, r24
    1c62:	8a 81       	ldd	r24, Y+2	; 0x02
    1c64:	28 2f       	mov	r18, r24
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <M_DIO_Void_SetPinDirection+0x130>
    1c70:	88 0f       	add	r24, r24
    1c72:	99 1f       	adc	r25, r25
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <M_DIO_Void_SetPinDirection+0x12c>
    1c78:	80 95       	com	r24
    1c7a:	84 23       	and	r24, r20
    1c7c:	8c 93       	st	X, r24
    1c7e:	6f c0       	rjmp	.+222    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
		default:                                break;
		}
		break;
	case OUTPUT:
		switch(Local_U8_Port)
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	3e 83       	std	Y+6, r19	; 0x06
    1c88:	2d 83       	std	Y+5, r18	; 0x05
    1c8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c8e:	82 30       	cpi	r24, 0x02	; 2
    1c90:	91 05       	cpc	r25, r1
    1c92:	51 f1       	breq	.+84     	; 0x1ce8 <M_DIO_Void_SetPinDirection+0x1a4>
    1c94:	2d 81       	ldd	r18, Y+5	; 0x05
    1c96:	3e 81       	ldd	r19, Y+6	; 0x06
    1c98:	23 30       	cpi	r18, 0x03	; 3
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	34 f4       	brge	.+12     	; 0x1caa <M_DIO_Void_SetPinDirection+0x166>
    1c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ca2:	81 30       	cpi	r24, 0x01	; 1
    1ca4:	91 05       	cpc	r25, r1
    1ca6:	61 f0       	breq	.+24     	; 0x1cc0 <M_DIO_Void_SetPinDirection+0x17c>
    1ca8:	5a c0       	rjmp	.+180    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
    1caa:	2d 81       	ldd	r18, Y+5	; 0x05
    1cac:	3e 81       	ldd	r19, Y+6	; 0x06
    1cae:	23 30       	cpi	r18, 0x03	; 3
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	71 f1       	breq	.+92     	; 0x1d10 <M_DIO_Void_SetPinDirection+0x1cc>
    1cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cb8:	84 30       	cpi	r24, 0x04	; 4
    1cba:	91 05       	cpc	r25, r1
    1cbc:	e9 f1       	breq	.+122    	; 0x1d38 <M_DIO_Void_SetPinDirection+0x1f4>
    1cbe:	4f c0       	rjmp	.+158    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
		{
		case 1: SET_BIT(DDRA_REG,Local_U8_Pin); break;
    1cc0:	aa e3       	ldi	r26, 0x3A	; 58
    1cc2:	b0 e0       	ldi	r27, 0x00	; 0
    1cc4:	ea e3       	ldi	r30, 0x3A	; 58
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	48 2f       	mov	r20, r24
    1ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cce:	28 2f       	mov	r18, r24
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	90 e0       	ldi	r25, 0x00	; 0
    1cd6:	02 2e       	mov	r0, r18
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <M_DIO_Void_SetPinDirection+0x19a>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	0a 94       	dec	r0
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <M_DIO_Void_SetPinDirection+0x196>
    1ce2:	84 2b       	or	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	3b c0       	rjmp	.+118    	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
		case 2: SET_BIT(DDRB_REG,Local_U8_Pin); break;
    1ce8:	a7 e3       	ldi	r26, 0x37	; 55
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e7 e3       	ldi	r30, 0x37	; 55
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	48 2f       	mov	r20, r24
    1cf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf6:	28 2f       	mov	r18, r24
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	02 2e       	mov	r0, r18
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <M_DIO_Void_SetPinDirection+0x1c2>
    1d02:	88 0f       	add	r24, r24
    1d04:	99 1f       	adc	r25, r25
    1d06:	0a 94       	dec	r0
    1d08:	e2 f7       	brpl	.-8      	; 0x1d02 <M_DIO_Void_SetPinDirection+0x1be>
    1d0a:	84 2b       	or	r24, r20
    1d0c:	8c 93       	st	X, r24
    1d0e:	27 c0       	rjmp	.+78     	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
		case 3: SET_BIT(DDRC_REG,Local_U8_Pin); break;
    1d10:	a4 e3       	ldi	r26, 0x34	; 52
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	e4 e3       	ldi	r30, 0x34	; 52
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	48 2f       	mov	r20, r24
    1d1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1e:	28 2f       	mov	r18, r24
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	81 e0       	ldi	r24, 0x01	; 1
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	02 2e       	mov	r0, r18
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <M_DIO_Void_SetPinDirection+0x1ea>
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
    1d2e:	0a 94       	dec	r0
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <M_DIO_Void_SetPinDirection+0x1e6>
    1d32:	84 2b       	or	r24, r20
    1d34:	8c 93       	st	X, r24
    1d36:	13 c0       	rjmp	.+38     	; 0x1d5e <M_DIO_Void_SetPinDirection+0x21a>
		case 4: SET_BIT(DDRD_REG,Local_U8_Pin); break;
    1d38:	a1 e3       	ldi	r26, 0x31	; 49
    1d3a:	b0 e0       	ldi	r27, 0x00	; 0
    1d3c:	e1 e3       	ldi	r30, 0x31	; 49
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	48 2f       	mov	r20, r24
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	28 2f       	mov	r18, r24
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	02 2e       	mov	r0, r18
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <M_DIO_Void_SetPinDirection+0x212>
    1d52:	88 0f       	add	r24, r24
    1d54:	99 1f       	adc	r25, r25
    1d56:	0a 94       	dec	r0
    1d58:	e2 f7       	brpl	.-8      	; 0x1d52 <M_DIO_Void_SetPinDirection+0x20e>
    1d5a:	84 2b       	or	r24, r20
    1d5c:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1d5e:	2a 96       	adiw	r28, 0x0a	; 10
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
    1d6a:	cf 91       	pop	r28
    1d6c:	df 91       	pop	r29
    1d6e:	08 95       	ret

00001d70 <M_DIO_Void_SetPinValue>:
void M_DIO_Void_SetPinValue(u8 Copy_U8_Num,u8 state)
{
    1d70:	df 93       	push	r29
    1d72:	cf 93       	push	r28
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	2a 97       	sbiw	r28, 0x0a	; 10
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	f8 94       	cli
    1d7e:	de bf       	out	0x3e, r29	; 62
    1d80:	0f be       	out	0x3f, r0	; 63
    1d82:	cd bf       	out	0x3d, r28	; 61
    1d84:	8b 83       	std	Y+3, r24	; 0x03
    1d86:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9a e0       	ldi	r25, 0x0A	; 10
    1d8c:	69 2f       	mov	r22, r25
    1d8e:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    1d92:	89 2f       	mov	r24, r25
    1d94:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num /10;
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9a e0       	ldi	r25, 0x0A	; 10
    1d9a:	69 2f       	mov	r22, r25
    1d9c:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    1da0:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    1da2:	8c 81       	ldd	r24, Y+4	; 0x04
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	3a 87       	std	Y+10, r19	; 0x0a
    1daa:	29 87       	std	Y+9, r18	; 0x09
    1dac:	89 85       	ldd	r24, Y+9	; 0x09
    1dae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1db0:	00 97       	sbiw	r24, 0x00	; 0
    1db2:	39 f0       	breq	.+14     	; 0x1dc2 <M_DIO_Void_SetPinValue+0x52>
    1db4:	29 85       	ldd	r18, Y+9	; 0x09
    1db6:	3a 85       	ldd	r19, Y+10	; 0x0a
    1db8:	21 30       	cpi	r18, 0x01	; 1
    1dba:	31 05       	cpc	r19, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <M_DIO_Void_SetPinValue+0x50>
    1dbe:	76 c0       	rjmp	.+236    	; 0x1eac <M_DIO_Void_SetPinValue+0x13c>
    1dc0:	e4 c0       	rjmp	.+456    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
	{
	case LOW:
		switch(Local_U8_Port)
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	38 87       	std	Y+8, r19	; 0x08
    1dca:	2f 83       	std	Y+7, r18	; 0x07
    1dcc:	8f 81       	ldd	r24, Y+7	; 0x07
    1dce:	98 85       	ldd	r25, Y+8	; 0x08
    1dd0:	82 30       	cpi	r24, 0x02	; 2
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	61 f1       	breq	.+88     	; 0x1e2e <M_DIO_Void_SetPinValue+0xbe>
    1dd6:	2f 81       	ldd	r18, Y+7	; 0x07
    1dd8:	38 85       	ldd	r19, Y+8	; 0x08
    1dda:	23 30       	cpi	r18, 0x03	; 3
    1ddc:	31 05       	cpc	r19, r1
    1dde:	34 f4       	brge	.+12     	; 0x1dec <M_DIO_Void_SetPinValue+0x7c>
    1de0:	8f 81       	ldd	r24, Y+7	; 0x07
    1de2:	98 85       	ldd	r25, Y+8	; 0x08
    1de4:	81 30       	cpi	r24, 0x01	; 1
    1de6:	91 05       	cpc	r25, r1
    1de8:	69 f0       	breq	.+26     	; 0x1e04 <M_DIO_Void_SetPinValue+0x94>
    1dea:	cf c0       	rjmp	.+414    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
    1dec:	2f 81       	ldd	r18, Y+7	; 0x07
    1dee:	38 85       	ldd	r19, Y+8	; 0x08
    1df0:	23 30       	cpi	r18, 0x03	; 3
    1df2:	31 05       	cpc	r19, r1
    1df4:	89 f1       	breq	.+98     	; 0x1e58 <M_DIO_Void_SetPinValue+0xe8>
    1df6:	8f 81       	ldd	r24, Y+7	; 0x07
    1df8:	98 85       	ldd	r25, Y+8	; 0x08
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	09 f4       	brne	.+2      	; 0x1e02 <M_DIO_Void_SetPinValue+0x92>
    1e00:	40 c0       	rjmp	.+128    	; 0x1e82 <M_DIO_Void_SetPinValue+0x112>
    1e02:	c3 c0       	rjmp	.+390    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    1e04:	ab e3       	ldi	r26, 0x3B	; 59
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	eb e3       	ldi	r30, 0x3B	; 59
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 2e       	mov	r0, r18
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <M_DIO_Void_SetPinValue+0xb2>
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	0a 94       	dec	r0
    1e24:	e2 f7       	brpl	.-8      	; 0x1e1e <M_DIO_Void_SetPinValue+0xae>
    1e26:	80 95       	com	r24
    1e28:	84 23       	and	r24, r20
    1e2a:	8c 93       	st	X, r24
    1e2c:	ae c0       	rjmp	.+348    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    1e2e:	a8 e3       	ldi	r26, 0x38	; 56
    1e30:	b0 e0       	ldi	r27, 0x00	; 0
    1e32:	e8 e3       	ldi	r30, 0x38	; 56
    1e34:	f0 e0       	ldi	r31, 0x00	; 0
    1e36:	80 81       	ld	r24, Z
    1e38:	48 2f       	mov	r20, r24
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	28 2f       	mov	r18, r24
    1e3e:	30 e0       	ldi	r19, 0x00	; 0
    1e40:	81 e0       	ldi	r24, 0x01	; 1
    1e42:	90 e0       	ldi	r25, 0x00	; 0
    1e44:	02 2e       	mov	r0, r18
    1e46:	02 c0       	rjmp	.+4      	; 0x1e4c <M_DIO_Void_SetPinValue+0xdc>
    1e48:	88 0f       	add	r24, r24
    1e4a:	99 1f       	adc	r25, r25
    1e4c:	0a 94       	dec	r0
    1e4e:	e2 f7       	brpl	.-8      	; 0x1e48 <M_DIO_Void_SetPinValue+0xd8>
    1e50:	80 95       	com	r24
    1e52:	84 23       	and	r24, r20
    1e54:	8c 93       	st	X, r24
    1e56:	99 c0       	rjmp	.+306    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    1e58:	a5 e3       	ldi	r26, 0x35	; 53
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e3       	ldi	r30, 0x35	; 53
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	48 2f       	mov	r20, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	02 2e       	mov	r0, r18
    1e70:	02 c0       	rjmp	.+4      	; 0x1e76 <M_DIO_Void_SetPinValue+0x106>
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	0a 94       	dec	r0
    1e78:	e2 f7       	brpl	.-8      	; 0x1e72 <M_DIO_Void_SetPinValue+0x102>
    1e7a:	80 95       	com	r24
    1e7c:	84 23       	and	r24, r20
    1e7e:	8c 93       	st	X, r24
    1e80:	84 c0       	rjmp	.+264    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    1e82:	a2 e3       	ldi	r26, 0x32	; 50
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e2 e3       	ldi	r30, 0x32	; 50
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <M_DIO_Void_SetPinValue+0x130>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <M_DIO_Void_SetPinValue+0x12c>
    1ea4:	80 95       	com	r24
    1ea6:	84 23       	and	r24, r20
    1ea8:	8c 93       	st	X, r24
    1eaa:	6f c0       	rjmp	.+222    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
		default:                                 break;
		}
		break;
	case HIGH:
		switch(Local_U8_Port)
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	28 2f       	mov	r18, r24
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	3e 83       	std	Y+6, r19	; 0x06
    1eb4:	2d 83       	std	Y+5, r18	; 0x05
    1eb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1eb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1eba:	82 30       	cpi	r24, 0x02	; 2
    1ebc:	91 05       	cpc	r25, r1
    1ebe:	51 f1       	breq	.+84     	; 0x1f14 <M_DIO_Void_SetPinValue+0x1a4>
    1ec0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ec2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ec4:	23 30       	cpi	r18, 0x03	; 3
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	34 f4       	brge	.+12     	; 0x1ed6 <M_DIO_Void_SetPinValue+0x166>
    1eca:	8d 81       	ldd	r24, Y+5	; 0x05
    1ecc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ece:	81 30       	cpi	r24, 0x01	; 1
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	61 f0       	breq	.+24     	; 0x1eec <M_DIO_Void_SetPinValue+0x17c>
    1ed4:	5a c0       	rjmp	.+180    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
    1ed6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ed8:	3e 81       	ldd	r19, Y+6	; 0x06
    1eda:	23 30       	cpi	r18, 0x03	; 3
    1edc:	31 05       	cpc	r19, r1
    1ede:	71 f1       	breq	.+92     	; 0x1f3c <M_DIO_Void_SetPinValue+0x1cc>
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	84 30       	cpi	r24, 0x04	; 4
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	e9 f1       	breq	.+122    	; 0x1f64 <M_DIO_Void_SetPinValue+0x1f4>
    1eea:	4f c0       	rjmp	.+158    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    1eec:	ab e3       	ldi	r26, 0x3B	; 59
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	eb e3       	ldi	r30, 0x3B	; 59
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <M_DIO_Void_SetPinValue+0x19a>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <M_DIO_Void_SetPinValue+0x196>
    1f0e:	84 2b       	or	r24, r20
    1f10:	8c 93       	st	X, r24
    1f12:	3b c0       	rjmp	.+118    	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    1f14:	a8 e3       	ldi	r26, 0x38	; 56
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	e8 e3       	ldi	r30, 0x38	; 56
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <M_DIO_Void_SetPinValue+0x1c2>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <M_DIO_Void_SetPinValue+0x1be>
    1f36:	84 2b       	or	r24, r20
    1f38:	8c 93       	st	X, r24
    1f3a:	27 c0       	rjmp	.+78     	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    1f3c:	a5 e3       	ldi	r26, 0x35	; 53
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e5 e3       	ldi	r30, 0x35	; 53
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <M_DIO_Void_SetPinValue+0x1ea>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <M_DIO_Void_SetPinValue+0x1e6>
    1f5e:	84 2b       	or	r24, r20
    1f60:	8c 93       	st	X, r24
    1f62:	13 c0       	rjmp	.+38     	; 0x1f8a <M_DIO_Void_SetPinValue+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    1f64:	a2 e3       	ldi	r26, 0x32	; 50
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e2 e3       	ldi	r30, 0x32	; 50
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <M_DIO_Void_SetPinValue+0x212>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <M_DIO_Void_SetPinValue+0x20e>
    1f86:	84 2b       	or	r24, r20
    1f88:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    1f8a:	2a 96       	adiw	r28, 0x0a	; 10
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <M_DIO_Void_TogPin>:
void M_DIO_Void_TogPin(u8 Copy_U8_Num)
{
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <M_DIO_Void_TogPin+0x6>
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <M_DIO_Void_TogPin+0x8>
    1fa4:	0f 92       	push	r0
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9a e0       	ldi	r25, 0x0A	; 10
    1fb0:	69 2f       	mov	r22, r25
    1fb2:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    1fb6:	89 2f       	mov	r24, r25
    1fb8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num /10;
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9a e0       	ldi	r25, 0x0A	; 10
    1fbe:	69 2f       	mov	r22, r25
    1fc0:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    1fc4:	89 83       	std	Y+1, r24	; 0x01
	switch(Local_U8_Port)
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	3d 83       	std	Y+5, r19	; 0x05
    1fce:	2c 83       	std	Y+4, r18	; 0x04
    1fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd4:	82 30       	cpi	r24, 0x02	; 2
    1fd6:	91 05       	cpc	r25, r1
    1fd8:	51 f1       	breq	.+84     	; 0x202e <M_DIO_Void_TogPin+0x92>
    1fda:	2c 81       	ldd	r18, Y+4	; 0x04
    1fdc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fde:	23 30       	cpi	r18, 0x03	; 3
    1fe0:	31 05       	cpc	r19, r1
    1fe2:	34 f4       	brge	.+12     	; 0x1ff0 <M_DIO_Void_TogPin+0x54>
    1fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	61 f0       	breq	.+24     	; 0x2006 <M_DIO_Void_TogPin+0x6a>
    1fee:	5a c0       	rjmp	.+180    	; 0x20a4 <M_DIO_Void_TogPin+0x108>
    1ff0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff4:	23 30       	cpi	r18, 0x03	; 3
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	71 f1       	breq	.+92     	; 0x2056 <M_DIO_Void_TogPin+0xba>
    1ffa:	8c 81       	ldd	r24, Y+4	; 0x04
    1ffc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ffe:	84 30       	cpi	r24, 0x04	; 4
    2000:	91 05       	cpc	r25, r1
    2002:	e9 f1       	breq	.+122    	; 0x207e <M_DIO_Void_TogPin+0xe2>
    2004:	4f c0       	rjmp	.+158    	; 0x20a4 <M_DIO_Void_TogPin+0x108>
		{
		case 1: TOG_BIT(PORTA_REG,Local_U8_Pin); break;
    2006:	ab e3       	ldi	r26, 0x3B	; 59
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	eb e3       	ldi	r30, 0x3B	; 59
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	48 2f       	mov	r20, r24
    2012:	8a 81       	ldd	r24, Y+2	; 0x02
    2014:	28 2f       	mov	r18, r24
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	90 e0       	ldi	r25, 0x00	; 0
    201c:	02 2e       	mov	r0, r18
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <M_DIO_Void_TogPin+0x88>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	0a 94       	dec	r0
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <M_DIO_Void_TogPin+0x84>
    2028:	84 27       	eor	r24, r20
    202a:	8c 93       	st	X, r24
    202c:	3b c0       	rjmp	.+118    	; 0x20a4 <M_DIO_Void_TogPin+0x108>
		case 2: TOG_BIT(PORTB_REG,Local_U8_Pin); break;
    202e:	a8 e3       	ldi	r26, 0x38	; 56
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e8 e3       	ldi	r30, 0x38	; 56
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	80 81       	ld	r24, Z
    2038:	48 2f       	mov	r20, r24
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	28 2f       	mov	r18, r24
    203e:	30 e0       	ldi	r19, 0x00	; 0
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	02 2e       	mov	r0, r18
    2046:	02 c0       	rjmp	.+4      	; 0x204c <M_DIO_Void_TogPin+0xb0>
    2048:	88 0f       	add	r24, r24
    204a:	99 1f       	adc	r25, r25
    204c:	0a 94       	dec	r0
    204e:	e2 f7       	brpl	.-8      	; 0x2048 <M_DIO_Void_TogPin+0xac>
    2050:	84 27       	eor	r24, r20
    2052:	8c 93       	st	X, r24
    2054:	27 c0       	rjmp	.+78     	; 0x20a4 <M_DIO_Void_TogPin+0x108>
		case 3: TOG_BIT(PORTC_REG,Local_U8_Pin); break;
    2056:	a5 e3       	ldi	r26, 0x35	; 53
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e5 e3       	ldi	r30, 0x35	; 53
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	48 2f       	mov	r20, r24
    2062:	8a 81       	ldd	r24, Y+2	; 0x02
    2064:	28 2f       	mov	r18, r24
    2066:	30 e0       	ldi	r19, 0x00	; 0
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	90 e0       	ldi	r25, 0x00	; 0
    206c:	02 2e       	mov	r0, r18
    206e:	02 c0       	rjmp	.+4      	; 0x2074 <M_DIO_Void_TogPin+0xd8>
    2070:	88 0f       	add	r24, r24
    2072:	99 1f       	adc	r25, r25
    2074:	0a 94       	dec	r0
    2076:	e2 f7       	brpl	.-8      	; 0x2070 <M_DIO_Void_TogPin+0xd4>
    2078:	84 27       	eor	r24, r20
    207a:	8c 93       	st	X, r24
    207c:	13 c0       	rjmp	.+38     	; 0x20a4 <M_DIO_Void_TogPin+0x108>
		case 4: TOG_BIT(PORTD_REG,Local_U8_Pin); break;
    207e:	a2 e3       	ldi	r26, 0x32	; 50
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e2 e3       	ldi	r30, 0x32	; 50
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 81       	ld	r24, Z
    2088:	48 2f       	mov	r20, r24
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	28 2f       	mov	r18, r24
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	02 2e       	mov	r0, r18
    2096:	02 c0       	rjmp	.+4      	; 0x209c <M_DIO_Void_TogPin+0x100>
    2098:	88 0f       	add	r24, r24
    209a:	99 1f       	adc	r25, r25
    209c:	0a 94       	dec	r0
    209e:	e2 f7       	brpl	.-8      	; 0x2098 <M_DIO_Void_TogPin+0xfc>
    20a0:	84 27       	eor	r24, r20
    20a2:	8c 93       	st	X, r24
		default:                                                   break;
		}
}
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	0f 90       	pop	r0
    20ac:	0f 90       	pop	r0
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <M_DIO_U8_GetPinValue>:
u8 M_DIO_U8_GetPinValue(u8 Copy_U8_Num)
{
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <M_DIO_U8_GetPinValue+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <M_DIO_U8_GetPinValue+0x8>
    20bc:	00 d0       	rcall	.+0      	; 0x20be <M_DIO_U8_GetPinValue+0xa>
    20be:	cd b7       	in	r28, 0x3d	; 61
    20c0:	de b7       	in	r29, 0x3e	; 62
    20c2:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    20c4:	8c 81       	ldd	r24, Y+4	; 0x04
    20c6:	9a e0       	ldi	r25, 0x0A	; 10
    20c8:	69 2f       	mov	r22, r25
    20ca:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    20ce:	89 2f       	mov	r24, r25
    20d0:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_U8_Port = Copy_U8_Num /10;
    20d2:	8c 81       	ldd	r24, Y+4	; 0x04
    20d4:	9a e0       	ldi	r25, 0x0A	; 10
    20d6:	69 2f       	mov	r22, r25
    20d8:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    20dc:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Reading = 0;
    20de:	19 82       	std	Y+1, r1	; 0x01
	switch(Local_U8_Port)
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	3e 83       	std	Y+6, r19	; 0x06
    20e8:	2d 83       	std	Y+5, r18	; 0x05
    20ea:	4d 81       	ldd	r20, Y+5	; 0x05
    20ec:	5e 81       	ldd	r21, Y+6	; 0x06
    20ee:	42 30       	cpi	r20, 0x02	; 2
    20f0:	51 05       	cpc	r21, r1
    20f2:	41 f1       	breq	.+80     	; 0x2144 <M_DIO_U8_GetPinValue+0x90>
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	83 30       	cpi	r24, 0x03	; 3
    20fa:	91 05       	cpc	r25, r1
    20fc:	34 f4       	brge	.+12     	; 0x210a <M_DIO_U8_GetPinValue+0x56>
    20fe:	2d 81       	ldd	r18, Y+5	; 0x05
    2100:	3e 81       	ldd	r19, Y+6	; 0x06
    2102:	21 30       	cpi	r18, 0x01	; 1
    2104:	31 05       	cpc	r19, r1
    2106:	61 f0       	breq	.+24     	; 0x2120 <M_DIO_U8_GetPinValue+0x6c>
    2108:	52 c0       	rjmp	.+164    	; 0x21ae <M_DIO_U8_GetPinValue+0xfa>
    210a:	4d 81       	ldd	r20, Y+5	; 0x05
    210c:	5e 81       	ldd	r21, Y+6	; 0x06
    210e:	43 30       	cpi	r20, 0x03	; 3
    2110:	51 05       	cpc	r21, r1
    2112:	51 f1       	breq	.+84     	; 0x2168 <M_DIO_U8_GetPinValue+0xb4>
    2114:	8d 81       	ldd	r24, Y+5	; 0x05
    2116:	9e 81       	ldd	r25, Y+6	; 0x06
    2118:	84 30       	cpi	r24, 0x04	; 4
    211a:	91 05       	cpc	r25, r1
    211c:	b9 f1       	breq	.+110    	; 0x218c <M_DIO_U8_GetPinValue+0xd8>
    211e:	47 c0       	rjmp	.+142    	; 0x21ae <M_DIO_U8_GetPinValue+0xfa>
	{
	case 1: Local_U8_Reading = GET_BIT(PINA_REG,Local_U8_Pin); break;
    2120:	e9 e3       	ldi	r30, 0x39	; 57
    2122:	f0 e0       	ldi	r31, 0x00	; 0
    2124:	80 81       	ld	r24, Z
    2126:	28 2f       	mov	r18, r24
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	88 2f       	mov	r24, r24
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	a9 01       	movw	r20, r18
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <M_DIO_U8_GetPinValue+0x84>
    2134:	55 95       	asr	r21
    2136:	47 95       	ror	r20
    2138:	8a 95       	dec	r24
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <M_DIO_U8_GetPinValue+0x80>
    213c:	ca 01       	movw	r24, r20
    213e:	81 70       	andi	r24, 0x01	; 1
    2140:	89 83       	std	Y+1, r24	; 0x01
    2142:	35 c0       	rjmp	.+106    	; 0x21ae <M_DIO_U8_GetPinValue+0xfa>
	case 2: Local_U8_Reading = GET_BIT(PINB_REG,Local_U8_Pin); break;
    2144:	e6 e3       	ldi	r30, 0x36	; 54
    2146:	f0 e0       	ldi	r31, 0x00	; 0
    2148:	80 81       	ld	r24, Z
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	88 2f       	mov	r24, r24
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a9 01       	movw	r20, r18
    2156:	02 c0       	rjmp	.+4      	; 0x215c <M_DIO_U8_GetPinValue+0xa8>
    2158:	55 95       	asr	r21
    215a:	47 95       	ror	r20
    215c:	8a 95       	dec	r24
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <M_DIO_U8_GetPinValue+0xa4>
    2160:	ca 01       	movw	r24, r20
    2162:	81 70       	andi	r24, 0x01	; 1
    2164:	89 83       	std	Y+1, r24	; 0x01
    2166:	23 c0       	rjmp	.+70     	; 0x21ae <M_DIO_U8_GetPinValue+0xfa>
	case 3: Local_U8_Reading = GET_BIT(PINC_REG,Local_U8_Pin); break;
    2168:	e3 e3       	ldi	r30, 0x33	; 51
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	80 81       	ld	r24, Z
    216e:	28 2f       	mov	r18, r24
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	8b 81       	ldd	r24, Y+3	; 0x03
    2174:	88 2f       	mov	r24, r24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	a9 01       	movw	r20, r18
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <M_DIO_U8_GetPinValue+0xcc>
    217c:	55 95       	asr	r21
    217e:	47 95       	ror	r20
    2180:	8a 95       	dec	r24
    2182:	e2 f7       	brpl	.-8      	; 0x217c <M_DIO_U8_GetPinValue+0xc8>
    2184:	ca 01       	movw	r24, r20
    2186:	81 70       	andi	r24, 0x01	; 1
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	11 c0       	rjmp	.+34     	; 0x21ae <M_DIO_U8_GetPinValue+0xfa>
	case 4: Local_U8_Reading = GET_BIT(PIND_REG,Local_U8_Pin); break;
    218c:	e0 e3       	ldi	r30, 0x30	; 48
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	80 81       	ld	r24, Z
    2192:	28 2f       	mov	r18, r24
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	8b 81       	ldd	r24, Y+3	; 0x03
    2198:	88 2f       	mov	r24, r24
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	a9 01       	movw	r20, r18
    219e:	02 c0       	rjmp	.+4      	; 0x21a4 <M_DIO_U8_GetPinValue+0xf0>
    21a0:	55 95       	asr	r21
    21a2:	47 95       	ror	r20
    21a4:	8a 95       	dec	r24
    21a6:	e2 f7       	brpl	.-8      	; 0x21a0 <M_DIO_U8_GetPinValue+0xec>
    21a8:	ca 01       	movw	r24, r20
    21aa:	81 70       	andi	r24, 0x01	; 1
    21ac:	89 83       	std	Y+1, r24	; 0x01
	default:                                                   break;
	}
return Local_U8_Reading;
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    21b0:	26 96       	adiw	r28, 0x06	; 6
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	de bf       	out	0x3e, r29	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	cd bf       	out	0x3d, r28	; 61
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <M_DIO_Void_SetPinPullUpResistor>:

void M_DIO_Void_SetPinPullUpResistor(u8 Copy_U8_Num,u8 state)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	cd b7       	in	r28, 0x3d	; 61
    21c8:	de b7       	in	r29, 0x3e	; 62
    21ca:	2a 97       	sbiw	r28, 0x0a	; 10
    21cc:	0f b6       	in	r0, 0x3f	; 63
    21ce:	f8 94       	cli
    21d0:	de bf       	out	0x3e, r29	; 62
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	cd bf       	out	0x3d, r28	; 61
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8_Pin = Copy_U8_Num % 10;
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9a e0       	ldi	r25, 0x0A	; 10
    21de:	69 2f       	mov	r22, r25
    21e0:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    21e4:	89 2f       	mov	r24, r25
    21e6:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Port = Copy_U8_Num /10;
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9a e0       	ldi	r25, 0x0A	; 10
    21ec:	69 2f       	mov	r22, r25
    21ee:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    21f2:	89 83       	std	Y+1, r24	; 0x01
	switch(state)
    21f4:	8c 81       	ldd	r24, Y+4	; 0x04
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3a 87       	std	Y+10, r19	; 0x0a
    21fc:	29 87       	std	Y+9, r18	; 0x09
    21fe:	89 85       	ldd	r24, Y+9	; 0x09
    2200:	9a 85       	ldd	r25, Y+10	; 0x0a
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	39 f0       	breq	.+14     	; 0x2214 <M_DIO_Void_SetPinPullUpResistor+0x52>
    2206:	29 85       	ldd	r18, Y+9	; 0x09
    2208:	3a 85       	ldd	r19, Y+10	; 0x0a
    220a:	21 30       	cpi	r18, 0x01	; 1
    220c:	31 05       	cpc	r19, r1
    220e:	09 f4       	brne	.+2      	; 0x2212 <M_DIO_Void_SetPinPullUpResistor+0x50>
    2210:	76 c0       	rjmp	.+236    	; 0x22fe <M_DIO_Void_SetPinPullUpResistor+0x13c>
    2212:	e4 c0       	rjmp	.+456    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
	{
	case DISABLE:
		switch(Local_U8_Port)
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	28 2f       	mov	r18, r24
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	38 87       	std	Y+8, r19	; 0x08
    221c:	2f 83       	std	Y+7, r18	; 0x07
    221e:	8f 81       	ldd	r24, Y+7	; 0x07
    2220:	98 85       	ldd	r25, Y+8	; 0x08
    2222:	82 30       	cpi	r24, 0x02	; 2
    2224:	91 05       	cpc	r25, r1
    2226:	61 f1       	breq	.+88     	; 0x2280 <M_DIO_Void_SetPinPullUpResistor+0xbe>
    2228:	2f 81       	ldd	r18, Y+7	; 0x07
    222a:	38 85       	ldd	r19, Y+8	; 0x08
    222c:	23 30       	cpi	r18, 0x03	; 3
    222e:	31 05       	cpc	r19, r1
    2230:	34 f4       	brge	.+12     	; 0x223e <M_DIO_Void_SetPinPullUpResistor+0x7c>
    2232:	8f 81       	ldd	r24, Y+7	; 0x07
    2234:	98 85       	ldd	r25, Y+8	; 0x08
    2236:	81 30       	cpi	r24, 0x01	; 1
    2238:	91 05       	cpc	r25, r1
    223a:	69 f0       	breq	.+26     	; 0x2256 <M_DIO_Void_SetPinPullUpResistor+0x94>
    223c:	cf c0       	rjmp	.+414    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
    223e:	2f 81       	ldd	r18, Y+7	; 0x07
    2240:	38 85       	ldd	r19, Y+8	; 0x08
    2242:	23 30       	cpi	r18, 0x03	; 3
    2244:	31 05       	cpc	r19, r1
    2246:	89 f1       	breq	.+98     	; 0x22aa <M_DIO_Void_SetPinPullUpResistor+0xe8>
    2248:	8f 81       	ldd	r24, Y+7	; 0x07
    224a:	98 85       	ldd	r25, Y+8	; 0x08
    224c:	84 30       	cpi	r24, 0x04	; 4
    224e:	91 05       	cpc	r25, r1
    2250:	09 f4       	brne	.+2      	; 0x2254 <M_DIO_Void_SetPinPullUpResistor+0x92>
    2252:	40 c0       	rjmp	.+128    	; 0x22d4 <M_DIO_Void_SetPinPullUpResistor+0x112>
    2254:	c3 c0       	rjmp	.+390    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
		{
		case 1: CLR_BIT(PORTA_REG,Local_U8_Pin); break;
    2256:	ab e3       	ldi	r26, 0x3B	; 59
    2258:	b0 e0       	ldi	r27, 0x00	; 0
    225a:	eb e3       	ldi	r30, 0x3B	; 59
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	48 2f       	mov	r20, r24
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	02 2e       	mov	r0, r18
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <M_DIO_Void_SetPinPullUpResistor+0xb2>
    2270:	88 0f       	add	r24, r24
    2272:	99 1f       	adc	r25, r25
    2274:	0a 94       	dec	r0
    2276:	e2 f7       	brpl	.-8      	; 0x2270 <M_DIO_Void_SetPinPullUpResistor+0xae>
    2278:	80 95       	com	r24
    227a:	84 23       	and	r24, r20
    227c:	8c 93       	st	X, r24
    227e:	ae c0       	rjmp	.+348    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 2: CLR_BIT(PORTB_REG,Local_U8_Pin); break;
    2280:	a8 e3       	ldi	r26, 0x38	; 56
    2282:	b0 e0       	ldi	r27, 0x00	; 0
    2284:	e8 e3       	ldi	r30, 0x38	; 56
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	80 81       	ld	r24, Z
    228a:	48 2f       	mov	r20, r24
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	28 2f       	mov	r18, r24
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	81 e0       	ldi	r24, 0x01	; 1
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	02 2e       	mov	r0, r18
    2298:	02 c0       	rjmp	.+4      	; 0x229e <M_DIO_Void_SetPinPullUpResistor+0xdc>
    229a:	88 0f       	add	r24, r24
    229c:	99 1f       	adc	r25, r25
    229e:	0a 94       	dec	r0
    22a0:	e2 f7       	brpl	.-8      	; 0x229a <M_DIO_Void_SetPinPullUpResistor+0xd8>
    22a2:	80 95       	com	r24
    22a4:	84 23       	and	r24, r20
    22a6:	8c 93       	st	X, r24
    22a8:	99 c0       	rjmp	.+306    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 3: CLR_BIT(PORTC_REG,Local_U8_Pin); break;
    22aa:	a5 e3       	ldi	r26, 0x35	; 53
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e5 e3       	ldi	r30, 0x35	; 53
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	48 2f       	mov	r20, r24
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	02 2e       	mov	r0, r18
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <M_DIO_Void_SetPinPullUpResistor+0x106>
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	0a 94       	dec	r0
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <M_DIO_Void_SetPinPullUpResistor+0x102>
    22cc:	80 95       	com	r24
    22ce:	84 23       	and	r24, r20
    22d0:	8c 93       	st	X, r24
    22d2:	84 c0       	rjmp	.+264    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 4: CLR_BIT(PORTD_REG,Local_U8_Pin); break;
    22d4:	a2 e3       	ldi	r26, 0x32	; 50
    22d6:	b0 e0       	ldi	r27, 0x00	; 0
    22d8:	e2 e3       	ldi	r30, 0x32	; 50
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	80 81       	ld	r24, Z
    22de:	48 2f       	mov	r20, r24
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	28 2f       	mov	r18, r24
    22e4:	30 e0       	ldi	r19, 0x00	; 0
    22e6:	81 e0       	ldi	r24, 0x01	; 1
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	02 2e       	mov	r0, r18
    22ec:	02 c0       	rjmp	.+4      	; 0x22f2 <M_DIO_Void_SetPinPullUpResistor+0x130>
    22ee:	88 0f       	add	r24, r24
    22f0:	99 1f       	adc	r25, r25
    22f2:	0a 94       	dec	r0
    22f4:	e2 f7       	brpl	.-8      	; 0x22ee <M_DIO_Void_SetPinPullUpResistor+0x12c>
    22f6:	80 95       	com	r24
    22f8:	84 23       	and	r24, r20
    22fa:	8c 93       	st	X, r24
    22fc:	6f c0       	rjmp	.+222    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
		default:                                 break;
		}
		break;
	case ENABLE:
		switch(Local_U8_Port)
    22fe:	89 81       	ldd	r24, Y+1	; 0x01
    2300:	28 2f       	mov	r18, r24
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	3e 83       	std	Y+6, r19	; 0x06
    2306:	2d 83       	std	Y+5, r18	; 0x05
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	82 30       	cpi	r24, 0x02	; 2
    230e:	91 05       	cpc	r25, r1
    2310:	51 f1       	breq	.+84     	; 0x2366 <M_DIO_Void_SetPinPullUpResistor+0x1a4>
    2312:	2d 81       	ldd	r18, Y+5	; 0x05
    2314:	3e 81       	ldd	r19, Y+6	; 0x06
    2316:	23 30       	cpi	r18, 0x03	; 3
    2318:	31 05       	cpc	r19, r1
    231a:	34 f4       	brge	.+12     	; 0x2328 <M_DIO_Void_SetPinPullUpResistor+0x166>
    231c:	8d 81       	ldd	r24, Y+5	; 0x05
    231e:	9e 81       	ldd	r25, Y+6	; 0x06
    2320:	81 30       	cpi	r24, 0x01	; 1
    2322:	91 05       	cpc	r25, r1
    2324:	61 f0       	breq	.+24     	; 0x233e <M_DIO_Void_SetPinPullUpResistor+0x17c>
    2326:	5a c0       	rjmp	.+180    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
    2328:	2d 81       	ldd	r18, Y+5	; 0x05
    232a:	3e 81       	ldd	r19, Y+6	; 0x06
    232c:	23 30       	cpi	r18, 0x03	; 3
    232e:	31 05       	cpc	r19, r1
    2330:	71 f1       	breq	.+92     	; 0x238e <M_DIO_Void_SetPinPullUpResistor+0x1cc>
    2332:	8d 81       	ldd	r24, Y+5	; 0x05
    2334:	9e 81       	ldd	r25, Y+6	; 0x06
    2336:	84 30       	cpi	r24, 0x04	; 4
    2338:	91 05       	cpc	r25, r1
    233a:	e9 f1       	breq	.+122    	; 0x23b6 <M_DIO_Void_SetPinPullUpResistor+0x1f4>
    233c:	4f c0       	rjmp	.+158    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
		{
		case 1: SET_BIT(PORTA_REG,Local_U8_Pin); break;
    233e:	ab e3       	ldi	r26, 0x3B	; 59
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	eb e3       	ldi	r30, 0x3B	; 59
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	48 2f       	mov	r20, r24
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	28 2f       	mov	r18, r24
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	02 2e       	mov	r0, r18
    2356:	02 c0       	rjmp	.+4      	; 0x235c <M_DIO_Void_SetPinPullUpResistor+0x19a>
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	0a 94       	dec	r0
    235e:	e2 f7       	brpl	.-8      	; 0x2358 <M_DIO_Void_SetPinPullUpResistor+0x196>
    2360:	84 2b       	or	r24, r20
    2362:	8c 93       	st	X, r24
    2364:	3b c0       	rjmp	.+118    	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 2: SET_BIT(PORTB_REG,Local_U8_Pin); break;
    2366:	a8 e3       	ldi	r26, 0x38	; 56
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e8 e3       	ldi	r30, 0x38	; 56
    236c:	f0 e0       	ldi	r31, 0x00	; 0
    236e:	80 81       	ld	r24, Z
    2370:	48 2f       	mov	r20, r24
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	28 2f       	mov	r18, r24
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	02 2e       	mov	r0, r18
    237e:	02 c0       	rjmp	.+4      	; 0x2384 <M_DIO_Void_SetPinPullUpResistor+0x1c2>
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	0a 94       	dec	r0
    2386:	e2 f7       	brpl	.-8      	; 0x2380 <M_DIO_Void_SetPinPullUpResistor+0x1be>
    2388:	84 2b       	or	r24, r20
    238a:	8c 93       	st	X, r24
    238c:	27 c0       	rjmp	.+78     	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 3: SET_BIT(PORTC_REG,Local_U8_Pin); break;
    238e:	a5 e3       	ldi	r26, 0x35	; 53
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e5 e3       	ldi	r30, 0x35	; 53
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	48 2f       	mov	r20, r24
    239a:	8a 81       	ldd	r24, Y+2	; 0x02
    239c:	28 2f       	mov	r18, r24
    239e:	30 e0       	ldi	r19, 0x00	; 0
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	02 2e       	mov	r0, r18
    23a6:	02 c0       	rjmp	.+4      	; 0x23ac <M_DIO_Void_SetPinPullUpResistor+0x1ea>
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	0a 94       	dec	r0
    23ae:	e2 f7       	brpl	.-8      	; 0x23a8 <M_DIO_Void_SetPinPullUpResistor+0x1e6>
    23b0:	84 2b       	or	r24, r20
    23b2:	8c 93       	st	X, r24
    23b4:	13 c0       	rjmp	.+38     	; 0x23dc <M_DIO_Void_SetPinPullUpResistor+0x21a>
		case 4: SET_BIT(PORTD_REG,Local_U8_Pin); break;
    23b6:	a2 e3       	ldi	r26, 0x32	; 50
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e2 e3       	ldi	r30, 0x32	; 50
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	48 2f       	mov	r20, r24
    23c2:	8a 81       	ldd	r24, Y+2	; 0x02
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	02 2e       	mov	r0, r18
    23ce:	02 c0       	rjmp	.+4      	; 0x23d4 <M_DIO_Void_SetPinPullUpResistor+0x212>
    23d0:	88 0f       	add	r24, r24
    23d2:	99 1f       	adc	r25, r25
    23d4:	0a 94       	dec	r0
    23d6:	e2 f7       	brpl	.-8      	; 0x23d0 <M_DIO_Void_SetPinPullUpResistor+0x20e>
    23d8:	84 2b       	or	r24, r20
    23da:	8c 93       	st	X, r24
		}
		break;
	default:
		break;
	}
}
    23dc:	2a 96       	adiw	r28, 0x0a	; 10
    23de:	0f b6       	in	r0, 0x3f	; 63
    23e0:	f8 94       	cli
    23e2:	de bf       	out	0x3e, r29	; 62
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	cd bf       	out	0x3d, r28	; 61
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <H_AT24C16A_Void_EEPROMInit>:
 */

#include "AT24C16A_Interface.h"

void H_AT24C16A_Void_EEPROMInit(void)
{
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
    23f6:	2e 97       	sbiw	r28, 0x0e	; 14
    23f8:	0f b6       	in	r0, 0x3f	; 63
    23fa:	f8 94       	cli
    23fc:	de bf       	out	0x3e, r29	; 62
    23fe:	0f be       	out	0x3f, r0	; 63
    2400:	cd bf       	out	0x3d, r28	; 61
	M_I2C_Void_I2CInit();
    2402:	0e 94 9d 0b 	call	0x173a	; 0x173a <M_I2C_Void_I2CInit>
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	aa e7       	ldi	r26, 0x7A	; 122
    240c:	b4 e4       	ldi	r27, 0x44	; 68
    240e:	8b 87       	std	Y+11, r24	; 0x0b
    2410:	9c 87       	std	Y+12, r25	; 0x0c
    2412:	ad 87       	std	Y+13, r26	; 0x0d
    2414:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2416:	6b 85       	ldd	r22, Y+11	; 0x0b
    2418:	7c 85       	ldd	r23, Y+12	; 0x0c
    241a:	8d 85       	ldd	r24, Y+13	; 0x0d
    241c:	9e 85       	ldd	r25, Y+14	; 0x0e
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	4a e7       	ldi	r20, 0x7A	; 122
    2424:	55 e4       	ldi	r21, 0x45	; 69
    2426:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242a:	dc 01       	movw	r26, r24
    242c:	cb 01       	movw	r24, r22
    242e:	8f 83       	std	Y+7, r24	; 0x07
    2430:	98 87       	std	Y+8, r25	; 0x08
    2432:	a9 87       	std	Y+9, r26	; 0x09
    2434:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2436:	6f 81       	ldd	r22, Y+7	; 0x07
    2438:	78 85       	ldd	r23, Y+8	; 0x08
    243a:	89 85       	ldd	r24, Y+9	; 0x09
    243c:	9a 85       	ldd	r25, Y+10	; 0x0a
    243e:	20 e0       	ldi	r18, 0x00	; 0
    2440:	30 e0       	ldi	r19, 0x00	; 0
    2442:	40 e8       	ldi	r20, 0x80	; 128
    2444:	5f e3       	ldi	r21, 0x3F	; 63
    2446:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    244a:	88 23       	and	r24, r24
    244c:	2c f4       	brge	.+10     	; 0x2458 <H_AT24C16A_Void_EEPROMInit+0x6a>
		__ticks = 1;
    244e:	81 e0       	ldi	r24, 0x01	; 1
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	9e 83       	std	Y+6, r25	; 0x06
    2454:	8d 83       	std	Y+5, r24	; 0x05
    2456:	3f c0       	rjmp	.+126    	; 0x24d6 <H_AT24C16A_Void_EEPROMInit+0xe8>
	else if (__tmp > 65535)
    2458:	6f 81       	ldd	r22, Y+7	; 0x07
    245a:	78 85       	ldd	r23, Y+8	; 0x08
    245c:	89 85       	ldd	r24, Y+9	; 0x09
    245e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	3f ef       	ldi	r19, 0xFF	; 255
    2464:	4f e7       	ldi	r20, 0x7F	; 127
    2466:	57 e4       	ldi	r21, 0x47	; 71
    2468:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    246c:	18 16       	cp	r1, r24
    246e:	4c f5       	brge	.+82     	; 0x24c2 <H_AT24C16A_Void_EEPROMInit+0xd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2470:	6b 85       	ldd	r22, Y+11	; 0x0b
    2472:	7c 85       	ldd	r23, Y+12	; 0x0c
    2474:	8d 85       	ldd	r24, Y+13	; 0x0d
    2476:	9e 85       	ldd	r25, Y+14	; 0x0e
    2478:	20 e0       	ldi	r18, 0x00	; 0
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	40 e2       	ldi	r20, 0x20	; 32
    247e:	51 e4       	ldi	r21, 0x41	; 65
    2480:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2484:	dc 01       	movw	r26, r24
    2486:	cb 01       	movw	r24, r22
    2488:	bc 01       	movw	r22, r24
    248a:	cd 01       	movw	r24, r26
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	0f c0       	rjmp	.+30     	; 0x24b8 <H_AT24C16A_Void_EEPROMInit+0xca>
    249a:	80 e9       	ldi	r24, 0x90	; 144
    249c:	91 e0       	ldi	r25, 0x01	; 1
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <H_AT24C16A_Void_EEPROMInit+0xb8>
    24aa:	9c 83       	std	Y+4, r25	; 0x04
    24ac:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24ae:	8d 81       	ldd	r24, Y+5	; 0x05
    24b0:	9e 81       	ldd	r25, Y+6	; 0x06
    24b2:	01 97       	sbiw	r24, 0x01	; 1
    24b4:	9e 83       	std	Y+6, r25	; 0x06
    24b6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	8d 81       	ldd	r24, Y+5	; 0x05
    24ba:	9e 81       	ldd	r25, Y+6	; 0x06
    24bc:	00 97       	sbiw	r24, 0x00	; 0
    24be:	69 f7       	brne	.-38     	; 0x249a <H_AT24C16A_Void_EEPROMInit+0xac>
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <H_AT24C16A_Void_EEPROMInit+0xfc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c2:	6f 81       	ldd	r22, Y+7	; 0x07
    24c4:	78 85       	ldd	r23, Y+8	; 0x08
    24c6:	89 85       	ldd	r24, Y+9	; 0x09
    24c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    24ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ce:	dc 01       	movw	r26, r24
    24d0:	cb 01       	movw	r24, r22
    24d2:	9e 83       	std	Y+6, r25	; 0x06
    24d4:	8d 83       	std	Y+5, r24	; 0x05
    24d6:	8d 81       	ldd	r24, Y+5	; 0x05
    24d8:	9e 81       	ldd	r25, Y+6	; 0x06
    24da:	9a 83       	std	Y+2, r25	; 0x02
    24dc:	89 83       	std	Y+1, r24	; 0x01
    24de:	89 81       	ldd	r24, Y+1	; 0x01
    24e0:	9a 81       	ldd	r25, Y+2	; 0x02
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	f1 f7       	brne	.-4      	; 0x24e2 <H_AT24C16A_Void_EEPROMInit+0xf4>
    24e6:	9a 83       	std	Y+2, r25	; 0x02
    24e8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    24ea:	2e 96       	adiw	r28, 0x0e	; 14
    24ec:	0f b6       	in	r0, 0x3f	; 63
    24ee:	f8 94       	cli
    24f0:	de bf       	out	0x3e, r29	; 62
    24f2:	0f be       	out	0x3f, r0	; 63
    24f4:	cd bf       	out	0x3d, r28	; 61
    24f6:	cf 91       	pop	r28
    24f8:	df 91       	pop	r29
    24fa:	08 95       	ret

000024fc <H_AT24C16A_Void_EEPROMWrite>:
void H_AT24C16A_Void_EEPROMWrite(u8 Copy_U8_Page,u8 Copy_U8_Byte,u8 Copy_U8_Data)
{
    24fc:	df 93       	push	r29
    24fe:	cf 93       	push	r28
    2500:	cd b7       	in	r28, 0x3d	; 61
    2502:	de b7       	in	r29, 0x3e	; 62
    2504:	61 97       	sbiw	r28, 0x11	; 17
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	8f 87       	std	Y+15, r24	; 0x0f
    2512:	68 8b       	std	Y+16, r22	; 0x10
    2514:	49 8b       	std	Y+17, r20	; 0x11
	M_I2C_Void_I2CStartCondition();
    2516:	0e 94 ab 0b 	call	0x1756	; 0x1756 <M_I2C_Void_I2CStartCondition>
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    251a:	8f 85       	ldd	r24, Y+15	; 0x0f
    251c:	80 65       	ori	r24, 0x50	; 80
    251e:	0e 94 0d 0c 	call	0x181a	; 0x181a <M_I2C_Void_I2CSendSlaveAddressWrite>
	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
    2522:	88 89       	ldd	r24, Y+16	; 0x10
    2524:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CSendByte(Copy_U8_Data);
    2528:	89 89       	ldd	r24, Y+17	; 0x11
    252a:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CStopCondition();
    252e:	0e 94 cf 0b 	call	0x179e	; 0x179e <M_I2C_Void_I2CStopCondition>
    2532:	80 e0       	ldi	r24, 0x00	; 0
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	a0 e2       	ldi	r26, 0x20	; 32
    2538:	b1 e4       	ldi	r27, 0x41	; 65
    253a:	8b 87       	std	Y+11, r24	; 0x0b
    253c:	9c 87       	std	Y+12, r25	; 0x0c
    253e:	ad 87       	std	Y+13, r26	; 0x0d
    2540:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2542:	6b 85       	ldd	r22, Y+11	; 0x0b
    2544:	7c 85       	ldd	r23, Y+12	; 0x0c
    2546:	8d 85       	ldd	r24, Y+13	; 0x0d
    2548:	9e 85       	ldd	r25, Y+14	; 0x0e
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	4a e7       	ldi	r20, 0x7A	; 122
    2550:	55 e4       	ldi	r21, 0x45	; 69
    2552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	8f 83       	std	Y+7, r24	; 0x07
    255c:	98 87       	std	Y+8, r25	; 0x08
    255e:	a9 87       	std	Y+9, r26	; 0x09
    2560:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2562:	6f 81       	ldd	r22, Y+7	; 0x07
    2564:	78 85       	ldd	r23, Y+8	; 0x08
    2566:	89 85       	ldd	r24, Y+9	; 0x09
    2568:	9a 85       	ldd	r25, Y+10	; 0x0a
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e8       	ldi	r20, 0x80	; 128
    2570:	5f e3       	ldi	r21, 0x3F	; 63
    2572:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2576:	88 23       	and	r24, r24
    2578:	2c f4       	brge	.+10     	; 0x2584 <H_AT24C16A_Void_EEPROMWrite+0x88>
		__ticks = 1;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9e 83       	std	Y+6, r25	; 0x06
    2580:	8d 83       	std	Y+5, r24	; 0x05
    2582:	3f c0       	rjmp	.+126    	; 0x2602 <H_AT24C16A_Void_EEPROMWrite+0x106>
	else if (__tmp > 65535)
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	3f ef       	ldi	r19, 0xFF	; 255
    2590:	4f e7       	ldi	r20, 0x7F	; 127
    2592:	57 e4       	ldi	r21, 0x47	; 71
    2594:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2598:	18 16       	cp	r1, r24
    259a:	4c f5       	brge	.+82     	; 0x25ee <H_AT24C16A_Void_EEPROMWrite+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259c:	6b 85       	ldd	r22, Y+11	; 0x0b
    259e:	7c 85       	ldd	r23, Y+12	; 0x0c
    25a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e2       	ldi	r20, 0x20	; 32
    25aa:	51 e4       	ldi	r21, 0x41	; 65
    25ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9e 83       	std	Y+6, r25	; 0x06
    25c2:	8d 83       	std	Y+5, r24	; 0x05
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <H_AT24C16A_Void_EEPROMWrite+0xe8>
    25c6:	80 e9       	ldi	r24, 0x90	; 144
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	9c 83       	std	Y+4, r25	; 0x04
    25cc:	8b 83       	std	Y+3, r24	; 0x03
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	9c 81       	ldd	r25, Y+4	; 0x04
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <H_AT24C16A_Void_EEPROMWrite+0xd6>
    25d6:	9c 83       	std	Y+4, r25	; 0x04
    25d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25da:	8d 81       	ldd	r24, Y+5	; 0x05
    25dc:	9e 81       	ldd	r25, Y+6	; 0x06
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	9e 83       	std	Y+6, r25	; 0x06
    25e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e4:	8d 81       	ldd	r24, Y+5	; 0x05
    25e6:	9e 81       	ldd	r25, Y+6	; 0x06
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	69 f7       	brne	.-38     	; 0x25c6 <H_AT24C16A_Void_EEPROMWrite+0xca>
    25ec:	14 c0       	rjmp	.+40     	; 0x2616 <H_AT24C16A_Void_EEPROMWrite+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ee:	6f 81       	ldd	r22, Y+7	; 0x07
    25f0:	78 85       	ldd	r23, Y+8	; 0x08
    25f2:	89 85       	ldd	r24, Y+9	; 0x09
    25f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9e 83       	std	Y+6, r25	; 0x06
    2600:	8d 83       	std	Y+5, r24	; 0x05
    2602:	8d 81       	ldd	r24, Y+5	; 0x05
    2604:	9e 81       	ldd	r25, Y+6	; 0x06
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <H_AT24C16A_Void_EEPROMWrite+0x112>
    2612:	9a 83       	std	Y+2, r25	; 0x02
    2614:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    2616:	61 96       	adiw	r28, 0x11	; 17
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	cf 91       	pop	r28
    2624:	df 91       	pop	r29
    2626:	08 95       	ret

00002628 <H_AT24C16A_Void_EEPROMRead>:
u8 H_AT24C16A_Void_EEPROMRead(u8 Copy_U8_Page,u8 Copy_U8_Byte)
{
    2628:	df 93       	push	r29
    262a:	cf 93       	push	r28
    262c:	00 d0       	rcall	.+0      	; 0x262e <H_AT24C16A_Void_EEPROMRead+0x6>
    262e:	0f 92       	push	r0
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	8a 83       	std	Y+2, r24	; 0x02
    2636:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_U8_Reading = 0;
    2638:	19 82       	std	Y+1, r1	; 0x01
	M_I2C_Void_I2CStartCondition();
    263a:	0e 94 ab 0b 	call	0x1756	; 0x1756 <M_I2C_Void_I2CStartCondition>
	M_I2C_Void_I2CSendSlaveAddressWrite(0x50 | Copy_U8_Page);
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	80 65       	ori	r24, 0x50	; 80
    2642:	0e 94 0d 0c 	call	0x181a	; 0x181a <M_I2C_Void_I2CSendSlaveAddressWrite>
	M_I2C_Void_I2CSendByte(Copy_U8_Byte);
    2646:	8b 81       	ldd	r24, Y+3	; 0x03
    2648:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <M_I2C_Void_I2CSendByte>
	M_I2C_Void_I2CRepeatedStart();
    264c:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <M_I2C_Void_I2CRepeatedStart>
	M_I2C_Void_I2CSendSlaveAddressRead(0x50 | Copy_U8_Page);
    2650:	8a 81       	ldd	r24, Y+2	; 0x02
    2652:	80 65       	ori	r24, 0x50	; 80
    2654:	0e 94 32 0c 	call	0x1864	; 0x1864 <M_I2C_Void_I2CSendSlaveAddressRead>
	Local_U8_Reading = M_I2C_Void_I2CReadByte();
    2658:	0e 94 94 0c 	call	0x1928	; 0x1928 <M_I2C_Void_I2CReadByte>
    265c:	89 83       	std	Y+1, r24	; 0x01
	M_I2C_Void_I2CStopCondition();
    265e:	0e 94 cf 0b 	call	0x179e	; 0x179e <M_I2C_Void_I2CStopCondition>
	return Local_U8_Reading;
    2662:	89 81       	ldd	r24, Y+1	; 0x01
}
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	cf 91       	pop	r28
    266c:	df 91       	pop	r29
    266e:	08 95       	ret

00002670 <M_ADC_Void_ADCInit>:
#include "ADC_Interface.h"
#include "ADC_Private.h"


void M_ADC_Void_ADCInit(void)
{
    2670:	df 93       	push	r29
    2672:	cf 93       	push	r28
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
#if ADC_V_REF_MODE == AVCC
	CLR_BIT(ADMUX_REG,REFS1_BIT);
    2678:	a7 e2       	ldi	r26, 0x27	; 39
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	e7 e2       	ldi	r30, 0x27	; 39
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	80 81       	ld	r24, Z
    2682:	8f 77       	andi	r24, 0x7F	; 127
    2684:	8c 93       	st	X, r24
	SET_BIT(ADMUX_REG,REFS0_BIT);
    2686:	a7 e2       	ldi	r26, 0x27	; 39
    2688:	b0 e0       	ldi	r27, 0x00	; 0
    268a:	e7 e2       	ldi	r30, 0x27	; 39
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	80 81       	ld	r24, Z
    2690:	80 64       	ori	r24, 0x40	; 64
    2692:	8c 93       	st	X, r24
#elif ADC_V_REF_MODE == _2V5
	SET_BIT(ADMUX_REG,REFS1_BIT);
	SET_BIT(ADMUX_REG,REFS0_BIT);
#endif
	//to select right adjust
	CLR_BIT(ADMUX_REG,ADLAR_BIT);
    2694:	a7 e2       	ldi	r26, 0x27	; 39
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e7 e2       	ldi	r30, 0x27	; 39
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	8f 7d       	andi	r24, 0xDF	; 223
    26a0:	8c 93       	st	X, r24
#if  ADC_PRESCALER_DV == 128
	SET_BIT(ADCSRA_REG,ADPS2_BIT);
    26a2:	a6 e2       	ldi	r26, 0x26	; 38
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e6 e2       	ldi	r30, 0x26	; 38
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	84 60       	ori	r24, 0x04	; 4
    26ae:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
    26b0:	a6 e2       	ldi	r26, 0x26	; 38
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	e6 e2       	ldi	r30, 0x26	; 38
    26b6:	f0 e0       	ldi	r31, 0x00	; 0
    26b8:	80 81       	ld	r24, Z
    26ba:	82 60       	ori	r24, 0x02	; 2
    26bc:	8c 93       	st	X, r24
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
    26be:	a6 e2       	ldi	r26, 0x26	; 38
    26c0:	b0 e0       	ldi	r27, 0x00	; 0
    26c2:	e6 e2       	ldi	r30, 0x26	; 38
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
    26c8:	81 60       	ori	r24, 0x01	; 1
    26ca:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA_REG,ADPS2_BIT);
	SET_BIT(ADCSRA_REG,ADPS1_BIT);
	SET_BIT(ADCSRA_REG,ADPS0_BIT);
#endif

	SET_BIT(ADCSRA_REG,ADATE_BIT);
    26cc:	a6 e2       	ldi	r26, 0x26	; 38
    26ce:	b0 e0       	ldi	r27, 0x00	; 0
    26d0:	e6 e2       	ldi	r30, 0x26	; 38
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	80 62       	ori	r24, 0x20	; 32
    26d8:	8c 93       	st	X, r24
	//to enable ADC circuit
	SET_BIT(ADCSRA_REG,ADEN_BIT);
    26da:	a6 e2       	ldi	r26, 0x26	; 38
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e6 e2       	ldi	r30, 0x26	; 38
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	80 68       	ori	r24, 0x80	; 128
    26e6:	8c 93       	st	X, r24

}
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	08 95       	ret

000026ee <M_ADC_U16_ADCRead>:
u16 M_ADC_U16_ADCRead(u8 Copy_U8_ADCChannel)
{
    26ee:	df 93       	push	r29
    26f0:	cf 93       	push	r28
    26f2:	cd b7       	in	r28, 0x3d	; 61
    26f4:	de b7       	in	r29, 0x3e	; 62
    26f6:	27 97       	sbiw	r28, 0x07	; 7
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	f8 94       	cli
    26fc:	de bf       	out	0x3e, r29	; 62
    26fe:	0f be       	out	0x3f, r0	; 63
    2700:	cd bf       	out	0x3d, r28	; 61
    2702:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_U32_Counter=0;
    2704:	19 82       	std	Y+1, r1	; 0x01
    2706:	1a 82       	std	Y+2, r1	; 0x02
    2708:	1b 82       	std	Y+3, r1	; 0x03
    270a:	1c 82       	std	Y+4, r1	; 0x04
	switch(Copy_U8_ADCChannel)
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	28 2f       	mov	r18, r24
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	3f 83       	std	Y+7, r19	; 0x07
    2714:	2e 83       	std	Y+6, r18	; 0x06
    2716:	8e 81       	ldd	r24, Y+6	; 0x06
    2718:	9f 81       	ldd	r25, Y+7	; 0x07
    271a:	83 30       	cpi	r24, 0x03	; 3
    271c:	91 05       	cpc	r25, r1
    271e:	09 f4       	brne	.+2      	; 0x2722 <M_ADC_U16_ADCRead+0x34>
    2720:	9b c0       	rjmp	.+310    	; 0x2858 <M_ADC_U16_ADCRead+0x16a>
    2722:	2e 81       	ldd	r18, Y+6	; 0x06
    2724:	3f 81       	ldd	r19, Y+7	; 0x07
    2726:	24 30       	cpi	r18, 0x04	; 4
    2728:	31 05       	cpc	r19, r1
    272a:	8c f4       	brge	.+34     	; 0x274e <M_ADC_U16_ADCRead+0x60>
    272c:	8e 81       	ldd	r24, Y+6	; 0x06
    272e:	9f 81       	ldd	r25, Y+7	; 0x07
    2730:	81 30       	cpi	r24, 0x01	; 1
    2732:	91 05       	cpc	r25, r1
    2734:	09 f4       	brne	.+2      	; 0x2738 <M_ADC_U16_ADCRead+0x4a>
    2736:	48 c0       	rjmp	.+144    	; 0x27c8 <M_ADC_U16_ADCRead+0xda>
    2738:	2e 81       	ldd	r18, Y+6	; 0x06
    273a:	3f 81       	ldd	r19, Y+7	; 0x07
    273c:	22 30       	cpi	r18, 0x02	; 2
    273e:	31 05       	cpc	r19, r1
    2740:	0c f0       	brlt	.+2      	; 0x2744 <M_ADC_U16_ADCRead+0x56>
    2742:	66 c0       	rjmp	.+204    	; 0x2810 <M_ADC_U16_ADCRead+0x122>
    2744:	8e 81       	ldd	r24, Y+6	; 0x06
    2746:	9f 81       	ldd	r25, Y+7	; 0x07
    2748:	00 97       	sbiw	r24, 0x00	; 0
    274a:	d1 f0       	breq	.+52     	; 0x2780 <M_ADC_U16_ADCRead+0x92>
    274c:	38 c1       	rjmp	.+624    	; 0x29be <M_ADC_U16_ADCRead+0x2d0>
    274e:	2e 81       	ldd	r18, Y+6	; 0x06
    2750:	3f 81       	ldd	r19, Y+7	; 0x07
    2752:	25 30       	cpi	r18, 0x05	; 5
    2754:	31 05       	cpc	r19, r1
    2756:	09 f4       	brne	.+2      	; 0x275a <M_ADC_U16_ADCRead+0x6c>
    2758:	c7 c0       	rjmp	.+398    	; 0x28e8 <M_ADC_U16_ADCRead+0x1fa>
    275a:	8e 81       	ldd	r24, Y+6	; 0x06
    275c:	9f 81       	ldd	r25, Y+7	; 0x07
    275e:	85 30       	cpi	r24, 0x05	; 5
    2760:	91 05       	cpc	r25, r1
    2762:	0c f4       	brge	.+2      	; 0x2766 <M_ADC_U16_ADCRead+0x78>
    2764:	9d c0       	rjmp	.+314    	; 0x28a0 <M_ADC_U16_ADCRead+0x1b2>
    2766:	2e 81       	ldd	r18, Y+6	; 0x06
    2768:	3f 81       	ldd	r19, Y+7	; 0x07
    276a:	26 30       	cpi	r18, 0x06	; 6
    276c:	31 05       	cpc	r19, r1
    276e:	09 f4       	brne	.+2      	; 0x2772 <M_ADC_U16_ADCRead+0x84>
    2770:	df c0       	rjmp	.+446    	; 0x2930 <M_ADC_U16_ADCRead+0x242>
    2772:	8e 81       	ldd	r24, Y+6	; 0x06
    2774:	9f 81       	ldd	r25, Y+7	; 0x07
    2776:	87 30       	cpi	r24, 0x07	; 7
    2778:	91 05       	cpc	r25, r1
    277a:	09 f4       	brne	.+2      	; 0x277e <M_ADC_U16_ADCRead+0x90>
    277c:	fd c0       	rjmp	.+506    	; 0x2978 <M_ADC_U16_ADCRead+0x28a>
    277e:	1f c1       	rjmp	.+574    	; 0x29be <M_ADC_U16_ADCRead+0x2d0>
	{
	case ADC_CHANNEL_0:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    2780:	a7 e2       	ldi	r26, 0x27	; 39
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e7 e2       	ldi	r30, 0x27	; 39
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	8f 7e       	andi	r24, 0xEF	; 239
    278c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    278e:	a7 e2       	ldi	r26, 0x27	; 39
    2790:	b0 e0       	ldi	r27, 0x00	; 0
    2792:	e7 e2       	ldi	r30, 0x27	; 39
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	87 7f       	andi	r24, 0xF7	; 247
    279a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    279c:	a7 e2       	ldi	r26, 0x27	; 39
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	e7 e2       	ldi	r30, 0x27	; 39
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	8b 7f       	andi	r24, 0xFB	; 251
    27a8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    27aa:	a7 e2       	ldi	r26, 0x27	; 39
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	e7 e2       	ldi	r30, 0x27	; 39
    27b0:	f0 e0       	ldi	r31, 0x00	; 0
    27b2:	80 81       	ld	r24, Z
    27b4:	8d 7f       	andi	r24, 0xFD	; 253
    27b6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    27b8:	a7 e2       	ldi	r26, 0x27	; 39
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e7 e2       	ldi	r30, 0x27	; 39
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	8e 7f       	andi	r24, 0xFE	; 254
    27c4:	8c 93       	st	X, r24
    27c6:	fb c0       	rjmp	.+502    	; 0x29be <M_ADC_U16_ADCRead+0x2d0>
		break;
	case ADC_CHANNEL_1:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    27c8:	a7 e2       	ldi	r26, 0x27	; 39
    27ca:	b0 e0       	ldi	r27, 0x00	; 0
    27cc:	e7 e2       	ldi	r30, 0x27	; 39
    27ce:	f0 e0       	ldi	r31, 0x00	; 0
    27d0:	80 81       	ld	r24, Z
    27d2:	8f 7e       	andi	r24, 0xEF	; 239
    27d4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    27d6:	a7 e2       	ldi	r26, 0x27	; 39
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e7 e2       	ldi	r30, 0x27	; 39
    27dc:	f0 e0       	ldi	r31, 0x00	; 0
    27de:	80 81       	ld	r24, Z
    27e0:	87 7f       	andi	r24, 0xF7	; 247
    27e2:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    27e4:	a7 e2       	ldi	r26, 0x27	; 39
    27e6:	b0 e0       	ldi	r27, 0x00	; 0
    27e8:	e7 e2       	ldi	r30, 0x27	; 39
    27ea:	f0 e0       	ldi	r31, 0x00	; 0
    27ec:	80 81       	ld	r24, Z
    27ee:	8b 7f       	andi	r24, 0xFB	; 251
    27f0:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    27f2:	a7 e2       	ldi	r26, 0x27	; 39
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e7 e2       	ldi	r30, 0x27	; 39
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	8d 7f       	andi	r24, 0xFD	; 253
    27fe:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    2800:	a7 e2       	ldi	r26, 0x27	; 39
    2802:	b0 e0       	ldi	r27, 0x00	; 0
    2804:	e7 e2       	ldi	r30, 0x27	; 39
    2806:	f0 e0       	ldi	r31, 0x00	; 0
    2808:	80 81       	ld	r24, Z
    280a:	81 60       	ori	r24, 0x01	; 1
    280c:	8c 93       	st	X, r24
    280e:	d7 c0       	rjmp	.+430    	; 0x29be <M_ADC_U16_ADCRead+0x2d0>
		break;
	case ADC_CHANNEL_2:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    2810:	a7 e2       	ldi	r26, 0x27	; 39
    2812:	b0 e0       	ldi	r27, 0x00	; 0
    2814:	e7 e2       	ldi	r30, 0x27	; 39
    2816:	f0 e0       	ldi	r31, 0x00	; 0
    2818:	80 81       	ld	r24, Z
    281a:	8f 7e       	andi	r24, 0xEF	; 239
    281c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    281e:	a7 e2       	ldi	r26, 0x27	; 39
    2820:	b0 e0       	ldi	r27, 0x00	; 0
    2822:	e7 e2       	ldi	r30, 0x27	; 39
    2824:	f0 e0       	ldi	r31, 0x00	; 0
    2826:	80 81       	ld	r24, Z
    2828:	87 7f       	andi	r24, 0xF7	; 247
    282a:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    282c:	a7 e2       	ldi	r26, 0x27	; 39
    282e:	b0 e0       	ldi	r27, 0x00	; 0
    2830:	e7 e2       	ldi	r30, 0x27	; 39
    2832:	f0 e0       	ldi	r31, 0x00	; 0
    2834:	80 81       	ld	r24, Z
    2836:	8b 7f       	andi	r24, 0xFB	; 251
    2838:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    283a:	a7 e2       	ldi	r26, 0x27	; 39
    283c:	b0 e0       	ldi	r27, 0x00	; 0
    283e:	e7 e2       	ldi	r30, 0x27	; 39
    2840:	f0 e0       	ldi	r31, 0x00	; 0
    2842:	80 81       	ld	r24, Z
    2844:	82 60       	ori	r24, 0x02	; 2
    2846:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    2848:	a7 e2       	ldi	r26, 0x27	; 39
    284a:	b0 e0       	ldi	r27, 0x00	; 0
    284c:	e7 e2       	ldi	r30, 0x27	; 39
    284e:	f0 e0       	ldi	r31, 0x00	; 0
    2850:	80 81       	ld	r24, Z
    2852:	8e 7f       	andi	r24, 0xFE	; 254
    2854:	8c 93       	st	X, r24
    2856:	b3 c0       	rjmp	.+358    	; 0x29be <M_ADC_U16_ADCRead+0x2d0>
		break;
	case ADC_CHANNEL_3:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    2858:	a7 e2       	ldi	r26, 0x27	; 39
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e7 e2       	ldi	r30, 0x27	; 39
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	8f 7e       	andi	r24, 0xEF	; 239
    2864:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    2866:	a7 e2       	ldi	r26, 0x27	; 39
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e7 e2       	ldi	r30, 0x27	; 39
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	87 7f       	andi	r24, 0xF7	; 247
    2872:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX2_BIT);
    2874:	a7 e2       	ldi	r26, 0x27	; 39
    2876:	b0 e0       	ldi	r27, 0x00	; 0
    2878:	e7 e2       	ldi	r30, 0x27	; 39
    287a:	f0 e0       	ldi	r31, 0x00	; 0
    287c:	80 81       	ld	r24, Z
    287e:	8b 7f       	andi	r24, 0xFB	; 251
    2880:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    2882:	a7 e2       	ldi	r26, 0x27	; 39
    2884:	b0 e0       	ldi	r27, 0x00	; 0
    2886:	e7 e2       	ldi	r30, 0x27	; 39
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	82 60       	ori	r24, 0x02	; 2
    288e:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    2890:	a7 e2       	ldi	r26, 0x27	; 39
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e7 e2       	ldi	r30, 0x27	; 39
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	81 60       	ori	r24, 0x01	; 1
    289c:	8c 93       	st	X, r24
    289e:	8f c0       	rjmp	.+286    	; 0x29be <M_ADC_U16_ADCRead+0x2d0>
		break;
	case ADC_CHANNEL_4:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    28a0:	a7 e2       	ldi	r26, 0x27	; 39
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e7 e2       	ldi	r30, 0x27	; 39
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	8f 7e       	andi	r24, 0xEF	; 239
    28ac:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    28ae:	a7 e2       	ldi	r26, 0x27	; 39
    28b0:	b0 e0       	ldi	r27, 0x00	; 0
    28b2:	e7 e2       	ldi	r30, 0x27	; 39
    28b4:	f0 e0       	ldi	r31, 0x00	; 0
    28b6:	80 81       	ld	r24, Z
    28b8:	87 7f       	andi	r24, 0xF7	; 247
    28ba:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX2_BIT);
    28bc:	a7 e2       	ldi	r26, 0x27	; 39
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e7 e2       	ldi	r30, 0x27	; 39
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	84 60       	ori	r24, 0x04	; 4
    28c8:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    28ca:	a7 e2       	ldi	r26, 0x27	; 39
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e7 e2       	ldi	r30, 0x27	; 39
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	8d 7f       	andi	r24, 0xFD	; 253
    28d6:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    28d8:	a7 e2       	ldi	r26, 0x27	; 39
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	e7 e2       	ldi	r30, 0x27	; 39
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	8e 7f       	andi	r24, 0xFE	; 254
    28e4:	8c 93       	st	X, r24
    28e6:	6b c0       	rjmp	.+214    	; 0x29be <M_ADC_U16_ADCRead+0x2d0>
		break;
	case ADC_CHANNEL_5:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    28e8:	a7 e2       	ldi	r26, 0x27	; 39
    28ea:	b0 e0       	ldi	r27, 0x00	; 0
    28ec:	e7 e2       	ldi	r30, 0x27	; 39
    28ee:	f0 e0       	ldi	r31, 0x00	; 0
    28f0:	80 81       	ld	r24, Z
    28f2:	8f 7e       	andi	r24, 0xEF	; 239
    28f4:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    28f6:	a7 e2       	ldi	r26, 0x27	; 39
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	e7 e2       	ldi	r30, 0x27	; 39
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	87 7f       	andi	r24, 0xF7	; 247
    2902:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX2_BIT);
    2904:	a7 e2       	ldi	r26, 0x27	; 39
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	e7 e2       	ldi	r30, 0x27	; 39
    290a:	f0 e0       	ldi	r31, 0x00	; 0
    290c:	80 81       	ld	r24, Z
    290e:	84 60       	ori	r24, 0x04	; 4
    2910:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX1_BIT);
    2912:	a7 e2       	ldi	r26, 0x27	; 39
    2914:	b0 e0       	ldi	r27, 0x00	; 0
    2916:	e7 e2       	ldi	r30, 0x27	; 39
    2918:	f0 e0       	ldi	r31, 0x00	; 0
    291a:	80 81       	ld	r24, Z
    291c:	8d 7f       	andi	r24, 0xFD	; 253
    291e:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    2920:	a7 e2       	ldi	r26, 0x27	; 39
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e7 e2       	ldi	r30, 0x27	; 39
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	81 60       	ori	r24, 0x01	; 1
    292c:	8c 93       	st	X, r24
    292e:	47 c0       	rjmp	.+142    	; 0x29be <M_ADC_U16_ADCRead+0x2d0>
		break;
	case ADC_CHANNEL_6:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    2930:	a7 e2       	ldi	r26, 0x27	; 39
    2932:	b0 e0       	ldi	r27, 0x00	; 0
    2934:	e7 e2       	ldi	r30, 0x27	; 39
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	8f 7e       	andi	r24, 0xEF	; 239
    293c:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    293e:	a7 e2       	ldi	r26, 0x27	; 39
    2940:	b0 e0       	ldi	r27, 0x00	; 0
    2942:	e7 e2       	ldi	r30, 0x27	; 39
    2944:	f0 e0       	ldi	r31, 0x00	; 0
    2946:	80 81       	ld	r24, Z
    2948:	87 7f       	andi	r24, 0xF7	; 247
    294a:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX2_BIT);
    294c:	a7 e2       	ldi	r26, 0x27	; 39
    294e:	b0 e0       	ldi	r27, 0x00	; 0
    2950:	e7 e2       	ldi	r30, 0x27	; 39
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	80 81       	ld	r24, Z
    2956:	84 60       	ori	r24, 0x04	; 4
    2958:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    295a:	a7 e2       	ldi	r26, 0x27	; 39
    295c:	b0 e0       	ldi	r27, 0x00	; 0
    295e:	e7 e2       	ldi	r30, 0x27	; 39
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	80 81       	ld	r24, Z
    2964:	82 60       	ori	r24, 0x02	; 2
    2966:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX0_BIT);
    2968:	a7 e2       	ldi	r26, 0x27	; 39
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e7 e2       	ldi	r30, 0x27	; 39
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	8e 7f       	andi	r24, 0xFE	; 254
    2974:	8c 93       	st	X, r24
    2976:	23 c0       	rjmp	.+70     	; 0x29be <M_ADC_U16_ADCRead+0x2d0>
		break;
	case ADC_CHANNEL_7:
		CLR_BIT(ADMUX_REG,MUX4_BIT);
    2978:	a7 e2       	ldi	r26, 0x27	; 39
    297a:	b0 e0       	ldi	r27, 0x00	; 0
    297c:	e7 e2       	ldi	r30, 0x27	; 39
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	8f 7e       	andi	r24, 0xEF	; 239
    2984:	8c 93       	st	X, r24
		CLR_BIT(ADMUX_REG,MUX3_BIT);
    2986:	a7 e2       	ldi	r26, 0x27	; 39
    2988:	b0 e0       	ldi	r27, 0x00	; 0
    298a:	e7 e2       	ldi	r30, 0x27	; 39
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	80 81       	ld	r24, Z
    2990:	87 7f       	andi	r24, 0xF7	; 247
    2992:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX2_BIT);
    2994:	a7 e2       	ldi	r26, 0x27	; 39
    2996:	b0 e0       	ldi	r27, 0x00	; 0
    2998:	e7 e2       	ldi	r30, 0x27	; 39
    299a:	f0 e0       	ldi	r31, 0x00	; 0
    299c:	80 81       	ld	r24, Z
    299e:	84 60       	ori	r24, 0x04	; 4
    29a0:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX1_BIT);
    29a2:	a7 e2       	ldi	r26, 0x27	; 39
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e7 e2       	ldi	r30, 0x27	; 39
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	80 81       	ld	r24, Z
    29ac:	82 60       	ori	r24, 0x02	; 2
    29ae:	8c 93       	st	X, r24
		SET_BIT(ADMUX_REG,MUX0_BIT);
    29b0:	a7 e2       	ldi	r26, 0x27	; 39
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e7 e2       	ldi	r30, 0x27	; 39
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	81 60       	ori	r24, 0x01	; 1
    29bc:	8c 93       	st	X, r24
		break;
	default:      break;
	}

	//TO START CONVERSION
	SET_BIT(ADCSRA_REG,ADSC_BIT);
    29be:	a6 e2       	ldi	r26, 0x26	; 38
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	e6 e2       	ldi	r30, 0x26	; 38
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	80 64       	ori	r24, 0x40	; 64
    29ca:	8c 93       	st	X, r24
    29cc:	16 c0       	rjmp	.+44     	; 0x29fa <M_ADC_U16_ADCRead+0x30c>
	while(Local_U32_Counter < POLLING_TIME)
		{
			Local_U32_Counter++;
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	ab 81       	ldd	r26, Y+3	; 0x03
    29d4:	bc 81       	ldd	r27, Y+4	; 0x04
    29d6:	01 96       	adiw	r24, 0x01	; 1
    29d8:	a1 1d       	adc	r26, r1
    29da:	b1 1d       	adc	r27, r1
    29dc:	89 83       	std	Y+1, r24	; 0x01
    29de:	9a 83       	std	Y+2, r25	; 0x02
    29e0:	ab 83       	std	Y+3, r26	; 0x03
    29e2:	bc 83       	std	Y+4, r27	; 0x04
			if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
    29e4:	e6 e2       	ldi	r30, 0x26	; 38
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	80 81       	ld	r24, Z
    29ea:	82 95       	swap	r24
    29ec:	8f 70       	andi	r24, 0x0F	; 15
    29ee:	88 2f       	mov	r24, r24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	81 70       	andi	r24, 0x01	; 1
    29f4:	90 70       	andi	r25, 0x00	; 0
    29f6:	88 23       	and	r24, r24
    29f8:	61 f4       	brne	.+24     	; 0x2a12 <M_ADC_U16_ADCRead+0x324>
	default:      break;
	}

	//TO START CONVERSION
	SET_BIT(ADCSRA_REG,ADSC_BIT);
	while(Local_U32_Counter < POLLING_TIME)
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	ab 81       	ldd	r26, Y+3	; 0x03
    2a00:	bc 81       	ldd	r27, Y+4	; 0x04
    2a02:	80 30       	cpi	r24, 0x00	; 0
    2a04:	2d e2       	ldi	r18, 0x2D	; 45
    2a06:	92 07       	cpc	r25, r18
    2a08:	21 e3       	ldi	r18, 0x31	; 49
    2a0a:	a2 07       	cpc	r26, r18
    2a0c:	21 e0       	ldi	r18, 0x01	; 1
    2a0e:	b2 07       	cpc	r27, r18
    2a10:	f0 f2       	brcs	.-68     	; 0x29ce <M_ADC_U16_ADCRead+0x2e0>
			if(GET_BIT(ADCSRA_REG,ADIF_BIT) == ADC_CONVERSION_COMPLETE)
			{
				break;
			}
		}
		return ADCL_REG;
    2a12:	e4 e2       	ldi	r30, 0x24	; 36
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	80 81       	ld	r24, Z
    2a18:	91 81       	ldd	r25, Z+1	; 0x01
}
    2a1a:	27 96       	adiw	r28, 0x07	; 7
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <H_Servo_Void_ServoInit>:
 */

#include "Servo_Interface.h"

void H_Servo_Void_ServoInit(void)
{
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
	M_TIMER_Void_PWMInit(TIMER1_CHANNEL);
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <M_TIMER_Void_PWMInit>
	M_TIMER_U8_PWMSetFrequency(50);
    2a3a:	82 e3       	ldi	r24, 0x32	; 50
    2a3c:	0e 94 11 0b 	call	0x1622	; 0x1622 <M_TIMER_U8_PWMSetFrequency>
}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <H_Servo_Void_ServoSetAngle>:
void H_Servo_Void_ServoSetAngle(u8 Copy_U8_Angle)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <H_Servo_Void_ServoSetAngle+0x6>
    2a4c:	00 d0       	rcall	.+0      	; 0x2a4e <H_Servo_Void_ServoSetAngle+0x8>
    2a4e:	0f 92       	push	r0
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	8d 83       	std	Y+5, r24	; 0x05
	f32 Local_F32_Value = ((Copy_U8_Angle * 5.0 ) / 180.0) + 5.0;
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	88 2f       	mov	r24, r24
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	aa 27       	eor	r26, r26
    2a5e:	97 fd       	sbrc	r25, 7
    2a60:	a0 95       	com	r26
    2a62:	ba 2f       	mov	r27, r26
    2a64:	bc 01       	movw	r22, r24
    2a66:	cd 01       	movw	r24, r26
    2a68:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    2a6c:	dc 01       	movw	r26, r24
    2a6e:	cb 01       	movw	r24, r22
    2a70:	bc 01       	movw	r22, r24
    2a72:	cd 01       	movw	r24, r26
    2a74:	20 e0       	ldi	r18, 0x00	; 0
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	40 ea       	ldi	r20, 0xA0	; 160
    2a7a:	50 e4       	ldi	r21, 0x40	; 64
    2a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a80:	dc 01       	movw	r26, r24
    2a82:	cb 01       	movw	r24, r22
    2a84:	bc 01       	movw	r22, r24
    2a86:	cd 01       	movw	r24, r26
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	30 e0       	ldi	r19, 0x00	; 0
    2a8c:	44 e3       	ldi	r20, 0x34	; 52
    2a8e:	53 e4       	ldi	r21, 0x43	; 67
    2a90:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2a94:	dc 01       	movw	r26, r24
    2a96:	cb 01       	movw	r24, r22
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	40 ea       	ldi	r20, 0xA0	; 160
    2aa2:	50 e4       	ldi	r21, 0x40	; 64
    2aa4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	89 83       	std	Y+1, r24	; 0x01
    2aae:	9a 83       	std	Y+2, r25	; 0x02
    2ab0:	ab 83       	std	Y+3, r26	; 0x03
    2ab2:	bc 83       	std	Y+4, r27	; 0x04
	M_TIMER_F32_PWMSetDutyCycle(TIMER1_CHANNEL,Local_F32_Value);
    2ab4:	29 81       	ldd	r18, Y+1	; 0x01
    2ab6:	3a 81       	ldd	r19, Y+2	; 0x02
    2ab8:	4b 81       	ldd	r20, Y+3	; 0x03
    2aba:	5c 81       	ldd	r21, Y+4	; 0x04
    2abc:	81 e0       	ldi	r24, 0x01	; 1
    2abe:	ba 01       	movw	r22, r20
    2ac0:	a9 01       	movw	r20, r18
    2ac2:	0e 94 bd 0a 	call	0x157a	; 0x157a <M_TIMER_F32_PWMSetDutyCycle>
}
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	0f 90       	pop	r0
    2ace:	0f 90       	pop	r0
    2ad0:	cf 91       	pop	r28
    2ad2:	df 91       	pop	r29
    2ad4:	08 95       	ret

00002ad6 <H_Servo_Void_ServoSetStart>:
void H_Servo_Void_ServoSetStart(void)
{
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
	M_TIMER_U32_PWMStart(TIMER1_CHANNEL);
    2ade:	81 e0       	ldi	r24, 0x01	; 1
    2ae0:	0e 94 33 0b 	call	0x1666	; 0x1666 <M_TIMER_U32_PWMStart>
}
    2ae4:	cf 91       	pop	r28
    2ae6:	df 91       	pop	r29
    2ae8:	08 95       	ret

00002aea <H_Servo_Void_ServoSetStop>:
void H_Servo_Void_ServoSetStop(void)
{
    2aea:	df 93       	push	r29
    2aec:	cf 93       	push	r28
    2aee:	cd b7       	in	r28, 0x3d	; 61
    2af0:	de b7       	in	r29, 0x3e	; 62
	M_TIMER_U32_PWMStop(TIMER1_CHANNEL);
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	0e 94 40 0b 	call	0x1680	; 0x1680 <M_TIMER_U32_PWMStop>
}
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <H_SSD_Void_SSDInit>:
 */
#include "SSD_Interface.h"
#include "SSD_Private.h"

void H_SSD_Void_SSDInit(void)
{
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(SSD_A_PIN,OUTPUT);
    2b06:	8e e0       	ldi	r24, 0x0E	; 14
    2b08:	61 e0       	ldi	r22, 0x01	; 1
    2b0a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_B_PIN,OUTPUT);
    2b0e:	8f e0       	ldi	r24, 0x0F	; 15
    2b10:	61 e0       	ldi	r22, 0x01	; 1
    2b12:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_C_PIN,OUTPUT);
    2b16:	80 e1       	ldi	r24, 0x10	; 16
    2b18:	61 e0       	ldi	r22, 0x01	; 1
    2b1a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_D_PIN,OUTPUT);
    2b1e:	81 e1       	ldi	r24, 0x11	; 17
    2b20:	61 e0       	ldi	r22, 0x01	; 1
    2b22:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(SSD_EN1_PIN,OUTPUT);
    2b26:	85 e1       	ldi	r24, 0x15	; 21
    2b28:	61 e0       	ldi	r22, 0x01	; 1
    2b2a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(SSD_EN2_PIN,OUTPUT);
    2b2e:	86 e1       	ldi	r24, 0x16	; 22
    2b30:	61 e0       	ldi	r22, 0x01	; 1
    2b32:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
}
    2b36:	cf 91       	pop	r28
    2b38:	df 91       	pop	r29
    2b3a:	08 95       	ret

00002b3c <H_SSD_Void_SSDWriteNumber>:
void H_SSD_Void_SSDWriteNumber(u8 Copy_U8_Num)
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	6f 97       	sbiw	r28, 0x1f	; 31
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 Local_U8_Ones = Copy_U8_Num % 10;
    2b52:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b54:	9a e0       	ldi	r25, 0x0A	; 10
    2b56:	69 2f       	mov	r22, r25
    2b58:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    2b5c:	89 2f       	mov	r24, r25
    2b5e:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 Local_U8_Tens = Copy_U8_Num /10;
    2b60:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b62:	9a e0       	ldi	r25, 0x0A	; 10
    2b64:	69 2f       	mov	r22, r25
    2b66:	0e 94 b5 31 	call	0x636a	; 0x636a <__udivmodqi4>
    2b6a:	8d 8f       	std	Y+29, r24	; 0x1d
	H_SSD_Void_SSDDigitDisplay(Local_U8_Tens);
    2b6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b6e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <H_SSD_Void_SSDDigitDisplay>
	M_DIO_Void_SetPinValue(SSD_EN2_PIN,HIGH);
    2b72:	86 e1       	ldi	r24, 0x16	; 22
    2b74:	61 e0       	ldi	r22, 0x01	; 1
    2b76:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	a0 e8       	ldi	r26, 0x80	; 128
    2b80:	bf e3       	ldi	r27, 0x3F	; 63
    2b82:	89 8f       	std	Y+25, r24	; 0x19
    2b84:	9a 8f       	std	Y+26, r25	; 0x1a
    2b86:	ab 8f       	std	Y+27, r26	; 0x1b
    2b88:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2b8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b92:	20 e0       	ldi	r18, 0x00	; 0
    2b94:	30 e0       	ldi	r19, 0x00	; 0
    2b96:	4a e7       	ldi	r20, 0x7A	; 122
    2b98:	55 e4       	ldi	r21, 0x45	; 69
    2b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b9e:	dc 01       	movw	r26, r24
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	8d 8b       	std	Y+21, r24	; 0x15
    2ba4:	9e 8b       	std	Y+22, r25	; 0x16
    2ba6:	af 8b       	std	Y+23, r26	; 0x17
    2ba8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2baa:	6d 89       	ldd	r22, Y+21	; 0x15
    2bac:	7e 89       	ldd	r23, Y+22	; 0x16
    2bae:	8f 89       	ldd	r24, Y+23	; 0x17
    2bb0:	98 8d       	ldd	r25, Y+24	; 0x18
    2bb2:	20 e0       	ldi	r18, 0x00	; 0
    2bb4:	30 e0       	ldi	r19, 0x00	; 0
    2bb6:	40 e8       	ldi	r20, 0x80	; 128
    2bb8:	5f e3       	ldi	r21, 0x3F	; 63
    2bba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bbe:	88 23       	and	r24, r24
    2bc0:	2c f4       	brge	.+10     	; 0x2bcc <H_SSD_Void_SSDWriteNumber+0x90>
		__ticks = 1;
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	9c 8b       	std	Y+20, r25	; 0x14
    2bc8:	8b 8b       	std	Y+19, r24	; 0x13
    2bca:	3f c0       	rjmp	.+126    	; 0x2c4a <H_SSD_Void_SSDWriteNumber+0x10e>
	else if (__tmp > 65535)
    2bcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bce:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	3f ef       	ldi	r19, 0xFF	; 255
    2bd8:	4f e7       	ldi	r20, 0x7F	; 127
    2bda:	57 e4       	ldi	r21, 0x47	; 71
    2bdc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2be0:	18 16       	cp	r1, r24
    2be2:	4c f5       	brge	.+82     	; 0x2c36 <H_SSD_Void_SSDWriteNumber+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be4:	69 8d       	ldd	r22, Y+25	; 0x19
    2be6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2be8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bec:	20 e0       	ldi	r18, 0x00	; 0
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	40 e2       	ldi	r20, 0x20	; 32
    2bf2:	51 e4       	ldi	r21, 0x41	; 65
    2bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bf8:	dc 01       	movw	r26, r24
    2bfa:	cb 01       	movw	r24, r22
    2bfc:	bc 01       	movw	r22, r24
    2bfe:	cd 01       	movw	r24, r26
    2c00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c04:	dc 01       	movw	r26, r24
    2c06:	cb 01       	movw	r24, r22
    2c08:	9c 8b       	std	Y+20, r25	; 0x14
    2c0a:	8b 8b       	std	Y+19, r24	; 0x13
    2c0c:	0f c0       	rjmp	.+30     	; 0x2c2c <H_SSD_Void_SSDWriteNumber+0xf0>
    2c0e:	80 e9       	ldi	r24, 0x90	; 144
    2c10:	91 e0       	ldi	r25, 0x01	; 1
    2c12:	9a 8b       	std	Y+18, r25	; 0x12
    2c14:	89 8b       	std	Y+17, r24	; 0x11
    2c16:	89 89       	ldd	r24, Y+17	; 0x11
    2c18:	9a 89       	ldd	r25, Y+18	; 0x12
    2c1a:	01 97       	sbiw	r24, 0x01	; 1
    2c1c:	f1 f7       	brne	.-4      	; 0x2c1a <H_SSD_Void_SSDWriteNumber+0xde>
    2c1e:	9a 8b       	std	Y+18, r25	; 0x12
    2c20:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c22:	8b 89       	ldd	r24, Y+19	; 0x13
    2c24:	9c 89       	ldd	r25, Y+20	; 0x14
    2c26:	01 97       	sbiw	r24, 0x01	; 1
    2c28:	9c 8b       	std	Y+20, r25	; 0x14
    2c2a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	69 f7       	brne	.-38     	; 0x2c0e <H_SSD_Void_SSDWriteNumber+0xd2>
    2c34:	14 c0       	rjmp	.+40     	; 0x2c5e <H_SSD_Void_SSDWriteNumber+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c36:	6d 89       	ldd	r22, Y+21	; 0x15
    2c38:	7e 89       	ldd	r23, Y+22	; 0x16
    2c3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c42:	dc 01       	movw	r26, r24
    2c44:	cb 01       	movw	r24, r22
    2c46:	9c 8b       	std	Y+20, r25	; 0x14
    2c48:	8b 8b       	std	Y+19, r24	; 0x13
    2c4a:	8b 89       	ldd	r24, Y+19	; 0x13
    2c4c:	9c 89       	ldd	r25, Y+20	; 0x14
    2c4e:	98 8b       	std	Y+16, r25	; 0x10
    2c50:	8f 87       	std	Y+15, r24	; 0x0f
    2c52:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c54:	98 89       	ldd	r25, Y+16	; 0x10
    2c56:	01 97       	sbiw	r24, 0x01	; 1
    2c58:	f1 f7       	brne	.-4      	; 0x2c56 <H_SSD_Void_SSDWriteNumber+0x11a>
    2c5a:	98 8b       	std	Y+16, r25	; 0x10
    2c5c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN2_PIN,LOW);
    2c5e:	86 e1       	ldi	r24, 0x16	; 22
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	H_SSD_Void_SSDDigitDisplay(Local_U8_Ones);
    2c66:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2c68:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <H_SSD_Void_SSDDigitDisplay>
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,HIGH);
    2c6c:	85 e1       	ldi	r24, 0x15	; 21
    2c6e:	61 e0       	ldi	r22, 0x01	; 1
    2c70:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	a0 e8       	ldi	r26, 0x80	; 128
    2c7a:	bf e3       	ldi	r27, 0x3F	; 63
    2c7c:	8b 87       	std	Y+11, r24	; 0x0b
    2c7e:	9c 87       	std	Y+12, r25	; 0x0c
    2c80:	ad 87       	std	Y+13, r26	; 0x0d
    2c82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	4a e7       	ldi	r20, 0x7A	; 122
    2c92:	55 e4       	ldi	r21, 0x45	; 69
    2c94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c98:	dc 01       	movw	r26, r24
    2c9a:	cb 01       	movw	r24, r22
    2c9c:	8f 83       	std	Y+7, r24	; 0x07
    2c9e:	98 87       	std	Y+8, r25	; 0x08
    2ca0:	a9 87       	std	Y+9, r26	; 0x09
    2ca2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ca4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca6:	78 85       	ldd	r23, Y+8	; 0x08
    2ca8:	89 85       	ldd	r24, Y+9	; 0x09
    2caa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	30 e0       	ldi	r19, 0x00	; 0
    2cb0:	40 e8       	ldi	r20, 0x80	; 128
    2cb2:	5f e3       	ldi	r21, 0x3F	; 63
    2cb4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2cb8:	88 23       	and	r24, r24
    2cba:	2c f4       	brge	.+10     	; 0x2cc6 <H_SSD_Void_SSDWriteNumber+0x18a>
		__ticks = 1;
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	90 e0       	ldi	r25, 0x00	; 0
    2cc0:	9e 83       	std	Y+6, r25	; 0x06
    2cc2:	8d 83       	std	Y+5, r24	; 0x05
    2cc4:	3f c0       	rjmp	.+126    	; 0x2d44 <H_SSD_Void_SSDWriteNumber+0x208>
	else if (__tmp > 65535)
    2cc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc8:	78 85       	ldd	r23, Y+8	; 0x08
    2cca:	89 85       	ldd	r24, Y+9	; 0x09
    2ccc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cce:	20 e0       	ldi	r18, 0x00	; 0
    2cd0:	3f ef       	ldi	r19, 0xFF	; 255
    2cd2:	4f e7       	ldi	r20, 0x7F	; 127
    2cd4:	57 e4       	ldi	r21, 0x47	; 71
    2cd6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2cda:	18 16       	cp	r1, r24
    2cdc:	4c f5       	brge	.+82     	; 0x2d30 <H_SSD_Void_SSDWriteNumber+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cde:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ce0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ce2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce6:	20 e0       	ldi	r18, 0x00	; 0
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	40 e2       	ldi	r20, 0x20	; 32
    2cec:	51 e4       	ldi	r21, 0x41	; 65
    2cee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf2:	dc 01       	movw	r26, r24
    2cf4:	cb 01       	movw	r24, r22
    2cf6:	bc 01       	movw	r22, r24
    2cf8:	cd 01       	movw	r24, r26
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
    2d06:	0f c0       	rjmp	.+30     	; 0x2d26 <H_SSD_Void_SSDWriteNumber+0x1ea>
    2d08:	80 e9       	ldi	r24, 0x90	; 144
    2d0a:	91 e0       	ldi	r25, 0x01	; 1
    2d0c:	9c 83       	std	Y+4, r25	; 0x04
    2d0e:	8b 83       	std	Y+3, r24	; 0x03
    2d10:	8b 81       	ldd	r24, Y+3	; 0x03
    2d12:	9c 81       	ldd	r25, Y+4	; 0x04
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <H_SSD_Void_SSDWriteNumber+0x1d8>
    2d18:	9c 83       	std	Y+4, r25	; 0x04
    2d1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2d20:	01 97       	sbiw	r24, 0x01	; 1
    2d22:	9e 83       	std	Y+6, r25	; 0x06
    2d24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d26:	8d 81       	ldd	r24, Y+5	; 0x05
    2d28:	9e 81       	ldd	r25, Y+6	; 0x06
    2d2a:	00 97       	sbiw	r24, 0x00	; 0
    2d2c:	69 f7       	brne	.-38     	; 0x2d08 <H_SSD_Void_SSDWriteNumber+0x1cc>
    2d2e:	14 c0       	rjmp	.+40     	; 0x2d58 <H_SSD_Void_SSDWriteNumber+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d30:	6f 81       	ldd	r22, Y+7	; 0x07
    2d32:	78 85       	ldd	r23, Y+8	; 0x08
    2d34:	89 85       	ldd	r24, Y+9	; 0x09
    2d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3c:	dc 01       	movw	r26, r24
    2d3e:	cb 01       	movw	r24, r22
    2d40:	9e 83       	std	Y+6, r25	; 0x06
    2d42:	8d 83       	std	Y+5, r24	; 0x05
    2d44:	8d 81       	ldd	r24, Y+5	; 0x05
    2d46:	9e 81       	ldd	r25, Y+6	; 0x06
    2d48:	9a 83       	std	Y+2, r25	; 0x02
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d50:	01 97       	sbiw	r24, 0x01	; 1
    2d52:	f1 f7       	brne	.-4      	; 0x2d50 <H_SSD_Void_SSDWriteNumber+0x214>
    2d54:	9a 83       	std	Y+2, r25	; 0x02
    2d56:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	M_DIO_Void_SetPinValue(SSD_EN1_PIN,LOW);
    2d58:	85 e1       	ldi	r24, 0x15	; 21
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
}
    2d60:	6f 96       	adiw	r28, 0x1f	; 31
    2d62:	0f b6       	in	r0, 0x3f	; 63
    2d64:	f8 94       	cli
    2d66:	de bf       	out	0x3e, r29	; 62
    2d68:	0f be       	out	0x3f, r0	; 63
    2d6a:	cd bf       	out	0x3d, r28	; 61
    2d6c:	cf 91       	pop	r28
    2d6e:	df 91       	pop	r29
    2d70:	08 95       	ret

00002d72 <H_SSD_Void_SSDDigitDisplay>:
static void H_SSD_Void_SSDDigitDisplay(u8 Copy_U8_Number)
{
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <H_SSD_Void_SSDDigitDisplay+0x6>
    2d78:	0f 92       	push	r0
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Number)
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	28 2f       	mov	r18, r24
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	3b 83       	std	Y+3, r19	; 0x03
    2d88:	2a 83       	std	Y+2, r18	; 0x02
    2d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8e:	84 30       	cpi	r24, 0x04	; 4
    2d90:	91 05       	cpc	r25, r1
    2d92:	09 f4       	brne	.+2      	; 0x2d96 <H_SSD_Void_SSDDigitDisplay+0x24>
    2d94:	8b c0       	rjmp	.+278    	; 0x2eac <H_SSD_Void_SSDDigitDisplay+0x13a>
    2d96:	2a 81       	ldd	r18, Y+2	; 0x02
    2d98:	3b 81       	ldd	r19, Y+3	; 0x03
    2d9a:	25 30       	cpi	r18, 0x05	; 5
    2d9c:	31 05       	cpc	r19, r1
    2d9e:	ec f4       	brge	.+58     	; 0x2dda <H_SSD_Void_SSDDigitDisplay+0x68>
    2da0:	8a 81       	ldd	r24, Y+2	; 0x02
    2da2:	9b 81       	ldd	r25, Y+3	; 0x03
    2da4:	81 30       	cpi	r24, 0x01	; 1
    2da6:	91 05       	cpc	r25, r1
    2da8:	09 f4       	brne	.+2      	; 0x2dac <H_SSD_Void_SSDDigitDisplay+0x3a>
    2daa:	4d c0       	rjmp	.+154    	; 0x2e46 <H_SSD_Void_SSDDigitDisplay+0xd4>
    2dac:	2a 81       	ldd	r18, Y+2	; 0x02
    2dae:	3b 81       	ldd	r19, Y+3	; 0x03
    2db0:	22 30       	cpi	r18, 0x02	; 2
    2db2:	31 05       	cpc	r19, r1
    2db4:	2c f4       	brge	.+10     	; 0x2dc0 <H_SSD_Void_SSDDigitDisplay+0x4e>
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dba:	00 97       	sbiw	r24, 0x00	; 0
    2dbc:	99 f1       	breq	.+102    	; 0x2e24 <H_SSD_Void_SSDDigitDisplay+0xb2>
    2dbe:	db c0       	rjmp	.+438    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
    2dc0:	2a 81       	ldd	r18, Y+2	; 0x02
    2dc2:	3b 81       	ldd	r19, Y+3	; 0x03
    2dc4:	22 30       	cpi	r18, 0x02	; 2
    2dc6:	31 05       	cpc	r19, r1
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <H_SSD_Void_SSDDigitDisplay+0x5a>
    2dca:	4e c0       	rjmp	.+156    	; 0x2e68 <H_SSD_Void_SSDDigitDisplay+0xf6>
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	9b 81       	ldd	r25, Y+3	; 0x03
    2dd0:	83 30       	cpi	r24, 0x03	; 3
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <H_SSD_Void_SSDDigitDisplay+0x66>
    2dd6:	59 c0       	rjmp	.+178    	; 0x2e8a <H_SSD_Void_SSDDigitDisplay+0x118>
    2dd8:	ce c0       	rjmp	.+412    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
    2dda:	2a 81       	ldd	r18, Y+2	; 0x02
    2ddc:	3b 81       	ldd	r19, Y+3	; 0x03
    2dde:	27 30       	cpi	r18, 0x07	; 7
    2de0:	31 05       	cpc	r19, r1
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <H_SSD_Void_SSDDigitDisplay+0x74>
    2de4:	96 c0       	rjmp	.+300    	; 0x2f12 <H_SSD_Void_SSDDigitDisplay+0x1a0>
    2de6:	8a 81       	ldd	r24, Y+2	; 0x02
    2de8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dea:	88 30       	cpi	r24, 0x08	; 8
    2dec:	91 05       	cpc	r25, r1
    2dee:	6c f4       	brge	.+26     	; 0x2e0a <H_SSD_Void_SSDDigitDisplay+0x98>
    2df0:	2a 81       	ldd	r18, Y+2	; 0x02
    2df2:	3b 81       	ldd	r19, Y+3	; 0x03
    2df4:	25 30       	cpi	r18, 0x05	; 5
    2df6:	31 05       	cpc	r19, r1
    2df8:	09 f4       	brne	.+2      	; 0x2dfc <H_SSD_Void_SSDDigitDisplay+0x8a>
    2dfa:	69 c0       	rjmp	.+210    	; 0x2ece <H_SSD_Void_SSDDigitDisplay+0x15c>
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2e00:	86 30       	cpi	r24, 0x06	; 6
    2e02:	91 05       	cpc	r25, r1
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <H_SSD_Void_SSDDigitDisplay+0x96>
    2e06:	74 c0       	rjmp	.+232    	; 0x2ef0 <H_SSD_Void_SSDDigitDisplay+0x17e>
    2e08:	b6 c0       	rjmp	.+364    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
    2e0a:	2a 81       	ldd	r18, Y+2	; 0x02
    2e0c:	3b 81       	ldd	r19, Y+3	; 0x03
    2e0e:	28 30       	cpi	r18, 0x08	; 8
    2e10:	31 05       	cpc	r19, r1
    2e12:	09 f4       	brne	.+2      	; 0x2e16 <H_SSD_Void_SSDDigitDisplay+0xa4>
    2e14:	8f c0       	rjmp	.+286    	; 0x2f34 <H_SSD_Void_SSDDigitDisplay+0x1c2>
    2e16:	8a 81       	ldd	r24, Y+2	; 0x02
    2e18:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1a:	89 30       	cpi	r24, 0x09	; 9
    2e1c:	91 05       	cpc	r25, r1
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <H_SSD_Void_SSDDigitDisplay+0xb0>
    2e20:	9a c0       	rjmp	.+308    	; 0x2f56 <H_SSD_Void_SSDDigitDisplay+0x1e4>
    2e22:	a9 c0       	rjmp	.+338    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
	{
	case 0:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,LOW);
    2e24:	8e e0       	ldi	r24, 0x0E	; 14
    2e26:	60 e0       	ldi	r22, 0x00	; 0
    2e28:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,LOW);
    2e2c:	8f e0       	ldi	r24, 0x0F	; 15
    2e2e:	60 e0       	ldi	r22, 0x00	; 0
    2e30:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,LOW);
    2e34:	80 e1       	ldi	r24, 0x10	; 16
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,LOW);
    2e3c:	81 e1       	ldi	r24, 0x11	; 17
    2e3e:	60 e0       	ldi	r22, 0x00	; 0
    2e40:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    2e44:	98 c0       	rjmp	.+304    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 1:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,HIGH);
    2e46:	8e e0       	ldi	r24, 0x0E	; 14
    2e48:	61 e0       	ldi	r22, 0x01	; 1
    2e4a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,LOW);
    2e4e:	8f e0       	ldi	r24, 0x0F	; 15
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,LOW);
    2e56:	80 e1       	ldi	r24, 0x10	; 16
    2e58:	60 e0       	ldi	r22, 0x00	; 0
    2e5a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,LOW);
    2e5e:	81 e1       	ldi	r24, 0x11	; 17
    2e60:	60 e0       	ldi	r22, 0x00	; 0
    2e62:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    2e66:	87 c0       	rjmp	.+270    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 2:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,LOW);
    2e68:	8e e0       	ldi	r24, 0x0E	; 14
    2e6a:	60 e0       	ldi	r22, 0x00	; 0
    2e6c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,HIGH);
    2e70:	8f e0       	ldi	r24, 0x0F	; 15
    2e72:	61 e0       	ldi	r22, 0x01	; 1
    2e74:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,LOW);
    2e78:	80 e1       	ldi	r24, 0x10	; 16
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,LOW);
    2e80:	81 e1       	ldi	r24, 0x11	; 17
    2e82:	60 e0       	ldi	r22, 0x00	; 0
    2e84:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    2e88:	76 c0       	rjmp	.+236    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 3:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,HIGH);
    2e8a:	8e e0       	ldi	r24, 0x0E	; 14
    2e8c:	61 e0       	ldi	r22, 0x01	; 1
    2e8e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,HIGH);
    2e92:	8f e0       	ldi	r24, 0x0F	; 15
    2e94:	61 e0       	ldi	r22, 0x01	; 1
    2e96:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,LOW);
    2e9a:	80 e1       	ldi	r24, 0x10	; 16
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,LOW);
    2ea2:	81 e1       	ldi	r24, 0x11	; 17
    2ea4:	60 e0       	ldi	r22, 0x00	; 0
    2ea6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    2eaa:	65 c0       	rjmp	.+202    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 4:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,LOW);
    2eac:	8e e0       	ldi	r24, 0x0E	; 14
    2eae:	60 e0       	ldi	r22, 0x00	; 0
    2eb0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,LOW);
    2eb4:	8f e0       	ldi	r24, 0x0F	; 15
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,HIGH);
    2ebc:	80 e1       	ldi	r24, 0x10	; 16
    2ebe:	61 e0       	ldi	r22, 0x01	; 1
    2ec0:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,LOW);
    2ec4:	81 e1       	ldi	r24, 0x11	; 17
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    2ecc:	54 c0       	rjmp	.+168    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 5:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,HIGH);
    2ece:	8e e0       	ldi	r24, 0x0E	; 14
    2ed0:	61 e0       	ldi	r22, 0x01	; 1
    2ed2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,LOW);
    2ed6:	8f e0       	ldi	r24, 0x0F	; 15
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,HIGH);
    2ede:	80 e1       	ldi	r24, 0x10	; 16
    2ee0:	61 e0       	ldi	r22, 0x01	; 1
    2ee2:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,LOW);
    2ee6:	81 e1       	ldi	r24, 0x11	; 17
    2ee8:	60 e0       	ldi	r22, 0x00	; 0
    2eea:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    2eee:	43 c0       	rjmp	.+134    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 6:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,LOW);
    2ef0:	8e e0       	ldi	r24, 0x0E	; 14
    2ef2:	60 e0       	ldi	r22, 0x00	; 0
    2ef4:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,HIGH);
    2ef8:	8f e0       	ldi	r24, 0x0F	; 15
    2efa:	61 e0       	ldi	r22, 0x01	; 1
    2efc:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,HIGH);
    2f00:	80 e1       	ldi	r24, 0x10	; 16
    2f02:	61 e0       	ldi	r22, 0x01	; 1
    2f04:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,LOW);
    2f08:	81 e1       	ldi	r24, 0x11	; 17
    2f0a:	60 e0       	ldi	r22, 0x00	; 0
    2f0c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    2f10:	32 c0       	rjmp	.+100    	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 7:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,HIGH);
    2f12:	8e e0       	ldi	r24, 0x0E	; 14
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,HIGH);
    2f1a:	8f e0       	ldi	r24, 0x0F	; 15
    2f1c:	61 e0       	ldi	r22, 0x01	; 1
    2f1e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,HIGH);
    2f22:	80 e1       	ldi	r24, 0x10	; 16
    2f24:	61 e0       	ldi	r22, 0x01	; 1
    2f26:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,LOW);
    2f2a:	81 e1       	ldi	r24, 0x11	; 17
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    2f32:	21 c0       	rjmp	.+66     	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 8:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,LOW);
    2f34:	8e e0       	ldi	r24, 0x0E	; 14
    2f36:	60 e0       	ldi	r22, 0x00	; 0
    2f38:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,LOW);
    2f3c:	8f e0       	ldi	r24, 0x0F	; 15
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,LOW);
    2f44:	80 e1       	ldi	r24, 0x10	; 16
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,HIGH);
    2f4c:	81 e1       	ldi	r24, 0x11	; 17
    2f4e:	61 e0       	ldi	r22, 0x01	; 1
    2f50:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    2f54:	10 c0       	rjmp	.+32     	; 0x2f76 <H_SSD_Void_SSDDigitDisplay+0x204>
		break;
	case 9:
		M_DIO_Void_SetPinDirection(SSD_A_PIN,HIGH);
    2f56:	8e e0       	ldi	r24, 0x0E	; 14
    2f58:	61 e0       	ldi	r22, 0x01	; 1
    2f5a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_B_PIN,LOW);
    2f5e:	8f e0       	ldi	r24, 0x0F	; 15
    2f60:	60 e0       	ldi	r22, 0x00	; 0
    2f62:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_C_PIN,LOW);
    2f66:	80 e1       	ldi	r24, 0x10	; 16
    2f68:	60 e0       	ldi	r22, 0x00	; 0
    2f6a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		M_DIO_Void_SetPinDirection(SSD_D_PIN,HIGH);
    2f6e:	81 e1       	ldi	r24, 0x11	; 17
    2f70:	61 e0       	ldi	r22, 0x01	; 1
    2f72:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
		break;
	default:
		break;
	}
}
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <H_Relay_Void_RelayInit>:
 *      Author: ali_l
 */
#include "RELAY_Interface.h"

void H_Relay_Void_RelayInit(void)
{
    2f82:	df 93       	push	r29
    2f84:	cf 93       	push	r28
    2f86:	cd b7       	in	r28, 0x3d	; 61
    2f88:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(Relay_PIN,OUTPUT);
    2f8a:	8c e0       	ldi	r24, 0x0C	; 12
    2f8c:	61 e0       	ldi	r22, 0x01	; 1
    2f8e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
}
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	08 95       	ret

00002f98 <H_Relay_Void_RelaySetOn>:
void H_Relay_Void_RelaySetOn(void)
{
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(Relay_PIN,HIGH);
    2fa0:	8c e0       	ldi	r24, 0x0C	; 12
    2fa2:	61 e0       	ldi	r22, 0x01	; 1
    2fa4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
}
    2fa8:	cf 91       	pop	r28
    2faa:	df 91       	pop	r29
    2fac:	08 95       	ret

00002fae <H_Relay_Void_RelaySetOff>:
void H_Relay_Void_RelaySetOff(void)
{
    2fae:	df 93       	push	r29
    2fb0:	cf 93       	push	r28
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(Relay_PIN,LOW);
    2fb6:	8c e0       	ldi	r24, 0x0C	; 12
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
}
    2fbe:	cf 91       	pop	r28
    2fc0:	df 91       	pop	r29
    2fc2:	08 95       	ret

00002fc4 <H_Relay_void_RelayTog>:
void H_Relay_void_RelayTog(void)
{
    2fc4:	df 93       	push	r29
    2fc6:	cf 93       	push	r28
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_TogPin(Relay_PIN);
    2fcc:	8c e0       	ldi	r24, 0x0C	; 12
    2fce:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <M_DIO_Void_TogPin>
}
    2fd2:	cf 91       	pop	r28
    2fd4:	df 91       	pop	r29
    2fd6:	08 95       	ret

00002fd8 <H_PB_Void_PBInit>:
 */

#include "PB_Interface.h"

void H_PB_Void_PBInit(u8 Copy_U8_PushButton)
{
    2fd8:	df 93       	push	r29
    2fda:	cf 93       	push	r28
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <H_PB_Void_PBInit+0x6>
    2fde:	0f 92       	push	r0
    2fe0:	cd b7       	in	r28, 0x3d	; 61
    2fe2:	de b7       	in	r29, 0x3e	; 62
    2fe4:	89 83       	std	Y+1, r24	; 0x01
	switch (Copy_U8_PushButton)
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	3b 83       	std	Y+3, r19	; 0x03
    2fee:	2a 83       	std	Y+2, r18	; 0x02
    2ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff4:	81 30       	cpi	r24, 0x01	; 1
    2ff6:	91 05       	cpc	r25, r1
    2ff8:	71 f0       	breq	.+28     	; 0x3016 <H_PB_Void_PBInit+0x3e>
    2ffa:	2a 81       	ldd	r18, Y+2	; 0x02
    2ffc:	3b 81       	ldd	r19, Y+3	; 0x03
    2ffe:	22 30       	cpi	r18, 0x02	; 2
    3000:	31 05       	cpc	r19, r1
    3002:	71 f0       	breq	.+28     	; 0x3020 <H_PB_Void_PBInit+0x48>
    3004:	8a 81       	ldd	r24, Y+2	; 0x02
    3006:	9b 81       	ldd	r25, Y+3	; 0x03
    3008:	00 97       	sbiw	r24, 0x00	; 0
    300a:	71 f4       	brne	.+28     	; 0x3028 <H_PB_Void_PBInit+0x50>
	{
	case PB0: M_DIO_Void_SetPinDirection(PUSH_BUTTON0_PIN,INPUT); break;
    300c:	84 e1       	ldi	r24, 0x14	; 20
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    3014:	09 c0       	rjmp	.+18     	; 0x3028 <H_PB_Void_PBInit+0x50>
	case PB1: M_DIO_Void_SetPinDirection(PUSH_BUTTON1_PIN,INPUT); break;
    3016:	8e e2       	ldi	r24, 0x2E	; 46
    3018:	60 e0       	ldi	r22, 0x00	; 0
    301a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    301e:	04 c0       	rjmp	.+8      	; 0x3028 <H_PB_Void_PBInit+0x50>
	case PB2: M_DIO_Void_SetPinDirection(PUSH_BUTTON2_PIN,INPUT); break;
    3020:	8a e2       	ldi	r24, 0x2A	; 42
    3022:	60 e0       	ldi	r22, 0x00	; 0
    3024:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	default :                                                     break;
	}
}
    3028:	0f 90       	pop	r0
    302a:	0f 90       	pop	r0
    302c:	0f 90       	pop	r0
    302e:	cf 91       	pop	r28
    3030:	df 91       	pop	r29
    3032:	08 95       	ret

00003034 <H_PB_U8_PBRead>:
u8 H_PB_U8_PBRead(u8 Copy_U8_PushButton)
{
    3034:	df 93       	push	r29
    3036:	cf 93       	push	r28
    3038:	cd b7       	in	r28, 0x3d	; 61
    303a:	de b7       	in	r29, 0x3e	; 62
    303c:	ae 97       	sbiw	r28, 0x2e	; 46
    303e:	0f b6       	in	r0, 0x3f	; 63
    3040:	f8 94       	cli
    3042:	de bf       	out	0x3e, r29	; 62
    3044:	0f be       	out	0x3f, r0	; 63
    3046:	cd bf       	out	0x3d, r28	; 61
    3048:	8c a7       	std	Y+44, r24	; 0x2c
	u8 Local_U8_Reading = RELEASED;
    304a:	1b a6       	std	Y+43, r1	; 0x2b
	switch (Copy_U8_PushButton)
    304c:	8c a5       	ldd	r24, Y+44	; 0x2c
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	3e a7       	std	Y+46, r19	; 0x2e
    3054:	2d a7       	std	Y+45, r18	; 0x2d
    3056:	8d a5       	ldd	r24, Y+45	; 0x2d
    3058:	9e a5       	ldd	r25, Y+46	; 0x2e
    305a:	81 30       	cpi	r24, 0x01	; 1
    305c:	91 05       	cpc	r25, r1
    305e:	09 f4       	brne	.+2      	; 0x3062 <H_PB_U8_PBRead+0x2e>
    3060:	91 c0       	rjmp	.+290    	; 0x3184 <H_PB_U8_PBRead+0x150>
    3062:	2d a5       	ldd	r18, Y+45	; 0x2d
    3064:	3e a5       	ldd	r19, Y+46	; 0x2e
    3066:	22 30       	cpi	r18, 0x02	; 2
    3068:	31 05       	cpc	r19, r1
    306a:	09 f4       	brne	.+2      	; 0x306e <H_PB_U8_PBRead+0x3a>
    306c:	11 c1       	rjmp	.+546    	; 0x3290 <H_PB_U8_PBRead+0x25c>
    306e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3070:	9e a5       	ldd	r25, Y+46	; 0x2e
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	09 f0       	breq	.+2      	; 0x3078 <H_PB_U8_PBRead+0x44>
    3076:	90 c1       	rjmp	.+800    	; 0x3398 <H_PB_U8_PBRead+0x364>
	{
	case PB0:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    3078:	84 e1       	ldi	r24, 0x14	; 20
    307a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    307e:	81 30       	cpi	r24, 0x01	; 1
    3080:	09 f0       	breq	.+2      	; 0x3084 <H_PB_U8_PBRead+0x50>
    3082:	8a c1       	rjmp	.+788    	; 0x3398 <H_PB_U8_PBRead+0x364>
    3084:	80 e0       	ldi	r24, 0x00	; 0
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	a2 e0       	ldi	r26, 0x02	; 2
    308a:	b3 e4       	ldi	r27, 0x43	; 67
    308c:	8f a3       	std	Y+39, r24	; 0x27
    308e:	98 a7       	std	Y+40, r25	; 0x28
    3090:	a9 a7       	std	Y+41, r26	; 0x29
    3092:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3094:	6f a1       	ldd	r22, Y+39	; 0x27
    3096:	78 a5       	ldd	r23, Y+40	; 0x28
    3098:	89 a5       	ldd	r24, Y+41	; 0x29
    309a:	9a a5       	ldd	r25, Y+42	; 0x2a
    309c:	20 e0       	ldi	r18, 0x00	; 0
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	4a e7       	ldi	r20, 0x7A	; 122
    30a2:	55 e4       	ldi	r21, 0x45	; 69
    30a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a8:	dc 01       	movw	r26, r24
    30aa:	cb 01       	movw	r24, r22
    30ac:	8b a3       	std	Y+35, r24	; 0x23
    30ae:	9c a3       	std	Y+36, r25	; 0x24
    30b0:	ad a3       	std	Y+37, r26	; 0x25
    30b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30b4:	6b a1       	ldd	r22, Y+35	; 0x23
    30b6:	7c a1       	ldd	r23, Y+36	; 0x24
    30b8:	8d a1       	ldd	r24, Y+37	; 0x25
    30ba:	9e a1       	ldd	r25, Y+38	; 0x26
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e8       	ldi	r20, 0x80	; 128
    30c2:	5f e3       	ldi	r21, 0x3F	; 63
    30c4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30c8:	88 23       	and	r24, r24
    30ca:	2c f4       	brge	.+10     	; 0x30d6 <H_PB_U8_PBRead+0xa2>
		__ticks = 1;
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	90 e0       	ldi	r25, 0x00	; 0
    30d0:	9a a3       	std	Y+34, r25	; 0x22
    30d2:	89 a3       	std	Y+33, r24	; 0x21
    30d4:	3f c0       	rjmp	.+126    	; 0x3154 <H_PB_U8_PBRead+0x120>
	else if (__tmp > 65535)
    30d6:	6b a1       	ldd	r22, Y+35	; 0x23
    30d8:	7c a1       	ldd	r23, Y+36	; 0x24
    30da:	8d a1       	ldd	r24, Y+37	; 0x25
    30dc:	9e a1       	ldd	r25, Y+38	; 0x26
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	3f ef       	ldi	r19, 0xFF	; 255
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	57 e4       	ldi	r21, 0x47	; 71
    30e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	4c f5       	brge	.+82     	; 0x3140 <H_PB_U8_PBRead+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30ee:	6f a1       	ldd	r22, Y+39	; 0x27
    30f0:	78 a5       	ldd	r23, Y+40	; 0x28
    30f2:	89 a5       	ldd	r24, Y+41	; 0x29
    30f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	30 e0       	ldi	r19, 0x00	; 0
    30fa:	40 e2       	ldi	r20, 0x20	; 32
    30fc:	51 e4       	ldi	r21, 0x41	; 65
    30fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3102:	dc 01       	movw	r26, r24
    3104:	cb 01       	movw	r24, r22
    3106:	bc 01       	movw	r22, r24
    3108:	cd 01       	movw	r24, r26
    310a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    310e:	dc 01       	movw	r26, r24
    3110:	cb 01       	movw	r24, r22
    3112:	9a a3       	std	Y+34, r25	; 0x22
    3114:	89 a3       	std	Y+33, r24	; 0x21
    3116:	0f c0       	rjmp	.+30     	; 0x3136 <H_PB_U8_PBRead+0x102>
    3118:	80 e9       	ldi	r24, 0x90	; 144
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	98 a3       	std	Y+32, r25	; 0x20
    311e:	8f 8f       	std	Y+31, r24	; 0x1f
    3120:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3122:	98 a1       	ldd	r25, Y+32	; 0x20
    3124:	01 97       	sbiw	r24, 0x01	; 1
    3126:	f1 f7       	brne	.-4      	; 0x3124 <H_PB_U8_PBRead+0xf0>
    3128:	98 a3       	std	Y+32, r25	; 0x20
    312a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    312c:	89 a1       	ldd	r24, Y+33	; 0x21
    312e:	9a a1       	ldd	r25, Y+34	; 0x22
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	9a a3       	std	Y+34, r25	; 0x22
    3134:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3136:	89 a1       	ldd	r24, Y+33	; 0x21
    3138:	9a a1       	ldd	r25, Y+34	; 0x22
    313a:	00 97       	sbiw	r24, 0x00	; 0
    313c:	69 f7       	brne	.-38     	; 0x3118 <H_PB_U8_PBRead+0xe4>
    313e:	14 c0       	rjmp	.+40     	; 0x3168 <H_PB_U8_PBRead+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3140:	6b a1       	ldd	r22, Y+35	; 0x23
    3142:	7c a1       	ldd	r23, Y+36	; 0x24
    3144:	8d a1       	ldd	r24, Y+37	; 0x25
    3146:	9e a1       	ldd	r25, Y+38	; 0x26
    3148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314c:	dc 01       	movw	r26, r24
    314e:	cb 01       	movw	r24, r22
    3150:	9a a3       	std	Y+34, r25	; 0x22
    3152:	89 a3       	std	Y+33, r24	; 0x21
    3154:	89 a1       	ldd	r24, Y+33	; 0x21
    3156:	9a a1       	ldd	r25, Y+34	; 0x22
    3158:	9e 8f       	std	Y+30, r25	; 0x1e
    315a:	8d 8f       	std	Y+29, r24	; 0x1d
    315c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    315e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	f1 f7       	brne	.-4      	; 0x3160 <H_PB_U8_PBRead+0x12c>
    3164:	9e 8f       	std	Y+30, r25	; 0x1e
    3166:	8d 8f       	std	Y+29, r24	; 0x1d
		{
		_delay_ms(PB_DEBOUNCING_TIME);
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    3168:	84 e1       	ldi	r24, 0x14	; 20
    316a:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    316e:	81 30       	cpi	r24, 0x01	; 1
    3170:	09 f0       	breq	.+2      	; 0x3174 <H_PB_U8_PBRead+0x140>
    3172:	12 c1       	rjmp	.+548    	; 0x3398 <H_PB_U8_PBRead+0x364>
		{
			while(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED);
    3174:	84 e1       	ldi	r24, 0x14	; 20
    3176:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    317a:	81 30       	cpi	r24, 0x01	; 1
    317c:	d9 f3       	breq	.-10     	; 0x3174 <H_PB_U8_PBRead+0x140>
			Local_U8_Reading = PRESSED;
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	8b a7       	std	Y+43, r24	; 0x2b
    3182:	0a c1       	rjmp	.+532    	; 0x3398 <H_PB_U8_PBRead+0x364>
		}
		}
		break;
	case PB1:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    3184:	8e e2       	ldi	r24, 0x2E	; 46
    3186:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    318a:	81 30       	cpi	r24, 0x01	; 1
    318c:	09 f0       	breq	.+2      	; 0x3190 <H_PB_U8_PBRead+0x15c>
    318e:	04 c1       	rjmp	.+520    	; 0x3398 <H_PB_U8_PBRead+0x364>
    3190:	80 e0       	ldi	r24, 0x00	; 0
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	a2 e0       	ldi	r26, 0x02	; 2
    3196:	b3 e4       	ldi	r27, 0x43	; 67
    3198:	89 8f       	std	Y+25, r24	; 0x19
    319a:	9a 8f       	std	Y+26, r25	; 0x1a
    319c:	ab 8f       	std	Y+27, r26	; 0x1b
    319e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31a0:	69 8d       	ldd	r22, Y+25	; 0x19
    31a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31a4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31a6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31a8:	20 e0       	ldi	r18, 0x00	; 0
    31aa:	30 e0       	ldi	r19, 0x00	; 0
    31ac:	4a e7       	ldi	r20, 0x7A	; 122
    31ae:	55 e4       	ldi	r21, 0x45	; 69
    31b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31b4:	dc 01       	movw	r26, r24
    31b6:	cb 01       	movw	r24, r22
    31b8:	8d 8b       	std	Y+21, r24	; 0x15
    31ba:	9e 8b       	std	Y+22, r25	; 0x16
    31bc:	af 8b       	std	Y+23, r26	; 0x17
    31be:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31c0:	6d 89       	ldd	r22, Y+21	; 0x15
    31c2:	7e 89       	ldd	r23, Y+22	; 0x16
    31c4:	8f 89       	ldd	r24, Y+23	; 0x17
    31c6:	98 8d       	ldd	r25, Y+24	; 0x18
    31c8:	20 e0       	ldi	r18, 0x00	; 0
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	40 e8       	ldi	r20, 0x80	; 128
    31ce:	5f e3       	ldi	r21, 0x3F	; 63
    31d0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    31d4:	88 23       	and	r24, r24
    31d6:	2c f4       	brge	.+10     	; 0x31e2 <H_PB_U8_PBRead+0x1ae>
		__ticks = 1;
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	90 e0       	ldi	r25, 0x00	; 0
    31dc:	9c 8b       	std	Y+20, r25	; 0x14
    31de:	8b 8b       	std	Y+19, r24	; 0x13
    31e0:	3f c0       	rjmp	.+126    	; 0x3260 <H_PB_U8_PBRead+0x22c>
	else if (__tmp > 65535)
    31e2:	6d 89       	ldd	r22, Y+21	; 0x15
    31e4:	7e 89       	ldd	r23, Y+22	; 0x16
    31e6:	8f 89       	ldd	r24, Y+23	; 0x17
    31e8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	3f ef       	ldi	r19, 0xFF	; 255
    31ee:	4f e7       	ldi	r20, 0x7F	; 127
    31f0:	57 e4       	ldi	r21, 0x47	; 71
    31f2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    31f6:	18 16       	cp	r1, r24
    31f8:	4c f5       	brge	.+82     	; 0x324c <H_PB_U8_PBRead+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31fa:	69 8d       	ldd	r22, Y+25	; 0x19
    31fc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31fe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3200:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e2       	ldi	r20, 0x20	; 32
    3208:	51 e4       	ldi	r21, 0x41	; 65
    320a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    320e:	dc 01       	movw	r26, r24
    3210:	cb 01       	movw	r24, r22
    3212:	bc 01       	movw	r22, r24
    3214:	cd 01       	movw	r24, r26
    3216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    321a:	dc 01       	movw	r26, r24
    321c:	cb 01       	movw	r24, r22
    321e:	9c 8b       	std	Y+20, r25	; 0x14
    3220:	8b 8b       	std	Y+19, r24	; 0x13
    3222:	0f c0       	rjmp	.+30     	; 0x3242 <H_PB_U8_PBRead+0x20e>
    3224:	80 e9       	ldi	r24, 0x90	; 144
    3226:	91 e0       	ldi	r25, 0x01	; 1
    3228:	9a 8b       	std	Y+18, r25	; 0x12
    322a:	89 8b       	std	Y+17, r24	; 0x11
    322c:	89 89       	ldd	r24, Y+17	; 0x11
    322e:	9a 89       	ldd	r25, Y+18	; 0x12
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <H_PB_U8_PBRead+0x1fc>
    3234:	9a 8b       	std	Y+18, r25	; 0x12
    3236:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3238:	8b 89       	ldd	r24, Y+19	; 0x13
    323a:	9c 89       	ldd	r25, Y+20	; 0x14
    323c:	01 97       	sbiw	r24, 0x01	; 1
    323e:	9c 8b       	std	Y+20, r25	; 0x14
    3240:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3242:	8b 89       	ldd	r24, Y+19	; 0x13
    3244:	9c 89       	ldd	r25, Y+20	; 0x14
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	69 f7       	brne	.-38     	; 0x3224 <H_PB_U8_PBRead+0x1f0>
    324a:	14 c0       	rjmp	.+40     	; 0x3274 <H_PB_U8_PBRead+0x240>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    324c:	6d 89       	ldd	r22, Y+21	; 0x15
    324e:	7e 89       	ldd	r23, Y+22	; 0x16
    3250:	8f 89       	ldd	r24, Y+23	; 0x17
    3252:	98 8d       	ldd	r25, Y+24	; 0x18
    3254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3258:	dc 01       	movw	r26, r24
    325a:	cb 01       	movw	r24, r22
    325c:	9c 8b       	std	Y+20, r25	; 0x14
    325e:	8b 8b       	std	Y+19, r24	; 0x13
    3260:	8b 89       	ldd	r24, Y+19	; 0x13
    3262:	9c 89       	ldd	r25, Y+20	; 0x14
    3264:	98 8b       	std	Y+16, r25	; 0x10
    3266:	8f 87       	std	Y+15, r24	; 0x0f
    3268:	8f 85       	ldd	r24, Y+15	; 0x0f
    326a:	98 89       	ldd	r25, Y+16	; 0x10
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <H_PB_U8_PBRead+0x238>
    3270:	98 8b       	std	Y+16, r25	; 0x10
    3272:	8f 87       	std	Y+15, r24	; 0x0f
		{
		_delay_ms(PB_DEBOUNCING_TIME);
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    3274:	8e e2       	ldi	r24, 0x2E	; 46
    3276:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    327a:	81 30       	cpi	r24, 0x01	; 1
    327c:	09 f0       	breq	.+2      	; 0x3280 <H_PB_U8_PBRead+0x24c>
    327e:	8c c0       	rjmp	.+280    	; 0x3398 <H_PB_U8_PBRead+0x364>
		{
			while(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED);
    3280:	8e e2       	ldi	r24, 0x2E	; 46
    3282:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    3286:	81 30       	cpi	r24, 0x01	; 1
    3288:	d9 f3       	breq	.-10     	; 0x3280 <H_PB_U8_PBRead+0x24c>
			Local_U8_Reading = PRESSED;
    328a:	81 e0       	ldi	r24, 0x01	; 1
    328c:	8b a7       	std	Y+43, r24	; 0x2b
    328e:	84 c0       	rjmp	.+264    	; 0x3398 <H_PB_U8_PBRead+0x364>
		}
		}
		break;
	case PB2:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    3290:	8a e2       	ldi	r24, 0x2A	; 42
    3292:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    3296:	81 30       	cpi	r24, 0x01	; 1
    3298:	09 f0       	breq	.+2      	; 0x329c <H_PB_U8_PBRead+0x268>
    329a:	7e c0       	rjmp	.+252    	; 0x3398 <H_PB_U8_PBRead+0x364>
    329c:	80 e0       	ldi	r24, 0x00	; 0
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	a2 e0       	ldi	r26, 0x02	; 2
    32a2:	b3 e4       	ldi	r27, 0x43	; 67
    32a4:	8b 87       	std	Y+11, r24	; 0x0b
    32a6:	9c 87       	std	Y+12, r25	; 0x0c
    32a8:	ad 87       	std	Y+13, r26	; 0x0d
    32aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b4:	20 e0       	ldi	r18, 0x00	; 0
    32b6:	30 e0       	ldi	r19, 0x00	; 0
    32b8:	4a e7       	ldi	r20, 0x7A	; 122
    32ba:	55 e4       	ldi	r21, 0x45	; 69
    32bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c0:	dc 01       	movw	r26, r24
    32c2:	cb 01       	movw	r24, r22
    32c4:	8f 83       	std	Y+7, r24	; 0x07
    32c6:	98 87       	std	Y+8, r25	; 0x08
    32c8:	a9 87       	std	Y+9, r26	; 0x09
    32ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32cc:	6f 81       	ldd	r22, Y+7	; 0x07
    32ce:	78 85       	ldd	r23, Y+8	; 0x08
    32d0:	89 85       	ldd	r24, Y+9	; 0x09
    32d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d4:	20 e0       	ldi	r18, 0x00	; 0
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	40 e8       	ldi	r20, 0x80	; 128
    32da:	5f e3       	ldi	r21, 0x3F	; 63
    32dc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32e0:	88 23       	and	r24, r24
    32e2:	2c f4       	brge	.+10     	; 0x32ee <H_PB_U8_PBRead+0x2ba>
		__ticks = 1;
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	90 e0       	ldi	r25, 0x00	; 0
    32e8:	9e 83       	std	Y+6, r25	; 0x06
    32ea:	8d 83       	std	Y+5, r24	; 0x05
    32ec:	3f c0       	rjmp	.+126    	; 0x336c <H_PB_U8_PBRead+0x338>
	else if (__tmp > 65535)
    32ee:	6f 81       	ldd	r22, Y+7	; 0x07
    32f0:	78 85       	ldd	r23, Y+8	; 0x08
    32f2:	89 85       	ldd	r24, Y+9	; 0x09
    32f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	3f ef       	ldi	r19, 0xFF	; 255
    32fa:	4f e7       	ldi	r20, 0x7F	; 127
    32fc:	57 e4       	ldi	r21, 0x47	; 71
    32fe:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3302:	18 16       	cp	r1, r24
    3304:	4c f5       	brge	.+82     	; 0x3358 <H_PB_U8_PBRead+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3306:	6b 85       	ldd	r22, Y+11	; 0x0b
    3308:	7c 85       	ldd	r23, Y+12	; 0x0c
    330a:	8d 85       	ldd	r24, Y+13	; 0x0d
    330c:	9e 85       	ldd	r25, Y+14	; 0x0e
    330e:	20 e0       	ldi	r18, 0x00	; 0
    3310:	30 e0       	ldi	r19, 0x00	; 0
    3312:	40 e2       	ldi	r20, 0x20	; 32
    3314:	51 e4       	ldi	r21, 0x41	; 65
    3316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331a:	dc 01       	movw	r26, r24
    331c:	cb 01       	movw	r24, r22
    331e:	bc 01       	movw	r22, r24
    3320:	cd 01       	movw	r24, r26
    3322:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3326:	dc 01       	movw	r26, r24
    3328:	cb 01       	movw	r24, r22
    332a:	9e 83       	std	Y+6, r25	; 0x06
    332c:	8d 83       	std	Y+5, r24	; 0x05
    332e:	0f c0       	rjmp	.+30     	; 0x334e <H_PB_U8_PBRead+0x31a>
    3330:	80 e9       	ldi	r24, 0x90	; 144
    3332:	91 e0       	ldi	r25, 0x01	; 1
    3334:	9c 83       	std	Y+4, r25	; 0x04
    3336:	8b 83       	std	Y+3, r24	; 0x03
    3338:	8b 81       	ldd	r24, Y+3	; 0x03
    333a:	9c 81       	ldd	r25, Y+4	; 0x04
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	f1 f7       	brne	.-4      	; 0x333c <H_PB_U8_PBRead+0x308>
    3340:	9c 83       	std	Y+4, r25	; 0x04
    3342:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3344:	8d 81       	ldd	r24, Y+5	; 0x05
    3346:	9e 81       	ldd	r25, Y+6	; 0x06
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	9e 83       	std	Y+6, r25	; 0x06
    334c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334e:	8d 81       	ldd	r24, Y+5	; 0x05
    3350:	9e 81       	ldd	r25, Y+6	; 0x06
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	69 f7       	brne	.-38     	; 0x3330 <H_PB_U8_PBRead+0x2fc>
    3356:	14 c0       	rjmp	.+40     	; 0x3380 <H_PB_U8_PBRead+0x34c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3358:	6f 81       	ldd	r22, Y+7	; 0x07
    335a:	78 85       	ldd	r23, Y+8	; 0x08
    335c:	89 85       	ldd	r24, Y+9	; 0x09
    335e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3364:	dc 01       	movw	r26, r24
    3366:	cb 01       	movw	r24, r22
    3368:	9e 83       	std	Y+6, r25	; 0x06
    336a:	8d 83       	std	Y+5, r24	; 0x05
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	9e 81       	ldd	r25, Y+6	; 0x06
    3370:	9a 83       	std	Y+2, r25	; 0x02
    3372:	89 83       	std	Y+1, r24	; 0x01
    3374:	89 81       	ldd	r24, Y+1	; 0x01
    3376:	9a 81       	ldd	r25, Y+2	; 0x02
    3378:	01 97       	sbiw	r24, 0x01	; 1
    337a:	f1 f7       	brne	.-4      	; 0x3378 <H_PB_U8_PBRead+0x344>
    337c:	9a 83       	std	Y+2, r25	; 0x02
    337e:	89 83       	std	Y+1, r24	; 0x01
		{
		_delay_ms(PB_DEBOUNCING_TIME);
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    3380:	8a e2       	ldi	r24, 0x2A	; 42
    3382:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    3386:	81 30       	cpi	r24, 0x01	; 1
    3388:	39 f4       	brne	.+14     	; 0x3398 <H_PB_U8_PBRead+0x364>
		{
			while(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED);
    338a:	8a e2       	ldi	r24, 0x2A	; 42
    338c:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    3390:	81 30       	cpi	r24, 0x01	; 1
    3392:	d9 f3       	breq	.-10     	; 0x338a <H_PB_U8_PBRead+0x356>
			Local_U8_Reading = PRESSED;
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	8b a7       	std	Y+43, r24	; 0x2b
		}
		break;
	default :
		break;
	}
	return Local_U8_Reading;
    3398:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    339a:	ae 96       	adiw	r28, 0x2e	; 46
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	08 95       	ret

000033ac <H_PB_U8_PBReadWhilePressed>:
u8 H_PB_U8_PBReadWhilePressed(u8 Copy_U8_PushButton)
{
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	ae 97       	sbiw	r28, 0x2e	; 46
    33b6:	0f b6       	in	r0, 0x3f	; 63
    33b8:	f8 94       	cli
    33ba:	de bf       	out	0x3e, r29	; 62
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	cd bf       	out	0x3d, r28	; 61
    33c0:	8c a7       	std	Y+44, r24	; 0x2c
	u8 Local_U8_Reading = RELEASED;
    33c2:	1b a6       	std	Y+43, r1	; 0x2b
	switch (Copy_U8_PushButton)
    33c4:	8c a5       	ldd	r24, Y+44	; 0x2c
    33c6:	28 2f       	mov	r18, r24
    33c8:	30 e0       	ldi	r19, 0x00	; 0
    33ca:	3e a7       	std	Y+46, r19	; 0x2e
    33cc:	2d a7       	std	Y+45, r18	; 0x2d
    33ce:	8d a5       	ldd	r24, Y+45	; 0x2d
    33d0:	9e a5       	ldd	r25, Y+46	; 0x2e
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	91 05       	cpc	r25, r1
    33d6:	09 f4       	brne	.+2      	; 0x33da <H_PB_U8_PBReadWhilePressed+0x2e>
    33d8:	92 c0       	rjmp	.+292    	; 0x34fe <H_PB_U8_PBReadWhilePressed+0x152>
    33da:	2d a5       	ldd	r18, Y+45	; 0x2d
    33dc:	3e a5       	ldd	r19, Y+46	; 0x2e
    33de:	22 30       	cpi	r18, 0x02	; 2
    33e0:	31 05       	cpc	r19, r1
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <H_PB_U8_PBReadWhilePressed+0x3a>
    33e4:	13 c1       	rjmp	.+550    	; 0x360c <H_PB_U8_PBReadWhilePressed+0x260>
    33e6:	8d a5       	ldd	r24, Y+45	; 0x2d
    33e8:	9e a5       	ldd	r25, Y+46	; 0x2e
    33ea:	00 97       	sbiw	r24, 0x00	; 0
    33ec:	09 f0       	breq	.+2      	; 0x33f0 <H_PB_U8_PBReadWhilePressed+0x44>
    33ee:	92 c1       	rjmp	.+804    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
	{
	case PB0:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    33f0:	84 e1       	ldi	r24, 0x14	; 20
    33f2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    33f6:	81 30       	cpi	r24, 0x01	; 1
    33f8:	09 f0       	breq	.+2      	; 0x33fc <H_PB_U8_PBReadWhilePressed+0x50>
    33fa:	8c c1       	rjmp	.+792    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
    33fc:	80 e0       	ldi	r24, 0x00	; 0
    33fe:	90 e0       	ldi	r25, 0x00	; 0
    3400:	a2 e0       	ldi	r26, 0x02	; 2
    3402:	b3 e4       	ldi	r27, 0x43	; 67
    3404:	8f a3       	std	Y+39, r24	; 0x27
    3406:	98 a7       	std	Y+40, r25	; 0x28
    3408:	a9 a7       	std	Y+41, r26	; 0x29
    340a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    340c:	6f a1       	ldd	r22, Y+39	; 0x27
    340e:	78 a5       	ldd	r23, Y+40	; 0x28
    3410:	89 a5       	ldd	r24, Y+41	; 0x29
    3412:	9a a5       	ldd	r25, Y+42	; 0x2a
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	30 e0       	ldi	r19, 0x00	; 0
    3418:	4a e7       	ldi	r20, 0x7A	; 122
    341a:	55 e4       	ldi	r21, 0x45	; 69
    341c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3420:	dc 01       	movw	r26, r24
    3422:	cb 01       	movw	r24, r22
    3424:	8b a3       	std	Y+35, r24	; 0x23
    3426:	9c a3       	std	Y+36, r25	; 0x24
    3428:	ad a3       	std	Y+37, r26	; 0x25
    342a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    342c:	6b a1       	ldd	r22, Y+35	; 0x23
    342e:	7c a1       	ldd	r23, Y+36	; 0x24
    3430:	8d a1       	ldd	r24, Y+37	; 0x25
    3432:	9e a1       	ldd	r25, Y+38	; 0x26
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	40 e8       	ldi	r20, 0x80	; 128
    343a:	5f e3       	ldi	r21, 0x3F	; 63
    343c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3440:	88 23       	and	r24, r24
    3442:	2c f4       	brge	.+10     	; 0x344e <H_PB_U8_PBReadWhilePressed+0xa2>
		__ticks = 1;
    3444:	81 e0       	ldi	r24, 0x01	; 1
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	9a a3       	std	Y+34, r25	; 0x22
    344a:	89 a3       	std	Y+33, r24	; 0x21
    344c:	3f c0       	rjmp	.+126    	; 0x34cc <H_PB_U8_PBReadWhilePressed+0x120>
	else if (__tmp > 65535)
    344e:	6b a1       	ldd	r22, Y+35	; 0x23
    3450:	7c a1       	ldd	r23, Y+36	; 0x24
    3452:	8d a1       	ldd	r24, Y+37	; 0x25
    3454:	9e a1       	ldd	r25, Y+38	; 0x26
    3456:	20 e0       	ldi	r18, 0x00	; 0
    3458:	3f ef       	ldi	r19, 0xFF	; 255
    345a:	4f e7       	ldi	r20, 0x7F	; 127
    345c:	57 e4       	ldi	r21, 0x47	; 71
    345e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3462:	18 16       	cp	r1, r24
    3464:	4c f5       	brge	.+82     	; 0x34b8 <H_PB_U8_PBReadWhilePressed+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3466:	6f a1       	ldd	r22, Y+39	; 0x27
    3468:	78 a5       	ldd	r23, Y+40	; 0x28
    346a:	89 a5       	ldd	r24, Y+41	; 0x29
    346c:	9a a5       	ldd	r25, Y+42	; 0x2a
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	40 e2       	ldi	r20, 0x20	; 32
    3474:	51 e4       	ldi	r21, 0x41	; 65
    3476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	bc 01       	movw	r22, r24
    3480:	cd 01       	movw	r24, r26
    3482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3486:	dc 01       	movw	r26, r24
    3488:	cb 01       	movw	r24, r22
    348a:	9a a3       	std	Y+34, r25	; 0x22
    348c:	89 a3       	std	Y+33, r24	; 0x21
    348e:	0f c0       	rjmp	.+30     	; 0x34ae <H_PB_U8_PBReadWhilePressed+0x102>
    3490:	80 e9       	ldi	r24, 0x90	; 144
    3492:	91 e0       	ldi	r25, 0x01	; 1
    3494:	98 a3       	std	Y+32, r25	; 0x20
    3496:	8f 8f       	std	Y+31, r24	; 0x1f
    3498:	8f 8d       	ldd	r24, Y+31	; 0x1f
    349a:	98 a1       	ldd	r25, Y+32	; 0x20
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	f1 f7       	brne	.-4      	; 0x349c <H_PB_U8_PBReadWhilePressed+0xf0>
    34a0:	98 a3       	std	Y+32, r25	; 0x20
    34a2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34a4:	89 a1       	ldd	r24, Y+33	; 0x21
    34a6:	9a a1       	ldd	r25, Y+34	; 0x22
    34a8:	01 97       	sbiw	r24, 0x01	; 1
    34aa:	9a a3       	std	Y+34, r25	; 0x22
    34ac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34ae:	89 a1       	ldd	r24, Y+33	; 0x21
    34b0:	9a a1       	ldd	r25, Y+34	; 0x22
    34b2:	00 97       	sbiw	r24, 0x00	; 0
    34b4:	69 f7       	brne	.-38     	; 0x3490 <H_PB_U8_PBReadWhilePressed+0xe4>
    34b6:	14 c0       	rjmp	.+40     	; 0x34e0 <H_PB_U8_PBReadWhilePressed+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34b8:	6b a1       	ldd	r22, Y+35	; 0x23
    34ba:	7c a1       	ldd	r23, Y+36	; 0x24
    34bc:	8d a1       	ldd	r24, Y+37	; 0x25
    34be:	9e a1       	ldd	r25, Y+38	; 0x26
    34c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34c4:	dc 01       	movw	r26, r24
    34c6:	cb 01       	movw	r24, r22
    34c8:	9a a3       	std	Y+34, r25	; 0x22
    34ca:	89 a3       	std	Y+33, r24	; 0x21
    34cc:	89 a1       	ldd	r24, Y+33	; 0x21
    34ce:	9a a1       	ldd	r25, Y+34	; 0x22
    34d0:	9e 8f       	std	Y+30, r25	; 0x1e
    34d2:	8d 8f       	std	Y+29, r24	; 0x1d
    34d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34d8:	01 97       	sbiw	r24, 0x01	; 1
    34da:	f1 f7       	brne	.-4      	; 0x34d8 <H_PB_U8_PBReadWhilePressed+0x12c>
    34dc:	9e 8f       	std	Y+30, r25	; 0x1e
    34de:	8d 8f       	std	Y+29, r24	; 0x1d
		{
		_delay_ms(PB_DEBOUNCING_TIME);
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    34e0:	84 e1       	ldi	r24, 0x14	; 20
    34e2:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	09 f0       	breq	.+2      	; 0x34ec <H_PB_U8_PBReadWhilePressed+0x140>
    34ea:	14 c1       	rjmp	.+552    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
		{
			while(M_DIO_U8_GetPinValue(PUSH_BUTTON0_PIN) == PRESSED)
    34ec:	84 e1       	ldi	r24, 0x14	; 20
    34ee:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    34f2:	81 30       	cpi	r24, 0x01	; 1
    34f4:	09 f0       	breq	.+2      	; 0x34f8 <H_PB_U8_PBReadWhilePressed+0x14c>
    34f6:	0e c1       	rjmp	.+540    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
			{
			Local_U8_Reading = PRESSED;
    34f8:	81 e0       	ldi	r24, 0x01	; 1
    34fa:	8b a7       	std	Y+43, r24	; 0x2b
    34fc:	0b c1       	rjmp	.+534    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
			}
		}
		}
		break;
	case PB1:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    34fe:	8e e2       	ldi	r24, 0x2E	; 46
    3500:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    3504:	81 30       	cpi	r24, 0x01	; 1
    3506:	09 f0       	breq	.+2      	; 0x350a <H_PB_U8_PBReadWhilePressed+0x15e>
    3508:	05 c1       	rjmp	.+522    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	a2 e0       	ldi	r26, 0x02	; 2
    3510:	b3 e4       	ldi	r27, 0x43	; 67
    3512:	89 8f       	std	Y+25, r24	; 0x19
    3514:	9a 8f       	std	Y+26, r25	; 0x1a
    3516:	ab 8f       	std	Y+27, r26	; 0x1b
    3518:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    351a:	69 8d       	ldd	r22, Y+25	; 0x19
    351c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    351e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3520:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3522:	20 e0       	ldi	r18, 0x00	; 0
    3524:	30 e0       	ldi	r19, 0x00	; 0
    3526:	4a e7       	ldi	r20, 0x7A	; 122
    3528:	55 e4       	ldi	r21, 0x45	; 69
    352a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    352e:	dc 01       	movw	r26, r24
    3530:	cb 01       	movw	r24, r22
    3532:	8d 8b       	std	Y+21, r24	; 0x15
    3534:	9e 8b       	std	Y+22, r25	; 0x16
    3536:	af 8b       	std	Y+23, r26	; 0x17
    3538:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    353a:	6d 89       	ldd	r22, Y+21	; 0x15
    353c:	7e 89       	ldd	r23, Y+22	; 0x16
    353e:	8f 89       	ldd	r24, Y+23	; 0x17
    3540:	98 8d       	ldd	r25, Y+24	; 0x18
    3542:	20 e0       	ldi	r18, 0x00	; 0
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	40 e8       	ldi	r20, 0x80	; 128
    3548:	5f e3       	ldi	r21, 0x3F	; 63
    354a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    354e:	88 23       	and	r24, r24
    3550:	2c f4       	brge	.+10     	; 0x355c <H_PB_U8_PBReadWhilePressed+0x1b0>
		__ticks = 1;
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	9c 8b       	std	Y+20, r25	; 0x14
    3558:	8b 8b       	std	Y+19, r24	; 0x13
    355a:	3f c0       	rjmp	.+126    	; 0x35da <H_PB_U8_PBReadWhilePressed+0x22e>
	else if (__tmp > 65535)
    355c:	6d 89       	ldd	r22, Y+21	; 0x15
    355e:	7e 89       	ldd	r23, Y+22	; 0x16
    3560:	8f 89       	ldd	r24, Y+23	; 0x17
    3562:	98 8d       	ldd	r25, Y+24	; 0x18
    3564:	20 e0       	ldi	r18, 0x00	; 0
    3566:	3f ef       	ldi	r19, 0xFF	; 255
    3568:	4f e7       	ldi	r20, 0x7F	; 127
    356a:	57 e4       	ldi	r21, 0x47	; 71
    356c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3570:	18 16       	cp	r1, r24
    3572:	4c f5       	brge	.+82     	; 0x35c6 <H_PB_U8_PBReadWhilePressed+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3574:	69 8d       	ldd	r22, Y+25	; 0x19
    3576:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3578:	8b 8d       	ldd	r24, Y+27	; 0x1b
    357a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e2       	ldi	r20, 0x20	; 32
    3582:	51 e4       	ldi	r21, 0x41	; 65
    3584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	bc 01       	movw	r22, r24
    358e:	cd 01       	movw	r24, r26
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	9c 8b       	std	Y+20, r25	; 0x14
    359a:	8b 8b       	std	Y+19, r24	; 0x13
    359c:	0f c0       	rjmp	.+30     	; 0x35bc <H_PB_U8_PBReadWhilePressed+0x210>
    359e:	80 e9       	ldi	r24, 0x90	; 144
    35a0:	91 e0       	ldi	r25, 0x01	; 1
    35a2:	9a 8b       	std	Y+18, r25	; 0x12
    35a4:	89 8b       	std	Y+17, r24	; 0x11
    35a6:	89 89       	ldd	r24, Y+17	; 0x11
    35a8:	9a 89       	ldd	r25, Y+18	; 0x12
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	f1 f7       	brne	.-4      	; 0x35aa <H_PB_U8_PBReadWhilePressed+0x1fe>
    35ae:	9a 8b       	std	Y+18, r25	; 0x12
    35b0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35b2:	8b 89       	ldd	r24, Y+19	; 0x13
    35b4:	9c 89       	ldd	r25, Y+20	; 0x14
    35b6:	01 97       	sbiw	r24, 0x01	; 1
    35b8:	9c 8b       	std	Y+20, r25	; 0x14
    35ba:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35bc:	8b 89       	ldd	r24, Y+19	; 0x13
    35be:	9c 89       	ldd	r25, Y+20	; 0x14
    35c0:	00 97       	sbiw	r24, 0x00	; 0
    35c2:	69 f7       	brne	.-38     	; 0x359e <H_PB_U8_PBReadWhilePressed+0x1f2>
    35c4:	14 c0       	rjmp	.+40     	; 0x35ee <H_PB_U8_PBReadWhilePressed+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35c6:	6d 89       	ldd	r22, Y+21	; 0x15
    35c8:	7e 89       	ldd	r23, Y+22	; 0x16
    35ca:	8f 89       	ldd	r24, Y+23	; 0x17
    35cc:	98 8d       	ldd	r25, Y+24	; 0x18
    35ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	9c 8b       	std	Y+20, r25	; 0x14
    35d8:	8b 8b       	std	Y+19, r24	; 0x13
    35da:	8b 89       	ldd	r24, Y+19	; 0x13
    35dc:	9c 89       	ldd	r25, Y+20	; 0x14
    35de:	98 8b       	std	Y+16, r25	; 0x10
    35e0:	8f 87       	std	Y+15, r24	; 0x0f
    35e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    35e4:	98 89       	ldd	r25, Y+16	; 0x10
    35e6:	01 97       	sbiw	r24, 0x01	; 1
    35e8:	f1 f7       	brne	.-4      	; 0x35e6 <H_PB_U8_PBReadWhilePressed+0x23a>
    35ea:	98 8b       	std	Y+16, r25	; 0x10
    35ec:	8f 87       	std	Y+15, r24	; 0x0f
		{
		_delay_ms(PB_DEBOUNCING_TIME);
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    35ee:	8e e2       	ldi	r24, 0x2E	; 46
    35f0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    35f4:	81 30       	cpi	r24, 0x01	; 1
    35f6:	09 f0       	breq	.+2      	; 0x35fa <H_PB_U8_PBReadWhilePressed+0x24e>
    35f8:	8d c0       	rjmp	.+282    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
		{
			while(M_DIO_U8_GetPinValue(PUSH_BUTTON1_PIN) == PRESSED)
    35fa:	8e e2       	ldi	r24, 0x2E	; 46
    35fc:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    3600:	81 30       	cpi	r24, 0x01	; 1
    3602:	09 f0       	breq	.+2      	; 0x3606 <H_PB_U8_PBReadWhilePressed+0x25a>
    3604:	87 c0       	rjmp	.+270    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
			{
			Local_U8_Reading = PRESSED;
    3606:	81 e0       	ldi	r24, 0x01	; 1
    3608:	8b a7       	std	Y+43, r24	; 0x2b
    360a:	84 c0       	rjmp	.+264    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
			}
		}
		}
		break;
	case PB2:
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    360c:	8a e2       	ldi	r24, 0x2A	; 42
    360e:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    3612:	81 30       	cpi	r24, 0x01	; 1
    3614:	09 f0       	breq	.+2      	; 0x3618 <H_PB_U8_PBReadWhilePressed+0x26c>
    3616:	7e c0       	rjmp	.+252    	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	a2 e0       	ldi	r26, 0x02	; 2
    361e:	b3 e4       	ldi	r27, 0x43	; 67
    3620:	8b 87       	std	Y+11, r24	; 0x0b
    3622:	9c 87       	std	Y+12, r25	; 0x0c
    3624:	ad 87       	std	Y+13, r26	; 0x0d
    3626:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3628:	6b 85       	ldd	r22, Y+11	; 0x0b
    362a:	7c 85       	ldd	r23, Y+12	; 0x0c
    362c:	8d 85       	ldd	r24, Y+13	; 0x0d
    362e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3630:	20 e0       	ldi	r18, 0x00	; 0
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	4a e7       	ldi	r20, 0x7A	; 122
    3636:	55 e4       	ldi	r21, 0x45	; 69
    3638:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	8f 83       	std	Y+7, r24	; 0x07
    3642:	98 87       	std	Y+8, r25	; 0x08
    3644:	a9 87       	std	Y+9, r26	; 0x09
    3646:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3648:	6f 81       	ldd	r22, Y+7	; 0x07
    364a:	78 85       	ldd	r23, Y+8	; 0x08
    364c:	89 85       	ldd	r24, Y+9	; 0x09
    364e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3650:	20 e0       	ldi	r18, 0x00	; 0
    3652:	30 e0       	ldi	r19, 0x00	; 0
    3654:	40 e8       	ldi	r20, 0x80	; 128
    3656:	5f e3       	ldi	r21, 0x3F	; 63
    3658:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    365c:	88 23       	and	r24, r24
    365e:	2c f4       	brge	.+10     	; 0x366a <H_PB_U8_PBReadWhilePressed+0x2be>
		__ticks = 1;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	90 e0       	ldi	r25, 0x00	; 0
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
    3668:	3f c0       	rjmp	.+126    	; 0x36e8 <H_PB_U8_PBReadWhilePressed+0x33c>
	else if (__tmp > 65535)
    366a:	6f 81       	ldd	r22, Y+7	; 0x07
    366c:	78 85       	ldd	r23, Y+8	; 0x08
    366e:	89 85       	ldd	r24, Y+9	; 0x09
    3670:	9a 85       	ldd	r25, Y+10	; 0x0a
    3672:	20 e0       	ldi	r18, 0x00	; 0
    3674:	3f ef       	ldi	r19, 0xFF	; 255
    3676:	4f e7       	ldi	r20, 0x7F	; 127
    3678:	57 e4       	ldi	r21, 0x47	; 71
    367a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    367e:	18 16       	cp	r1, r24
    3680:	4c f5       	brge	.+82     	; 0x36d4 <H_PB_U8_PBReadWhilePressed+0x328>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3682:	6b 85       	ldd	r22, Y+11	; 0x0b
    3684:	7c 85       	ldd	r23, Y+12	; 0x0c
    3686:	8d 85       	ldd	r24, Y+13	; 0x0d
    3688:	9e 85       	ldd	r25, Y+14	; 0x0e
    368a:	20 e0       	ldi	r18, 0x00	; 0
    368c:	30 e0       	ldi	r19, 0x00	; 0
    368e:	40 e2       	ldi	r20, 0x20	; 32
    3690:	51 e4       	ldi	r21, 0x41	; 65
    3692:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3696:	dc 01       	movw	r26, r24
    3698:	cb 01       	movw	r24, r22
    369a:	bc 01       	movw	r22, r24
    369c:	cd 01       	movw	r24, r26
    369e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22
    36a6:	9e 83       	std	Y+6, r25	; 0x06
    36a8:	8d 83       	std	Y+5, r24	; 0x05
    36aa:	0f c0       	rjmp	.+30     	; 0x36ca <H_PB_U8_PBReadWhilePressed+0x31e>
    36ac:	80 e9       	ldi	r24, 0x90	; 144
    36ae:	91 e0       	ldi	r25, 0x01	; 1
    36b0:	9c 83       	std	Y+4, r25	; 0x04
    36b2:	8b 83       	std	Y+3, r24	; 0x03
    36b4:	8b 81       	ldd	r24, Y+3	; 0x03
    36b6:	9c 81       	ldd	r25, Y+4	; 0x04
    36b8:	01 97       	sbiw	r24, 0x01	; 1
    36ba:	f1 f7       	brne	.-4      	; 0x36b8 <H_PB_U8_PBReadWhilePressed+0x30c>
    36bc:	9c 83       	std	Y+4, r25	; 0x04
    36be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36c0:	8d 81       	ldd	r24, Y+5	; 0x05
    36c2:	9e 81       	ldd	r25, Y+6	; 0x06
    36c4:	01 97       	sbiw	r24, 0x01	; 1
    36c6:	9e 83       	std	Y+6, r25	; 0x06
    36c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ca:	8d 81       	ldd	r24, Y+5	; 0x05
    36cc:	9e 81       	ldd	r25, Y+6	; 0x06
    36ce:	00 97       	sbiw	r24, 0x00	; 0
    36d0:	69 f7       	brne	.-38     	; 0x36ac <H_PB_U8_PBReadWhilePressed+0x300>
    36d2:	14 c0       	rjmp	.+40     	; 0x36fc <H_PB_U8_PBReadWhilePressed+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36d4:	6f 81       	ldd	r22, Y+7	; 0x07
    36d6:	78 85       	ldd	r23, Y+8	; 0x08
    36d8:	89 85       	ldd	r24, Y+9	; 0x09
    36da:	9a 85       	ldd	r25, Y+10	; 0x0a
    36dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e0:	dc 01       	movw	r26, r24
    36e2:	cb 01       	movw	r24, r22
    36e4:	9e 83       	std	Y+6, r25	; 0x06
    36e6:	8d 83       	std	Y+5, r24	; 0x05
    36e8:	8d 81       	ldd	r24, Y+5	; 0x05
    36ea:	9e 81       	ldd	r25, Y+6	; 0x06
    36ec:	9a 83       	std	Y+2, r25	; 0x02
    36ee:	89 83       	std	Y+1, r24	; 0x01
    36f0:	89 81       	ldd	r24, Y+1	; 0x01
    36f2:	9a 81       	ldd	r25, Y+2	; 0x02
    36f4:	01 97       	sbiw	r24, 0x01	; 1
    36f6:	f1 f7       	brne	.-4      	; 0x36f4 <H_PB_U8_PBReadWhilePressed+0x348>
    36f8:	9a 83       	std	Y+2, r25	; 0x02
    36fa:	89 83       	std	Y+1, r24	; 0x01
		{
		_delay_ms(PB_DEBOUNCING_TIME);
		if(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    36fc:	8a e2       	ldi	r24, 0x2A	; 42
    36fe:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    3702:	81 30       	cpi	r24, 0x01	; 1
    3704:	39 f4       	brne	.+14     	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
		{
			while(M_DIO_U8_GetPinValue(PUSH_BUTTON2_PIN) == PRESSED)
    3706:	8a e2       	ldi	r24, 0x2A	; 42
    3708:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    370c:	81 30       	cpi	r24, 0x01	; 1
    370e:	11 f4       	brne	.+4      	; 0x3714 <H_PB_U8_PBReadWhilePressed+0x368>
			{
			Local_U8_Reading = PRESSED;
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	8b a7       	std	Y+43, r24	; 0x2b
		}
		break;
	default :
		break;
	}
	return Local_U8_Reading;
    3714:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    3716:	ae 96       	adiw	r28, 0x2e	; 46
    3718:	0f b6       	in	r0, 0x3f	; 63
    371a:	f8 94       	cli
    371c:	de bf       	out	0x3e, r29	; 62
    371e:	0f be       	out	0x3f, r0	; 63
    3720:	cd bf       	out	0x3d, r28	; 61
    3722:	cf 91       	pop	r28
    3724:	df 91       	pop	r29
    3726:	08 95       	ret

00003728 <H_LED_Void_LedInit>:
 */

#include "LED_Interface.h"

void H_LED_Void_LedInit(u8 Copy_U8_LED)
{
    3728:	df 93       	push	r29
    372a:	cf 93       	push	r28
    372c:	00 d0       	rcall	.+0      	; 0x372e <H_LED_Void_LedInit+0x6>
    372e:	0f 92       	push	r0
    3730:	cd b7       	in	r28, 0x3d	; 61
    3732:	de b7       	in	r29, 0x3e	; 62
    3734:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_LED)
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	28 2f       	mov	r18, r24
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	3b 83       	std	Y+3, r19	; 0x03
    373e:	2a 83       	std	Y+2, r18	; 0x02
    3740:	8a 81       	ldd	r24, Y+2	; 0x02
    3742:	9b 81       	ldd	r25, Y+3	; 0x03
    3744:	81 30       	cpi	r24, 0x01	; 1
    3746:	91 05       	cpc	r25, r1
    3748:	71 f0       	breq	.+28     	; 0x3766 <H_LED_Void_LedInit+0x3e>
    374a:	2a 81       	ldd	r18, Y+2	; 0x02
    374c:	3b 81       	ldd	r19, Y+3	; 0x03
    374e:	22 30       	cpi	r18, 0x02	; 2
    3750:	31 05       	cpc	r19, r1
    3752:	71 f0       	breq	.+28     	; 0x3770 <H_LED_Void_LedInit+0x48>
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	9b 81       	ldd	r25, Y+3	; 0x03
    3758:	00 97       	sbiw	r24, 0x00	; 0
    375a:	71 f4       	brne	.+28     	; 0x3778 <H_LED_Void_LedInit+0x50>
	{
	case LED0: M_DIO_Void_SetPinDirection(LED0_PIN,OUTPUT); break;
    375c:	80 e2       	ldi	r24, 0x20	; 32
    375e:	61 e0       	ldi	r22, 0x01	; 1
    3760:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    3764:	09 c0       	rjmp	.+18     	; 0x3778 <H_LED_Void_LedInit+0x50>
	case LED1: M_DIO_Void_SetPinDirection(LED1_PIN,OUTPUT); break;
    3766:	85 e2       	ldi	r24, 0x25	; 37
    3768:	61 e0       	ldi	r22, 0x01	; 1
    376a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
    376e:	04 c0       	rjmp	.+8      	; 0x3778 <H_LED_Void_LedInit+0x50>
	case LED2: M_DIO_Void_SetPinDirection(LED2_PIN,OUTPUT); break;
    3770:	8b e2       	ldi	r24, 0x2B	; 43
    3772:	61 e0       	ldi	r22, 0x01	; 1
    3774:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	default:                                                break;
	}
}
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	0f 90       	pop	r0
    377e:	cf 91       	pop	r28
    3780:	df 91       	pop	r29
    3782:	08 95       	ret

00003784 <H_LED_Void_LedSetOn>:

void H_LED_Void_LedSetOn(u8 Copy_U8_LED)
{
    3784:	df 93       	push	r29
    3786:	cf 93       	push	r28
    3788:	00 d0       	rcall	.+0      	; 0x378a <H_LED_Void_LedSetOn+0x6>
    378a:	0f 92       	push	r0
    378c:	cd b7       	in	r28, 0x3d	; 61
    378e:	de b7       	in	r29, 0x3e	; 62
    3790:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_LED)
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	28 2f       	mov	r18, r24
    3796:	30 e0       	ldi	r19, 0x00	; 0
    3798:	3b 83       	std	Y+3, r19	; 0x03
    379a:	2a 83       	std	Y+2, r18	; 0x02
    379c:	8a 81       	ldd	r24, Y+2	; 0x02
    379e:	9b 81       	ldd	r25, Y+3	; 0x03
    37a0:	81 30       	cpi	r24, 0x01	; 1
    37a2:	91 05       	cpc	r25, r1
    37a4:	71 f0       	breq	.+28     	; 0x37c2 <H_LED_Void_LedSetOn+0x3e>
    37a6:	2a 81       	ldd	r18, Y+2	; 0x02
    37a8:	3b 81       	ldd	r19, Y+3	; 0x03
    37aa:	22 30       	cpi	r18, 0x02	; 2
    37ac:	31 05       	cpc	r19, r1
    37ae:	71 f0       	breq	.+28     	; 0x37cc <H_LED_Void_LedSetOn+0x48>
    37b0:	8a 81       	ldd	r24, Y+2	; 0x02
    37b2:	9b 81       	ldd	r25, Y+3	; 0x03
    37b4:	00 97       	sbiw	r24, 0x00	; 0
    37b6:	71 f4       	brne	.+28     	; 0x37d4 <H_LED_Void_LedSetOn+0x50>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,HIGH); break;
    37b8:	80 e2       	ldi	r24, 0x20	; 32
    37ba:	61 e0       	ldi	r22, 0x01	; 1
    37bc:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    37c0:	09 c0       	rjmp	.+18     	; 0x37d4 <H_LED_Void_LedSetOn+0x50>
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,HIGH); break;
    37c2:	85 e2       	ldi	r24, 0x25	; 37
    37c4:	61 e0       	ldi	r22, 0x01	; 1
    37c6:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    37ca:	04 c0       	rjmp	.+8      	; 0x37d4 <H_LED_Void_LedSetOn+0x50>
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,HIGH); break;
    37cc:	8b e2       	ldi	r24, 0x2B	; 43
    37ce:	61 e0       	ldi	r22, 0x01	; 1
    37d0:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	default:                                          break;
	}
}
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	0f 90       	pop	r0
    37da:	cf 91       	pop	r28
    37dc:	df 91       	pop	r29
    37de:	08 95       	ret

000037e0 <H_LED_Void_LedSetOff>:
void H_LED_Void_LedSetOff(u8 Copy_U8_LED)
{
    37e0:	df 93       	push	r29
    37e2:	cf 93       	push	r28
    37e4:	00 d0       	rcall	.+0      	; 0x37e6 <H_LED_Void_LedSetOff+0x6>
    37e6:	0f 92       	push	r0
    37e8:	cd b7       	in	r28, 0x3d	; 61
    37ea:	de b7       	in	r29, 0x3e	; 62
    37ec:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_LED)
    37ee:	89 81       	ldd	r24, Y+1	; 0x01
    37f0:	28 2f       	mov	r18, r24
    37f2:	30 e0       	ldi	r19, 0x00	; 0
    37f4:	3b 83       	std	Y+3, r19	; 0x03
    37f6:	2a 83       	std	Y+2, r18	; 0x02
    37f8:	8a 81       	ldd	r24, Y+2	; 0x02
    37fa:	9b 81       	ldd	r25, Y+3	; 0x03
    37fc:	81 30       	cpi	r24, 0x01	; 1
    37fe:	91 05       	cpc	r25, r1
    3800:	71 f0       	breq	.+28     	; 0x381e <H_LED_Void_LedSetOff+0x3e>
    3802:	2a 81       	ldd	r18, Y+2	; 0x02
    3804:	3b 81       	ldd	r19, Y+3	; 0x03
    3806:	22 30       	cpi	r18, 0x02	; 2
    3808:	31 05       	cpc	r19, r1
    380a:	71 f0       	breq	.+28     	; 0x3828 <H_LED_Void_LedSetOff+0x48>
    380c:	8a 81       	ldd	r24, Y+2	; 0x02
    380e:	9b 81       	ldd	r25, Y+3	; 0x03
    3810:	00 97       	sbiw	r24, 0x00	; 0
    3812:	71 f4       	brne	.+28     	; 0x3830 <H_LED_Void_LedSetOff+0x50>
	{
	case LED0: M_DIO_Void_SetPinValue(LED0_PIN,LOW); break;
    3814:	80 e2       	ldi	r24, 0x20	; 32
    3816:	60 e0       	ldi	r22, 0x00	; 0
    3818:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    381c:	09 c0       	rjmp	.+18     	; 0x3830 <H_LED_Void_LedSetOff+0x50>
	case LED1: M_DIO_Void_SetPinValue(LED1_PIN,LOW); break;
    381e:	85 e2       	ldi	r24, 0x25	; 37
    3820:	60 e0       	ldi	r22, 0x00	; 0
    3822:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    3826:	04 c0       	rjmp	.+8      	; 0x3830 <H_LED_Void_LedSetOff+0x50>
	case LED2: M_DIO_Void_SetPinValue(LED2_PIN,LOW); break;
    3828:	8b e2       	ldi	r24, 0x2B	; 43
    382a:	60 e0       	ldi	r22, 0x00	; 0
    382c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	default:                                         break;
	}
}
    3830:	0f 90       	pop	r0
    3832:	0f 90       	pop	r0
    3834:	0f 90       	pop	r0
    3836:	cf 91       	pop	r28
    3838:	df 91       	pop	r29
    383a:	08 95       	ret

0000383c <H_LED_Void_LedTog>:
void H_LED_Void_LedTog(u8 Copy_U8_LED)
{
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	00 d0       	rcall	.+0      	; 0x3842 <H_LED_Void_LedTog+0x6>
    3842:	0f 92       	push	r0
    3844:	cd b7       	in	r28, 0x3d	; 61
    3846:	de b7       	in	r29, 0x3e	; 62
    3848:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_LED)
    384a:	89 81       	ldd	r24, Y+1	; 0x01
    384c:	28 2f       	mov	r18, r24
    384e:	30 e0       	ldi	r19, 0x00	; 0
    3850:	3b 83       	std	Y+3, r19	; 0x03
    3852:	2a 83       	std	Y+2, r18	; 0x02
    3854:	8a 81       	ldd	r24, Y+2	; 0x02
    3856:	9b 81       	ldd	r25, Y+3	; 0x03
    3858:	81 30       	cpi	r24, 0x01	; 1
    385a:	91 05       	cpc	r25, r1
    385c:	69 f0       	breq	.+26     	; 0x3878 <H_LED_Void_LedTog+0x3c>
    385e:	2a 81       	ldd	r18, Y+2	; 0x02
    3860:	3b 81       	ldd	r19, Y+3	; 0x03
    3862:	22 30       	cpi	r18, 0x02	; 2
    3864:	31 05       	cpc	r19, r1
    3866:	61 f0       	breq	.+24     	; 0x3880 <H_LED_Void_LedTog+0x44>
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
    386a:	9b 81       	ldd	r25, Y+3	; 0x03
    386c:	00 97       	sbiw	r24, 0x00	; 0
    386e:	59 f4       	brne	.+22     	; 0x3886 <H_LED_Void_LedTog+0x4a>
	{
	case LED0: M_DIO_Void_TogPin(LED0_PIN); break;
    3870:	80 e2       	ldi	r24, 0x20	; 32
    3872:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <M_DIO_Void_TogPin>
    3876:	07 c0       	rjmp	.+14     	; 0x3886 <H_LED_Void_LedTog+0x4a>
	case LED1: M_DIO_Void_TogPin(LED1_PIN); break;
    3878:	85 e2       	ldi	r24, 0x25	; 37
    387a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <M_DIO_Void_TogPin>
    387e:	03 c0       	rjmp	.+6      	; 0x3886 <H_LED_Void_LedTog+0x4a>
	case LED2: M_DIO_Void_TogPin(LED2_PIN); break;
    3880:	8b e2       	ldi	r24, 0x2B	; 43
    3882:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <M_DIO_Void_TogPin>
	default:                                break;
	}
}
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	cf 91       	pop	r28
    388e:	df 91       	pop	r29
    3890:	08 95       	ret

00003892 <H_LCD_Void_LCDInit>:

#include "LCD_Interface.h"
#include "LCD_Private.h"

void H_LCD_Void_LCDInit(void)
{
    3892:	df 93       	push	r29
    3894:	cf 93       	push	r28
    3896:	cd b7       	in	r28, 0x3d	; 61
    3898:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(LCD_8_BIT_MODE);
	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinDirection(LCD_D4_PIN,OUTPUT);
    389a:	88 e1       	ldi	r24, 0x18	; 24
    389c:	61 e0       	ldi	r22, 0x01	; 1
    389e:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D5_PIN,OUTPUT);
    38a2:	89 e1       	ldi	r24, 0x19	; 25
    38a4:	61 e0       	ldi	r22, 0x01	; 1
    38a6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D6_PIN,OUTPUT);
    38aa:	8a e1       	ldi	r24, 0x1A	; 26
    38ac:	61 e0       	ldi	r22, 0x01	; 1
    38ae:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_D7_PIN,OUTPUT);
    38b2:	8b e1       	ldi	r24, 0x1B	; 27
    38b4:	61 e0       	ldi	r22, 0x01	; 1
    38b6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RS_PIN,OUTPUT);
    38ba:	85 e1       	ldi	r24, 0x15	; 21
    38bc:	61 e0       	ldi	r22, 0x01	; 1
    38be:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_EN_PIN,OUTPUT);
    38c2:	87 e1       	ldi	r24, 0x17	; 23
    38c4:	61 e0       	ldi	r22, 0x01	; 1
    38c6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(LCD_RW_PIN,OUTPUT);
    38ca:	86 e1       	ldi	r24, 0x16	; 22
    38cc:	61 e0       	ldi	r22, 0x01	; 1
    38ce:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinValue(LCD_RW_PIN,LOW);
    38d2:	86 e1       	ldi	r24, 0x16	; 22
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>

	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_1);
    38da:	83 e3       	ldi	r24, 0x33	; 51
    38dc:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_2);
    38e0:	82 e3       	ldi	r24, 0x32	; 50
    38e2:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_4_BIT_MODE_3);
    38e6:	88 e2       	ldi	r24, 0x28	; 40
    38e8:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <H_LCD_Void_LCDWriteCommand>

	H_LCD_Void_LCDWriteCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    38ec:	8c e0       	ldi	r24, 0x0C	; 12
    38ee:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <H_LCD_Void_LCDWriteCommand>
	H_LCD_Void_LCDWriteCommand(LCD_RETURN_HOME);
    38f8:	82 e0       	ldi	r24, 0x02	; 2
    38fa:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <H_LCD_Void_LCDWriteCommand>
#endif
}
    38fe:	cf 91       	pop	r28
    3900:	df 91       	pop	r29
    3902:	08 95       	ret

00003904 <H_LCD_Void_LCDWriteCharacter>:

void H_LCD_Void_LCDWriteCharacter(u8 Copy_U8_Character)
{
    3904:	df 93       	push	r29
    3906:	cf 93       	push	r28
    3908:	cd b7       	in	r28, 0x3d	; 61
    390a:	de b7       	in	r29, 0x3e	; 62
    390c:	e9 97       	sbiw	r28, 0x39	; 57
    390e:	0f b6       	in	r0, 0x3f	; 63
    3910:	f8 94       	cli
    3912:	de bf       	out	0x3e, r29	; 62
    3914:	0f be       	out	0x3f, r0	; 63
    3916:	cd bf       	out	0x3d, r28	; 61
    3918:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,HIGH);
    391a:	85 e1       	ldi	r24, 0x15	; 21
    391c:	61 e0       	ldi	r22, 0x01	; 1
    391e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Character >> 4);
    3922:	89 ad       	ldd	r24, Y+57	; 0x39
    3924:	82 95       	swap	r24
    3926:	8f 70       	andi	r24, 0x0F	; 15
    3928:	0e 94 2d 22 	call	0x445a	; 0x445a <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    392c:	87 e1       	ldi	r24, 0x17	; 23
    392e:	61 e0       	ldi	r22, 0x01	; 1
    3930:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	a0 e8       	ldi	r26, 0x80	; 128
    393a:	bf e3       	ldi	r27, 0x3F	; 63
    393c:	8d ab       	std	Y+53, r24	; 0x35
    393e:	9e ab       	std	Y+54, r25	; 0x36
    3940:	af ab       	std	Y+55, r26	; 0x37
    3942:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3944:	6d a9       	ldd	r22, Y+53	; 0x35
    3946:	7e a9       	ldd	r23, Y+54	; 0x36
    3948:	8f a9       	ldd	r24, Y+55	; 0x37
    394a:	98 ad       	ldd	r25, Y+56	; 0x38
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	30 e0       	ldi	r19, 0x00	; 0
    3950:	4a e7       	ldi	r20, 0x7A	; 122
    3952:	55 e4       	ldi	r21, 0x45	; 69
    3954:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	89 ab       	std	Y+49, r24	; 0x31
    395e:	9a ab       	std	Y+50, r25	; 0x32
    3960:	ab ab       	std	Y+51, r26	; 0x33
    3962:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3964:	69 a9       	ldd	r22, Y+49	; 0x31
    3966:	7a a9       	ldd	r23, Y+50	; 0x32
    3968:	8b a9       	ldd	r24, Y+51	; 0x33
    396a:	9c a9       	ldd	r25, Y+52	; 0x34
    396c:	20 e0       	ldi	r18, 0x00	; 0
    396e:	30 e0       	ldi	r19, 0x00	; 0
    3970:	40 e8       	ldi	r20, 0x80	; 128
    3972:	5f e3       	ldi	r21, 0x3F	; 63
    3974:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3978:	88 23       	and	r24, r24
    397a:	2c f4       	brge	.+10     	; 0x3986 <H_LCD_Void_LCDWriteCharacter+0x82>
		__ticks = 1;
    397c:	81 e0       	ldi	r24, 0x01	; 1
    397e:	90 e0       	ldi	r25, 0x00	; 0
    3980:	98 ab       	std	Y+48, r25	; 0x30
    3982:	8f a7       	std	Y+47, r24	; 0x2f
    3984:	3f c0       	rjmp	.+126    	; 0x3a04 <H_LCD_Void_LCDWriteCharacter+0x100>
	else if (__tmp > 65535)
    3986:	69 a9       	ldd	r22, Y+49	; 0x31
    3988:	7a a9       	ldd	r23, Y+50	; 0x32
    398a:	8b a9       	ldd	r24, Y+51	; 0x33
    398c:	9c a9       	ldd	r25, Y+52	; 0x34
    398e:	20 e0       	ldi	r18, 0x00	; 0
    3990:	3f ef       	ldi	r19, 0xFF	; 255
    3992:	4f e7       	ldi	r20, 0x7F	; 127
    3994:	57 e4       	ldi	r21, 0x47	; 71
    3996:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    399a:	18 16       	cp	r1, r24
    399c:	4c f5       	brge	.+82     	; 0x39f0 <H_LCD_Void_LCDWriteCharacter+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    399e:	6d a9       	ldd	r22, Y+53	; 0x35
    39a0:	7e a9       	ldd	r23, Y+54	; 0x36
    39a2:	8f a9       	ldd	r24, Y+55	; 0x37
    39a4:	98 ad       	ldd	r25, Y+56	; 0x38
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	40 e2       	ldi	r20, 0x20	; 32
    39ac:	51 e4       	ldi	r21, 0x41	; 65
    39ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	bc 01       	movw	r22, r24
    39b8:	cd 01       	movw	r24, r26
    39ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39be:	dc 01       	movw	r26, r24
    39c0:	cb 01       	movw	r24, r22
    39c2:	98 ab       	std	Y+48, r25	; 0x30
    39c4:	8f a7       	std	Y+47, r24	; 0x2f
    39c6:	0f c0       	rjmp	.+30     	; 0x39e6 <H_LCD_Void_LCDWriteCharacter+0xe2>
    39c8:	80 e9       	ldi	r24, 0x90	; 144
    39ca:	91 e0       	ldi	r25, 0x01	; 1
    39cc:	9e a7       	std	Y+46, r25	; 0x2e
    39ce:	8d a7       	std	Y+45, r24	; 0x2d
    39d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    39d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    39d4:	01 97       	sbiw	r24, 0x01	; 1
    39d6:	f1 f7       	brne	.-4      	; 0x39d4 <H_LCD_Void_LCDWriteCharacter+0xd0>
    39d8:	9e a7       	std	Y+46, r25	; 0x2e
    39da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    39de:	98 a9       	ldd	r25, Y+48	; 0x30
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	98 ab       	std	Y+48, r25	; 0x30
    39e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    39e8:	98 a9       	ldd	r25, Y+48	; 0x30
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	69 f7       	brne	.-38     	; 0x39c8 <H_LCD_Void_LCDWriteCharacter+0xc4>
    39ee:	14 c0       	rjmp	.+40     	; 0x3a18 <H_LCD_Void_LCDWriteCharacter+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f0:	69 a9       	ldd	r22, Y+49	; 0x31
    39f2:	7a a9       	ldd	r23, Y+50	; 0x32
    39f4:	8b a9       	ldd	r24, Y+51	; 0x33
    39f6:	9c a9       	ldd	r25, Y+52	; 0x34
    39f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	98 ab       	std	Y+48, r25	; 0x30
    3a02:	8f a7       	std	Y+47, r24	; 0x2f
    3a04:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a06:	98 a9       	ldd	r25, Y+48	; 0x30
    3a08:	9c a7       	std	Y+44, r25	; 0x2c
    3a0a:	8b a7       	std	Y+43, r24	; 0x2b
    3a0c:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a0e:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <H_LCD_Void_LCDWriteCharacter+0x10c>
    3a14:	9c a7       	std	Y+44, r25	; 0x2c
    3a16:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    3a18:	87 e1       	ldi	r24, 0x17	; 23
    3a1a:	60 e0       	ldi	r22, 0x00	; 0
    3a1c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    3a20:	80 e0       	ldi	r24, 0x00	; 0
    3a22:	90 e0       	ldi	r25, 0x00	; 0
    3a24:	a0 e8       	ldi	r26, 0x80	; 128
    3a26:	bf e3       	ldi	r27, 0x3F	; 63
    3a28:	8f a3       	std	Y+39, r24	; 0x27
    3a2a:	98 a7       	std	Y+40, r25	; 0x28
    3a2c:	a9 a7       	std	Y+41, r26	; 0x29
    3a2e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a30:	6f a1       	ldd	r22, Y+39	; 0x27
    3a32:	78 a5       	ldd	r23, Y+40	; 0x28
    3a34:	89 a5       	ldd	r24, Y+41	; 0x29
    3a36:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a38:	20 e0       	ldi	r18, 0x00	; 0
    3a3a:	30 e0       	ldi	r19, 0x00	; 0
    3a3c:	4a e7       	ldi	r20, 0x7A	; 122
    3a3e:	55 e4       	ldi	r21, 0x45	; 69
    3a40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a44:	dc 01       	movw	r26, r24
    3a46:	cb 01       	movw	r24, r22
    3a48:	8b a3       	std	Y+35, r24	; 0x23
    3a4a:	9c a3       	std	Y+36, r25	; 0x24
    3a4c:	ad a3       	std	Y+37, r26	; 0x25
    3a4e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3a50:	6b a1       	ldd	r22, Y+35	; 0x23
    3a52:	7c a1       	ldd	r23, Y+36	; 0x24
    3a54:	8d a1       	ldd	r24, Y+37	; 0x25
    3a56:	9e a1       	ldd	r25, Y+38	; 0x26
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e8       	ldi	r20, 0x80	; 128
    3a5e:	5f e3       	ldi	r21, 0x3F	; 63
    3a60:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a64:	88 23       	and	r24, r24
    3a66:	2c f4       	brge	.+10     	; 0x3a72 <H_LCD_Void_LCDWriteCharacter+0x16e>
		__ticks = 1;
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	9a a3       	std	Y+34, r25	; 0x22
    3a6e:	89 a3       	std	Y+33, r24	; 0x21
    3a70:	3f c0       	rjmp	.+126    	; 0x3af0 <H_LCD_Void_LCDWriteCharacter+0x1ec>
	else if (__tmp > 65535)
    3a72:	6b a1       	ldd	r22, Y+35	; 0x23
    3a74:	7c a1       	ldd	r23, Y+36	; 0x24
    3a76:	8d a1       	ldd	r24, Y+37	; 0x25
    3a78:	9e a1       	ldd	r25, Y+38	; 0x26
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	3f ef       	ldi	r19, 0xFF	; 255
    3a7e:	4f e7       	ldi	r20, 0x7F	; 127
    3a80:	57 e4       	ldi	r21, 0x47	; 71
    3a82:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a86:	18 16       	cp	r1, r24
    3a88:	4c f5       	brge	.+82     	; 0x3adc <H_LCD_Void_LCDWriteCharacter+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a8a:	6f a1       	ldd	r22, Y+39	; 0x27
    3a8c:	78 a5       	ldd	r23, Y+40	; 0x28
    3a8e:	89 a5       	ldd	r24, Y+41	; 0x29
    3a90:	9a a5       	ldd	r25, Y+42	; 0x2a
    3a92:	20 e0       	ldi	r18, 0x00	; 0
    3a94:	30 e0       	ldi	r19, 0x00	; 0
    3a96:	40 e2       	ldi	r20, 0x20	; 32
    3a98:	51 e4       	ldi	r21, 0x41	; 65
    3a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a9e:	dc 01       	movw	r26, r24
    3aa0:	cb 01       	movw	r24, r22
    3aa2:	bc 01       	movw	r22, r24
    3aa4:	cd 01       	movw	r24, r26
    3aa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3aaa:	dc 01       	movw	r26, r24
    3aac:	cb 01       	movw	r24, r22
    3aae:	9a a3       	std	Y+34, r25	; 0x22
    3ab0:	89 a3       	std	Y+33, r24	; 0x21
    3ab2:	0f c0       	rjmp	.+30     	; 0x3ad2 <H_LCD_Void_LCDWriteCharacter+0x1ce>
    3ab4:	80 e9       	ldi	r24, 0x90	; 144
    3ab6:	91 e0       	ldi	r25, 0x01	; 1
    3ab8:	98 a3       	std	Y+32, r25	; 0x20
    3aba:	8f 8f       	std	Y+31, r24	; 0x1f
    3abc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3abe:	98 a1       	ldd	r25, Y+32	; 0x20
    3ac0:	01 97       	sbiw	r24, 0x01	; 1
    3ac2:	f1 f7       	brne	.-4      	; 0x3ac0 <H_LCD_Void_LCDWriteCharacter+0x1bc>
    3ac4:	98 a3       	std	Y+32, r25	; 0x20
    3ac6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ac8:	89 a1       	ldd	r24, Y+33	; 0x21
    3aca:	9a a1       	ldd	r25, Y+34	; 0x22
    3acc:	01 97       	sbiw	r24, 0x01	; 1
    3ace:	9a a3       	std	Y+34, r25	; 0x22
    3ad0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ad2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ad4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	69 f7       	brne	.-38     	; 0x3ab4 <H_LCD_Void_LCDWriteCharacter+0x1b0>
    3ada:	14 c0       	rjmp	.+40     	; 0x3b04 <H_LCD_Void_LCDWriteCharacter+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3adc:	6b a1       	ldd	r22, Y+35	; 0x23
    3ade:	7c a1       	ldd	r23, Y+36	; 0x24
    3ae0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ae2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ae4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ae8:	dc 01       	movw	r26, r24
    3aea:	cb 01       	movw	r24, r22
    3aec:	9a a3       	std	Y+34, r25	; 0x22
    3aee:	89 a3       	std	Y+33, r24	; 0x21
    3af0:	89 a1       	ldd	r24, Y+33	; 0x21
    3af2:	9a a1       	ldd	r25, Y+34	; 0x22
    3af4:	9e 8f       	std	Y+30, r25	; 0x1e
    3af6:	8d 8f       	std	Y+29, r24	; 0x1d
    3af8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3afa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3afc:	01 97       	sbiw	r24, 0x01	; 1
    3afe:	f1 f7       	brne	.-4      	; 0x3afc <H_LCD_Void_LCDWriteCharacter+0x1f8>
    3b00:	9e 8f       	std	Y+30, r25	; 0x1e
    3b02:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Character);
    3b04:	89 ad       	ldd	r24, Y+57	; 0x39
    3b06:	0e 94 2d 22 	call	0x445a	; 0x445a <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    3b0a:	87 e1       	ldi	r24, 0x17	; 23
    3b0c:	61 e0       	ldi	r22, 0x01	; 1
    3b0e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	a0 e8       	ldi	r26, 0x80	; 128
    3b18:	bf e3       	ldi	r27, 0x3F	; 63
    3b1a:	89 8f       	std	Y+25, r24	; 0x19
    3b1c:	9a 8f       	std	Y+26, r25	; 0x1a
    3b1e:	ab 8f       	std	Y+27, r26	; 0x1b
    3b20:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b22:	69 8d       	ldd	r22, Y+25	; 0x19
    3b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b2a:	20 e0       	ldi	r18, 0x00	; 0
    3b2c:	30 e0       	ldi	r19, 0x00	; 0
    3b2e:	4a e7       	ldi	r20, 0x7A	; 122
    3b30:	55 e4       	ldi	r21, 0x45	; 69
    3b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	8d 8b       	std	Y+21, r24	; 0x15
    3b3c:	9e 8b       	std	Y+22, r25	; 0x16
    3b3e:	af 8b       	std	Y+23, r26	; 0x17
    3b40:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b42:	6d 89       	ldd	r22, Y+21	; 0x15
    3b44:	7e 89       	ldd	r23, Y+22	; 0x16
    3b46:	8f 89       	ldd	r24, Y+23	; 0x17
    3b48:	98 8d       	ldd	r25, Y+24	; 0x18
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	30 e0       	ldi	r19, 0x00	; 0
    3b4e:	40 e8       	ldi	r20, 0x80	; 128
    3b50:	5f e3       	ldi	r21, 0x3F	; 63
    3b52:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b56:	88 23       	and	r24, r24
    3b58:	2c f4       	brge	.+10     	; 0x3b64 <H_LCD_Void_LCDWriteCharacter+0x260>
		__ticks = 1;
    3b5a:	81 e0       	ldi	r24, 0x01	; 1
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	9c 8b       	std	Y+20, r25	; 0x14
    3b60:	8b 8b       	std	Y+19, r24	; 0x13
    3b62:	3f c0       	rjmp	.+126    	; 0x3be2 <H_LCD_Void_LCDWriteCharacter+0x2de>
	else if (__tmp > 65535)
    3b64:	6d 89       	ldd	r22, Y+21	; 0x15
    3b66:	7e 89       	ldd	r23, Y+22	; 0x16
    3b68:	8f 89       	ldd	r24, Y+23	; 0x17
    3b6a:	98 8d       	ldd	r25, Y+24	; 0x18
    3b6c:	20 e0       	ldi	r18, 0x00	; 0
    3b6e:	3f ef       	ldi	r19, 0xFF	; 255
    3b70:	4f e7       	ldi	r20, 0x7F	; 127
    3b72:	57 e4       	ldi	r21, 0x47	; 71
    3b74:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b78:	18 16       	cp	r1, r24
    3b7a:	4c f5       	brge	.+82     	; 0x3bce <H_LCD_Void_LCDWriteCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b7c:	69 8d       	ldd	r22, Y+25	; 0x19
    3b7e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b84:	20 e0       	ldi	r18, 0x00	; 0
    3b86:	30 e0       	ldi	r19, 0x00	; 0
    3b88:	40 e2       	ldi	r20, 0x20	; 32
    3b8a:	51 e4       	ldi	r21, 0x41	; 65
    3b8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b90:	dc 01       	movw	r26, r24
    3b92:	cb 01       	movw	r24, r22
    3b94:	bc 01       	movw	r22, r24
    3b96:	cd 01       	movw	r24, r26
    3b98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b9c:	dc 01       	movw	r26, r24
    3b9e:	cb 01       	movw	r24, r22
    3ba0:	9c 8b       	std	Y+20, r25	; 0x14
    3ba2:	8b 8b       	std	Y+19, r24	; 0x13
    3ba4:	0f c0       	rjmp	.+30     	; 0x3bc4 <H_LCD_Void_LCDWriteCharacter+0x2c0>
    3ba6:	80 e9       	ldi	r24, 0x90	; 144
    3ba8:	91 e0       	ldi	r25, 0x01	; 1
    3baa:	9a 8b       	std	Y+18, r25	; 0x12
    3bac:	89 8b       	std	Y+17, r24	; 0x11
    3bae:	89 89       	ldd	r24, Y+17	; 0x11
    3bb0:	9a 89       	ldd	r25, Y+18	; 0x12
    3bb2:	01 97       	sbiw	r24, 0x01	; 1
    3bb4:	f1 f7       	brne	.-4      	; 0x3bb2 <H_LCD_Void_LCDWriteCharacter+0x2ae>
    3bb6:	9a 8b       	std	Y+18, r25	; 0x12
    3bb8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bba:	8b 89       	ldd	r24, Y+19	; 0x13
    3bbc:	9c 89       	ldd	r25, Y+20	; 0x14
    3bbe:	01 97       	sbiw	r24, 0x01	; 1
    3bc0:	9c 8b       	std	Y+20, r25	; 0x14
    3bc2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    3bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    3bc8:	00 97       	sbiw	r24, 0x00	; 0
    3bca:	69 f7       	brne	.-38     	; 0x3ba6 <H_LCD_Void_LCDWriteCharacter+0x2a2>
    3bcc:	14 c0       	rjmp	.+40     	; 0x3bf6 <H_LCD_Void_LCDWriteCharacter+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bce:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    3bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    3bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    3bd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	cb 01       	movw	r24, r22
    3bde:	9c 8b       	std	Y+20, r25	; 0x14
    3be0:	8b 8b       	std	Y+19, r24	; 0x13
    3be2:	8b 89       	ldd	r24, Y+19	; 0x13
    3be4:	9c 89       	ldd	r25, Y+20	; 0x14
    3be6:	98 8b       	std	Y+16, r25	; 0x10
    3be8:	8f 87       	std	Y+15, r24	; 0x0f
    3bea:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bec:	98 89       	ldd	r25, Y+16	; 0x10
    3bee:	01 97       	sbiw	r24, 0x01	; 1
    3bf0:	f1 f7       	brne	.-4      	; 0x3bee <H_LCD_Void_LCDWriteCharacter+0x2ea>
    3bf2:	98 8b       	std	Y+16, r25	; 0x10
    3bf4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    3bf6:	87 e1       	ldi	r24, 0x17	; 23
    3bf8:	60 e0       	ldi	r22, 0x00	; 0
    3bfa:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	a0 e8       	ldi	r26, 0x80	; 128
    3c04:	bf e3       	ldi	r27, 0x3F	; 63
    3c06:	8b 87       	std	Y+11, r24	; 0x0b
    3c08:	9c 87       	std	Y+12, r25	; 0x0c
    3c0a:	ad 87       	std	Y+13, r26	; 0x0d
    3c0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c10:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c12:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c14:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c16:	20 e0       	ldi	r18, 0x00	; 0
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	4a e7       	ldi	r20, 0x7A	; 122
    3c1c:	55 e4       	ldi	r21, 0x45	; 69
    3c1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c22:	dc 01       	movw	r26, r24
    3c24:	cb 01       	movw	r24, r22
    3c26:	8f 83       	std	Y+7, r24	; 0x07
    3c28:	98 87       	std	Y+8, r25	; 0x08
    3c2a:	a9 87       	std	Y+9, r26	; 0x09
    3c2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c2e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c30:	78 85       	ldd	r23, Y+8	; 0x08
    3c32:	89 85       	ldd	r24, Y+9	; 0x09
    3c34:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c36:	20 e0       	ldi	r18, 0x00	; 0
    3c38:	30 e0       	ldi	r19, 0x00	; 0
    3c3a:	40 e8       	ldi	r20, 0x80	; 128
    3c3c:	5f e3       	ldi	r21, 0x3F	; 63
    3c3e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c42:	88 23       	and	r24, r24
    3c44:	2c f4       	brge	.+10     	; 0x3c50 <H_LCD_Void_LCDWriteCharacter+0x34c>
		__ticks = 1;
    3c46:	81 e0       	ldi	r24, 0x01	; 1
    3c48:	90 e0       	ldi	r25, 0x00	; 0
    3c4a:	9e 83       	std	Y+6, r25	; 0x06
    3c4c:	8d 83       	std	Y+5, r24	; 0x05
    3c4e:	3f c0       	rjmp	.+126    	; 0x3cce <H_LCD_Void_LCDWriteCharacter+0x3ca>
	else if (__tmp > 65535)
    3c50:	6f 81       	ldd	r22, Y+7	; 0x07
    3c52:	78 85       	ldd	r23, Y+8	; 0x08
    3c54:	89 85       	ldd	r24, Y+9	; 0x09
    3c56:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c58:	20 e0       	ldi	r18, 0x00	; 0
    3c5a:	3f ef       	ldi	r19, 0xFF	; 255
    3c5c:	4f e7       	ldi	r20, 0x7F	; 127
    3c5e:	57 e4       	ldi	r21, 0x47	; 71
    3c60:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c64:	18 16       	cp	r1, r24
    3c66:	4c f5       	brge	.+82     	; 0x3cba <H_LCD_Void_LCDWriteCharacter+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c68:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	40 e2       	ldi	r20, 0x20	; 32
    3c76:	51 e4       	ldi	r21, 0x41	; 65
    3c78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7c:	dc 01       	movw	r26, r24
    3c7e:	cb 01       	movw	r24, r22
    3c80:	bc 01       	movw	r22, r24
    3c82:	cd 01       	movw	r24, r26
    3c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c88:	dc 01       	movw	r26, r24
    3c8a:	cb 01       	movw	r24, r22
    3c8c:	9e 83       	std	Y+6, r25	; 0x06
    3c8e:	8d 83       	std	Y+5, r24	; 0x05
    3c90:	0f c0       	rjmp	.+30     	; 0x3cb0 <H_LCD_Void_LCDWriteCharacter+0x3ac>
    3c92:	80 e9       	ldi	r24, 0x90	; 144
    3c94:	91 e0       	ldi	r25, 0x01	; 1
    3c96:	9c 83       	std	Y+4, r25	; 0x04
    3c98:	8b 83       	std	Y+3, r24	; 0x03
    3c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c9e:	01 97       	sbiw	r24, 0x01	; 1
    3ca0:	f1 f7       	brne	.-4      	; 0x3c9e <H_LCD_Void_LCDWriteCharacter+0x39a>
    3ca2:	9c 83       	std	Y+4, r25	; 0x04
    3ca4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    3ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    3caa:	01 97       	sbiw	r24, 0x01	; 1
    3cac:	9e 83       	std	Y+6, r25	; 0x06
    3cae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cb4:	00 97       	sbiw	r24, 0x00	; 0
    3cb6:	69 f7       	brne	.-38     	; 0x3c92 <H_LCD_Void_LCDWriteCharacter+0x38e>
    3cb8:	14 c0       	rjmp	.+40     	; 0x3ce2 <H_LCD_Void_LCDWriteCharacter+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cba:	6f 81       	ldd	r22, Y+7	; 0x07
    3cbc:	78 85       	ldd	r23, Y+8	; 0x08
    3cbe:	89 85       	ldd	r24, Y+9	; 0x09
    3cc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc6:	dc 01       	movw	r26, r24
    3cc8:	cb 01       	movw	r24, r22
    3cca:	9e 83       	std	Y+6, r25	; 0x06
    3ccc:	8d 83       	std	Y+5, r24	; 0x05
    3cce:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd2:	9a 83       	std	Y+2, r25	; 0x02
    3cd4:	89 83       	std	Y+1, r24	; 0x01
    3cd6:	89 81       	ldd	r24, Y+1	; 0x01
    3cd8:	9a 81       	ldd	r25, Y+2	; 0x02
    3cda:	01 97       	sbiw	r24, 0x01	; 1
    3cdc:	f1 f7       	brne	.-4      	; 0x3cda <H_LCD_Void_LCDWriteCharacter+0x3d6>
    3cde:	9a 83       	std	Y+2, r25	; 0x02
    3ce0:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(1);
}
    3ce2:	e9 96       	adiw	r28, 0x39	; 57
    3ce4:	0f b6       	in	r0, 0x3f	; 63
    3ce6:	f8 94       	cli
    3ce8:	de bf       	out	0x3e, r29	; 62
    3cea:	0f be       	out	0x3f, r0	; 63
    3cec:	cd bf       	out	0x3d, r28	; 61
    3cee:	cf 91       	pop	r28
    3cf0:	df 91       	pop	r29
    3cf2:	08 95       	ret

00003cf4 <H_LCD_Void_LCDWriteCommand>:
void H_LCD_Void_LCDWriteCommand(u8 Copy_U8_Command)
{
    3cf4:	df 93       	push	r29
    3cf6:	cf 93       	push	r28
    3cf8:	cd b7       	in	r28, 0x3d	; 61
    3cfa:	de b7       	in	r29, 0x3e	; 62
    3cfc:	e9 97       	sbiw	r28, 0x39	; 57
    3cfe:	0f b6       	in	r0, 0x3f	; 63
    3d00:	f8 94       	cli
    3d02:	de bf       	out	0x3e, r29	; 62
    3d04:	0f be       	out	0x3f, r0	; 63
    3d06:	cd bf       	out	0x3d, r28	; 61
    3d08:	89 af       	std	Y+57, r24	; 0x39
	M_DIO_Void_SetPinValue(LCD_RS_PIN,LOW);
    3d0a:	85 e1       	ldi	r24, 0x15	; 21
    3d0c:	60 e0       	ldi	r22, 0x00	; 0
    3d0e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
#elif LCD_MODE   ==   _4_BIT_MODE
	H_LCD_Void_SetLCDPins(Copy_U8_Command >> 4);
    3d12:	89 ad       	ldd	r24, Y+57	; 0x39
    3d14:	82 95       	swap	r24
    3d16:	8f 70       	andi	r24, 0x0F	; 15
    3d18:	0e 94 2d 22 	call	0x445a	; 0x445a <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    3d1c:	87 e1       	ldi	r24, 0x17	; 23
    3d1e:	61 e0       	ldi	r22, 0x01	; 1
    3d20:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    3d24:	80 e0       	ldi	r24, 0x00	; 0
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	a0 e8       	ldi	r26, 0x80	; 128
    3d2a:	bf e3       	ldi	r27, 0x3F	; 63
    3d2c:	8d ab       	std	Y+53, r24	; 0x35
    3d2e:	9e ab       	std	Y+54, r25	; 0x36
    3d30:	af ab       	std	Y+55, r26	; 0x37
    3d32:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d34:	6d a9       	ldd	r22, Y+53	; 0x35
    3d36:	7e a9       	ldd	r23, Y+54	; 0x36
    3d38:	8f a9       	ldd	r24, Y+55	; 0x37
    3d3a:	98 ad       	ldd	r25, Y+56	; 0x38
    3d3c:	20 e0       	ldi	r18, 0x00	; 0
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	4a e7       	ldi	r20, 0x7A	; 122
    3d42:	55 e4       	ldi	r21, 0x45	; 69
    3d44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d48:	dc 01       	movw	r26, r24
    3d4a:	cb 01       	movw	r24, r22
    3d4c:	89 ab       	std	Y+49, r24	; 0x31
    3d4e:	9a ab       	std	Y+50, r25	; 0x32
    3d50:	ab ab       	std	Y+51, r26	; 0x33
    3d52:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3d54:	69 a9       	ldd	r22, Y+49	; 0x31
    3d56:	7a a9       	ldd	r23, Y+50	; 0x32
    3d58:	8b a9       	ldd	r24, Y+51	; 0x33
    3d5a:	9c a9       	ldd	r25, Y+52	; 0x34
    3d5c:	20 e0       	ldi	r18, 0x00	; 0
    3d5e:	30 e0       	ldi	r19, 0x00	; 0
    3d60:	40 e8       	ldi	r20, 0x80	; 128
    3d62:	5f e3       	ldi	r21, 0x3F	; 63
    3d64:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d68:	88 23       	and	r24, r24
    3d6a:	2c f4       	brge	.+10     	; 0x3d76 <H_LCD_Void_LCDWriteCommand+0x82>
		__ticks = 1;
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	98 ab       	std	Y+48, r25	; 0x30
    3d72:	8f a7       	std	Y+47, r24	; 0x2f
    3d74:	3f c0       	rjmp	.+126    	; 0x3df4 <H_LCD_Void_LCDWriteCommand+0x100>
	else if (__tmp > 65535)
    3d76:	69 a9       	ldd	r22, Y+49	; 0x31
    3d78:	7a a9       	ldd	r23, Y+50	; 0x32
    3d7a:	8b a9       	ldd	r24, Y+51	; 0x33
    3d7c:	9c a9       	ldd	r25, Y+52	; 0x34
    3d7e:	20 e0       	ldi	r18, 0x00	; 0
    3d80:	3f ef       	ldi	r19, 0xFF	; 255
    3d82:	4f e7       	ldi	r20, 0x7F	; 127
    3d84:	57 e4       	ldi	r21, 0x47	; 71
    3d86:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d8a:	18 16       	cp	r1, r24
    3d8c:	4c f5       	brge	.+82     	; 0x3de0 <H_LCD_Void_LCDWriteCommand+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d8e:	6d a9       	ldd	r22, Y+53	; 0x35
    3d90:	7e a9       	ldd	r23, Y+54	; 0x36
    3d92:	8f a9       	ldd	r24, Y+55	; 0x37
    3d94:	98 ad       	ldd	r25, Y+56	; 0x38
    3d96:	20 e0       	ldi	r18, 0x00	; 0
    3d98:	30 e0       	ldi	r19, 0x00	; 0
    3d9a:	40 e2       	ldi	r20, 0x20	; 32
    3d9c:	51 e4       	ldi	r21, 0x41	; 65
    3d9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3da2:	dc 01       	movw	r26, r24
    3da4:	cb 01       	movw	r24, r22
    3da6:	bc 01       	movw	r22, r24
    3da8:	cd 01       	movw	r24, r26
    3daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	98 ab       	std	Y+48, r25	; 0x30
    3db4:	8f a7       	std	Y+47, r24	; 0x2f
    3db6:	0f c0       	rjmp	.+30     	; 0x3dd6 <H_LCD_Void_LCDWriteCommand+0xe2>
    3db8:	80 e9       	ldi	r24, 0x90	; 144
    3dba:	91 e0       	ldi	r25, 0x01	; 1
    3dbc:	9e a7       	std	Y+46, r25	; 0x2e
    3dbe:	8d a7       	std	Y+45, r24	; 0x2d
    3dc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    3dc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    3dc4:	01 97       	sbiw	r24, 0x01	; 1
    3dc6:	f1 f7       	brne	.-4      	; 0x3dc4 <H_LCD_Void_LCDWriteCommand+0xd0>
    3dc8:	9e a7       	std	Y+46, r25	; 0x2e
    3dca:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dcc:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dce:	98 a9       	ldd	r25, Y+48	; 0x30
    3dd0:	01 97       	sbiw	r24, 0x01	; 1
    3dd2:	98 ab       	std	Y+48, r25	; 0x30
    3dd4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    3dd8:	98 a9       	ldd	r25, Y+48	; 0x30
    3dda:	00 97       	sbiw	r24, 0x00	; 0
    3ddc:	69 f7       	brne	.-38     	; 0x3db8 <H_LCD_Void_LCDWriteCommand+0xc4>
    3dde:	14 c0       	rjmp	.+40     	; 0x3e08 <H_LCD_Void_LCDWriteCommand+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3de0:	69 a9       	ldd	r22, Y+49	; 0x31
    3de2:	7a a9       	ldd	r23, Y+50	; 0x32
    3de4:	8b a9       	ldd	r24, Y+51	; 0x33
    3de6:	9c a9       	ldd	r25, Y+52	; 0x34
    3de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	98 ab       	std	Y+48, r25	; 0x30
    3df2:	8f a7       	std	Y+47, r24	; 0x2f
    3df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    3df6:	98 a9       	ldd	r25, Y+48	; 0x30
    3df8:	9c a7       	std	Y+44, r25	; 0x2c
    3dfa:	8b a7       	std	Y+43, r24	; 0x2b
    3dfc:	8b a5       	ldd	r24, Y+43	; 0x2b
    3dfe:	9c a5       	ldd	r25, Y+44	; 0x2c
    3e00:	01 97       	sbiw	r24, 0x01	; 1
    3e02:	f1 f7       	brne	.-4      	; 0x3e00 <H_LCD_Void_LCDWriteCommand+0x10c>
    3e04:	9c a7       	std	Y+44, r25	; 0x2c
    3e06:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    3e08:	87 e1       	ldi	r24, 0x17	; 23
    3e0a:	60 e0       	ldi	r22, 0x00	; 0
    3e0c:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	a0 e8       	ldi	r26, 0x80	; 128
    3e16:	bf e3       	ldi	r27, 0x3F	; 63
    3e18:	8f a3       	std	Y+39, r24	; 0x27
    3e1a:	98 a7       	std	Y+40, r25	; 0x28
    3e1c:	a9 a7       	std	Y+41, r26	; 0x29
    3e1e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e20:	6f a1       	ldd	r22, Y+39	; 0x27
    3e22:	78 a5       	ldd	r23, Y+40	; 0x28
    3e24:	89 a5       	ldd	r24, Y+41	; 0x29
    3e26:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e28:	20 e0       	ldi	r18, 0x00	; 0
    3e2a:	30 e0       	ldi	r19, 0x00	; 0
    3e2c:	4a e7       	ldi	r20, 0x7A	; 122
    3e2e:	55 e4       	ldi	r21, 0x45	; 69
    3e30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e34:	dc 01       	movw	r26, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	8b a3       	std	Y+35, r24	; 0x23
    3e3a:	9c a3       	std	Y+36, r25	; 0x24
    3e3c:	ad a3       	std	Y+37, r26	; 0x25
    3e3e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3e40:	6b a1       	ldd	r22, Y+35	; 0x23
    3e42:	7c a1       	ldd	r23, Y+36	; 0x24
    3e44:	8d a1       	ldd	r24, Y+37	; 0x25
    3e46:	9e a1       	ldd	r25, Y+38	; 0x26
    3e48:	20 e0       	ldi	r18, 0x00	; 0
    3e4a:	30 e0       	ldi	r19, 0x00	; 0
    3e4c:	40 e8       	ldi	r20, 0x80	; 128
    3e4e:	5f e3       	ldi	r21, 0x3F	; 63
    3e50:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e54:	88 23       	and	r24, r24
    3e56:	2c f4       	brge	.+10     	; 0x3e62 <H_LCD_Void_LCDWriteCommand+0x16e>
		__ticks = 1;
    3e58:	81 e0       	ldi	r24, 0x01	; 1
    3e5a:	90 e0       	ldi	r25, 0x00	; 0
    3e5c:	9a a3       	std	Y+34, r25	; 0x22
    3e5e:	89 a3       	std	Y+33, r24	; 0x21
    3e60:	3f c0       	rjmp	.+126    	; 0x3ee0 <H_LCD_Void_LCDWriteCommand+0x1ec>
	else if (__tmp > 65535)
    3e62:	6b a1       	ldd	r22, Y+35	; 0x23
    3e64:	7c a1       	ldd	r23, Y+36	; 0x24
    3e66:	8d a1       	ldd	r24, Y+37	; 0x25
    3e68:	9e a1       	ldd	r25, Y+38	; 0x26
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	3f ef       	ldi	r19, 0xFF	; 255
    3e6e:	4f e7       	ldi	r20, 0x7F	; 127
    3e70:	57 e4       	ldi	r21, 0x47	; 71
    3e72:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e76:	18 16       	cp	r1, r24
    3e78:	4c f5       	brge	.+82     	; 0x3ecc <H_LCD_Void_LCDWriteCommand+0x1d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e7a:	6f a1       	ldd	r22, Y+39	; 0x27
    3e7c:	78 a5       	ldd	r23, Y+40	; 0x28
    3e7e:	89 a5       	ldd	r24, Y+41	; 0x29
    3e80:	9a a5       	ldd	r25, Y+42	; 0x2a
    3e82:	20 e0       	ldi	r18, 0x00	; 0
    3e84:	30 e0       	ldi	r19, 0x00	; 0
    3e86:	40 e2       	ldi	r20, 0x20	; 32
    3e88:	51 e4       	ldi	r21, 0x41	; 65
    3e8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e8e:	dc 01       	movw	r26, r24
    3e90:	cb 01       	movw	r24, r22
    3e92:	bc 01       	movw	r22, r24
    3e94:	cd 01       	movw	r24, r26
    3e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e9a:	dc 01       	movw	r26, r24
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	9a a3       	std	Y+34, r25	; 0x22
    3ea0:	89 a3       	std	Y+33, r24	; 0x21
    3ea2:	0f c0       	rjmp	.+30     	; 0x3ec2 <H_LCD_Void_LCDWriteCommand+0x1ce>
    3ea4:	80 e9       	ldi	r24, 0x90	; 144
    3ea6:	91 e0       	ldi	r25, 0x01	; 1
    3ea8:	98 a3       	std	Y+32, r25	; 0x20
    3eaa:	8f 8f       	std	Y+31, r24	; 0x1f
    3eac:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3eae:	98 a1       	ldd	r25, Y+32	; 0x20
    3eb0:	01 97       	sbiw	r24, 0x01	; 1
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <H_LCD_Void_LCDWriteCommand+0x1bc>
    3eb4:	98 a3       	std	Y+32, r25	; 0x20
    3eb6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eb8:	89 a1       	ldd	r24, Y+33	; 0x21
    3eba:	9a a1       	ldd	r25, Y+34	; 0x22
    3ebc:	01 97       	sbiw	r24, 0x01	; 1
    3ebe:	9a a3       	std	Y+34, r25	; 0x22
    3ec0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ec2:	89 a1       	ldd	r24, Y+33	; 0x21
    3ec4:	9a a1       	ldd	r25, Y+34	; 0x22
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	69 f7       	brne	.-38     	; 0x3ea4 <H_LCD_Void_LCDWriteCommand+0x1b0>
    3eca:	14 c0       	rjmp	.+40     	; 0x3ef4 <H_LCD_Void_LCDWriteCommand+0x200>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ecc:	6b a1       	ldd	r22, Y+35	; 0x23
    3ece:	7c a1       	ldd	r23, Y+36	; 0x24
    3ed0:	8d a1       	ldd	r24, Y+37	; 0x25
    3ed2:	9e a1       	ldd	r25, Y+38	; 0x26
    3ed4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ed8:	dc 01       	movw	r26, r24
    3eda:	cb 01       	movw	r24, r22
    3edc:	9a a3       	std	Y+34, r25	; 0x22
    3ede:	89 a3       	std	Y+33, r24	; 0x21
    3ee0:	89 a1       	ldd	r24, Y+33	; 0x21
    3ee2:	9a a1       	ldd	r25, Y+34	; 0x22
    3ee4:	9e 8f       	std	Y+30, r25	; 0x1e
    3ee6:	8d 8f       	std	Y+29, r24	; 0x1d
    3ee8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3eea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3eec:	01 97       	sbiw	r24, 0x01	; 1
    3eee:	f1 f7       	brne	.-4      	; 0x3eec <H_LCD_Void_LCDWriteCommand+0x1f8>
    3ef0:	9e 8f       	std	Y+30, r25	; 0x1e
    3ef2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	H_LCD_Void_SetLCDPins(Copy_U8_Command);
    3ef4:	89 ad       	ldd	r24, Y+57	; 0x39
    3ef6:	0e 94 2d 22 	call	0x445a	; 0x445a <H_LCD_Void_SetLCDPins>
	M_DIO_Void_SetPinValue(LCD_EN_PIN,HIGH);
    3efa:	87 e1       	ldi	r24, 0x17	; 23
    3efc:	61 e0       	ldi	r22, 0x01	; 1
    3efe:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    3f02:	80 e0       	ldi	r24, 0x00	; 0
    3f04:	90 e0       	ldi	r25, 0x00	; 0
    3f06:	a0 e8       	ldi	r26, 0x80	; 128
    3f08:	bf e3       	ldi	r27, 0x3F	; 63
    3f0a:	89 8f       	std	Y+25, r24	; 0x19
    3f0c:	9a 8f       	std	Y+26, r25	; 0x1a
    3f0e:	ab 8f       	std	Y+27, r26	; 0x1b
    3f10:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f12:	69 8d       	ldd	r22, Y+25	; 0x19
    3f14:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f16:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f18:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f1a:	20 e0       	ldi	r18, 0x00	; 0
    3f1c:	30 e0       	ldi	r19, 0x00	; 0
    3f1e:	4a e7       	ldi	r20, 0x7A	; 122
    3f20:	55 e4       	ldi	r21, 0x45	; 69
    3f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f26:	dc 01       	movw	r26, r24
    3f28:	cb 01       	movw	r24, r22
    3f2a:	8d 8b       	std	Y+21, r24	; 0x15
    3f2c:	9e 8b       	std	Y+22, r25	; 0x16
    3f2e:	af 8b       	std	Y+23, r26	; 0x17
    3f30:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3f32:	6d 89       	ldd	r22, Y+21	; 0x15
    3f34:	7e 89       	ldd	r23, Y+22	; 0x16
    3f36:	8f 89       	ldd	r24, Y+23	; 0x17
    3f38:	98 8d       	ldd	r25, Y+24	; 0x18
    3f3a:	20 e0       	ldi	r18, 0x00	; 0
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	40 e8       	ldi	r20, 0x80	; 128
    3f40:	5f e3       	ldi	r21, 0x3F	; 63
    3f42:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3f46:	88 23       	and	r24, r24
    3f48:	2c f4       	brge	.+10     	; 0x3f54 <H_LCD_Void_LCDWriteCommand+0x260>
		__ticks = 1;
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	9c 8b       	std	Y+20, r25	; 0x14
    3f50:	8b 8b       	std	Y+19, r24	; 0x13
    3f52:	3f c0       	rjmp	.+126    	; 0x3fd2 <H_LCD_Void_LCDWriteCommand+0x2de>
	else if (__tmp > 65535)
    3f54:	6d 89       	ldd	r22, Y+21	; 0x15
    3f56:	7e 89       	ldd	r23, Y+22	; 0x16
    3f58:	8f 89       	ldd	r24, Y+23	; 0x17
    3f5a:	98 8d       	ldd	r25, Y+24	; 0x18
    3f5c:	20 e0       	ldi	r18, 0x00	; 0
    3f5e:	3f ef       	ldi	r19, 0xFF	; 255
    3f60:	4f e7       	ldi	r20, 0x7F	; 127
    3f62:	57 e4       	ldi	r21, 0x47	; 71
    3f64:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3f68:	18 16       	cp	r1, r24
    3f6a:	4c f5       	brge	.+82     	; 0x3fbe <H_LCD_Void_LCDWriteCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f6c:	69 8d       	ldd	r22, Y+25	; 0x19
    3f6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3f70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3f72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	40 e2       	ldi	r20, 0x20	; 32
    3f7a:	51 e4       	ldi	r21, 0x41	; 65
    3f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f80:	dc 01       	movw	r26, r24
    3f82:	cb 01       	movw	r24, r22
    3f84:	bc 01       	movw	r22, r24
    3f86:	cd 01       	movw	r24, r26
    3f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	9c 8b       	std	Y+20, r25	; 0x14
    3f92:	8b 8b       	std	Y+19, r24	; 0x13
    3f94:	0f c0       	rjmp	.+30     	; 0x3fb4 <H_LCD_Void_LCDWriteCommand+0x2c0>
    3f96:	80 e9       	ldi	r24, 0x90	; 144
    3f98:	91 e0       	ldi	r25, 0x01	; 1
    3f9a:	9a 8b       	std	Y+18, r25	; 0x12
    3f9c:	89 8b       	std	Y+17, r24	; 0x11
    3f9e:	89 89       	ldd	r24, Y+17	; 0x11
    3fa0:	9a 89       	ldd	r25, Y+18	; 0x12
    3fa2:	01 97       	sbiw	r24, 0x01	; 1
    3fa4:	f1 f7       	brne	.-4      	; 0x3fa2 <H_LCD_Void_LCDWriteCommand+0x2ae>
    3fa6:	9a 8b       	std	Y+18, r25	; 0x12
    3fa8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3faa:	8b 89       	ldd	r24, Y+19	; 0x13
    3fac:	9c 89       	ldd	r25, Y+20	; 0x14
    3fae:	01 97       	sbiw	r24, 0x01	; 1
    3fb0:	9c 8b       	std	Y+20, r25	; 0x14
    3fb2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fb4:	8b 89       	ldd	r24, Y+19	; 0x13
    3fb6:	9c 89       	ldd	r25, Y+20	; 0x14
    3fb8:	00 97       	sbiw	r24, 0x00	; 0
    3fba:	69 f7       	brne	.-38     	; 0x3f96 <H_LCD_Void_LCDWriteCommand+0x2a2>
    3fbc:	14 c0       	rjmp	.+40     	; 0x3fe6 <H_LCD_Void_LCDWriteCommand+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fbe:	6d 89       	ldd	r22, Y+21	; 0x15
    3fc0:	7e 89       	ldd	r23, Y+22	; 0x16
    3fc2:	8f 89       	ldd	r24, Y+23	; 0x17
    3fc4:	98 8d       	ldd	r25, Y+24	; 0x18
    3fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fca:	dc 01       	movw	r26, r24
    3fcc:	cb 01       	movw	r24, r22
    3fce:	9c 8b       	std	Y+20, r25	; 0x14
    3fd0:	8b 8b       	std	Y+19, r24	; 0x13
    3fd2:	8b 89       	ldd	r24, Y+19	; 0x13
    3fd4:	9c 89       	ldd	r25, Y+20	; 0x14
    3fd6:	98 8b       	std	Y+16, r25	; 0x10
    3fd8:	8f 87       	std	Y+15, r24	; 0x0f
    3fda:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fdc:	98 89       	ldd	r25, Y+16	; 0x10
    3fde:	01 97       	sbiw	r24, 0x01	; 1
    3fe0:	f1 f7       	brne	.-4      	; 0x3fde <H_LCD_Void_LCDWriteCommand+0x2ea>
    3fe2:	98 8b       	std	Y+16, r25	; 0x10
    3fe4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_Void_SetPinValue(LCD_EN_PIN,LOW);
    3fe6:	87 e1       	ldi	r24, 0x17	; 23
    3fe8:	60 e0       	ldi	r22, 0x00	; 0
    3fea:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    3fee:	80 e0       	ldi	r24, 0x00	; 0
    3ff0:	90 e0       	ldi	r25, 0x00	; 0
    3ff2:	a0 e8       	ldi	r26, 0x80	; 128
    3ff4:	bf e3       	ldi	r27, 0x3F	; 63
    3ff6:	8b 87       	std	Y+11, r24	; 0x0b
    3ff8:	9c 87       	std	Y+12, r25	; 0x0c
    3ffa:	ad 87       	std	Y+13, r26	; 0x0d
    3ffc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ffe:	6b 85       	ldd	r22, Y+11	; 0x0b
    4000:	7c 85       	ldd	r23, Y+12	; 0x0c
    4002:	8d 85       	ldd	r24, Y+13	; 0x0d
    4004:	9e 85       	ldd	r25, Y+14	; 0x0e
    4006:	20 e0       	ldi	r18, 0x00	; 0
    4008:	30 e0       	ldi	r19, 0x00	; 0
    400a:	4a e7       	ldi	r20, 0x7A	; 122
    400c:	55 e4       	ldi	r21, 0x45	; 69
    400e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4012:	dc 01       	movw	r26, r24
    4014:	cb 01       	movw	r24, r22
    4016:	8f 83       	std	Y+7, r24	; 0x07
    4018:	98 87       	std	Y+8, r25	; 0x08
    401a:	a9 87       	std	Y+9, r26	; 0x09
    401c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    401e:	6f 81       	ldd	r22, Y+7	; 0x07
    4020:	78 85       	ldd	r23, Y+8	; 0x08
    4022:	89 85       	ldd	r24, Y+9	; 0x09
    4024:	9a 85       	ldd	r25, Y+10	; 0x0a
    4026:	20 e0       	ldi	r18, 0x00	; 0
    4028:	30 e0       	ldi	r19, 0x00	; 0
    402a:	40 e8       	ldi	r20, 0x80	; 128
    402c:	5f e3       	ldi	r21, 0x3F	; 63
    402e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4032:	88 23       	and	r24, r24
    4034:	2c f4       	brge	.+10     	; 0x4040 <H_LCD_Void_LCDWriteCommand+0x34c>
		__ticks = 1;
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	9e 83       	std	Y+6, r25	; 0x06
    403c:	8d 83       	std	Y+5, r24	; 0x05
    403e:	3f c0       	rjmp	.+126    	; 0x40be <H_LCD_Void_LCDWriteCommand+0x3ca>
	else if (__tmp > 65535)
    4040:	6f 81       	ldd	r22, Y+7	; 0x07
    4042:	78 85       	ldd	r23, Y+8	; 0x08
    4044:	89 85       	ldd	r24, Y+9	; 0x09
    4046:	9a 85       	ldd	r25, Y+10	; 0x0a
    4048:	20 e0       	ldi	r18, 0x00	; 0
    404a:	3f ef       	ldi	r19, 0xFF	; 255
    404c:	4f e7       	ldi	r20, 0x7F	; 127
    404e:	57 e4       	ldi	r21, 0x47	; 71
    4050:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4054:	18 16       	cp	r1, r24
    4056:	4c f5       	brge	.+82     	; 0x40aa <H_LCD_Void_LCDWriteCommand+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4058:	6b 85       	ldd	r22, Y+11	; 0x0b
    405a:	7c 85       	ldd	r23, Y+12	; 0x0c
    405c:	8d 85       	ldd	r24, Y+13	; 0x0d
    405e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4060:	20 e0       	ldi	r18, 0x00	; 0
    4062:	30 e0       	ldi	r19, 0x00	; 0
    4064:	40 e2       	ldi	r20, 0x20	; 32
    4066:	51 e4       	ldi	r21, 0x41	; 65
    4068:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406c:	dc 01       	movw	r26, r24
    406e:	cb 01       	movw	r24, r22
    4070:	bc 01       	movw	r22, r24
    4072:	cd 01       	movw	r24, r26
    4074:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4078:	dc 01       	movw	r26, r24
    407a:	cb 01       	movw	r24, r22
    407c:	9e 83       	std	Y+6, r25	; 0x06
    407e:	8d 83       	std	Y+5, r24	; 0x05
    4080:	0f c0       	rjmp	.+30     	; 0x40a0 <H_LCD_Void_LCDWriteCommand+0x3ac>
    4082:	80 e9       	ldi	r24, 0x90	; 144
    4084:	91 e0       	ldi	r25, 0x01	; 1
    4086:	9c 83       	std	Y+4, r25	; 0x04
    4088:	8b 83       	std	Y+3, r24	; 0x03
    408a:	8b 81       	ldd	r24, Y+3	; 0x03
    408c:	9c 81       	ldd	r25, Y+4	; 0x04
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	f1 f7       	brne	.-4      	; 0x408e <H_LCD_Void_LCDWriteCommand+0x39a>
    4092:	9c 83       	std	Y+4, r25	; 0x04
    4094:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4096:	8d 81       	ldd	r24, Y+5	; 0x05
    4098:	9e 81       	ldd	r25, Y+6	; 0x06
    409a:	01 97       	sbiw	r24, 0x01	; 1
    409c:	9e 83       	std	Y+6, r25	; 0x06
    409e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40a0:	8d 81       	ldd	r24, Y+5	; 0x05
    40a2:	9e 81       	ldd	r25, Y+6	; 0x06
    40a4:	00 97       	sbiw	r24, 0x00	; 0
    40a6:	69 f7       	brne	.-38     	; 0x4082 <H_LCD_Void_LCDWriteCommand+0x38e>
    40a8:	14 c0       	rjmp	.+40     	; 0x40d2 <H_LCD_Void_LCDWriteCommand+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40aa:	6f 81       	ldd	r22, Y+7	; 0x07
    40ac:	78 85       	ldd	r23, Y+8	; 0x08
    40ae:	89 85       	ldd	r24, Y+9	; 0x09
    40b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    40b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40b6:	dc 01       	movw	r26, r24
    40b8:	cb 01       	movw	r24, r22
    40ba:	9e 83       	std	Y+6, r25	; 0x06
    40bc:	8d 83       	std	Y+5, r24	; 0x05
    40be:	8d 81       	ldd	r24, Y+5	; 0x05
    40c0:	9e 81       	ldd	r25, Y+6	; 0x06
    40c2:	9a 83       	std	Y+2, r25	; 0x02
    40c4:	89 83       	std	Y+1, r24	; 0x01
    40c6:	89 81       	ldd	r24, Y+1	; 0x01
    40c8:	9a 81       	ldd	r25, Y+2	; 0x02
    40ca:	01 97       	sbiw	r24, 0x01	; 1
    40cc:	f1 f7       	brne	.-4      	; 0x40ca <H_LCD_Void_LCDWriteCommand+0x3d6>
    40ce:	9a 83       	std	Y+2, r25	; 0x02
    40d0:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(1);
}
    40d2:	e9 96       	adiw	r28, 0x39	; 57
    40d4:	0f b6       	in	r0, 0x3f	; 63
    40d6:	f8 94       	cli
    40d8:	de bf       	out	0x3e, r29	; 62
    40da:	0f be       	out	0x3f, r0	; 63
    40dc:	cd bf       	out	0x3d, r28	; 61
    40de:	cf 91       	pop	r28
    40e0:	df 91       	pop	r29
    40e2:	08 95       	ret

000040e4 <H_LCD_Void_LCDWriteString>:
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
    40e4:	df 93       	push	r29
    40e6:	cf 93       	push	r28
    40e8:	00 d0       	rcall	.+0      	; 0x40ea <H_LCD_Void_LCDWriteString+0x6>
    40ea:	0f 92       	push	r0
    40ec:	cd b7       	in	r28, 0x3d	; 61
    40ee:	de b7       	in	r29, 0x3e	; 62
    40f0:	9b 83       	std	Y+3, r25	; 0x03
    40f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_U8_Counter = 0;
    40f4:	19 82       	std	Y+1, r1	; 0x01
    40f6:	0e c0       	rjmp	.+28     	; 0x4114 <H_LCD_Void_LCDWriteString+0x30>
	while(Copy_U8_P[Local_U8_Counter] != '\0')
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
    40f8:	89 81       	ldd	r24, Y+1	; 0x01
    40fa:	28 2f       	mov	r18, r24
    40fc:	30 e0       	ldi	r19, 0x00	; 0
    40fe:	8a 81       	ldd	r24, Y+2	; 0x02
    4100:	9b 81       	ldd	r25, Y+3	; 0x03
    4102:	fc 01       	movw	r30, r24
    4104:	e2 0f       	add	r30, r18
    4106:	f3 1f       	adc	r31, r19
    4108:	80 81       	ld	r24, Z
    410a:	0e 94 82 1c 	call	0x3904	; 0x3904 <H_LCD_Void_LCDWriteCharacter>
		Local_U8_Counter++;
    410e:	89 81       	ldd	r24, Y+1	; 0x01
    4110:	8f 5f       	subi	r24, 0xFF	; 255
    4112:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
void H_LCD_Void_LCDWriteString(u8* Copy_U8_P)
{
	u8 Local_U8_Counter = 0;
	while(Copy_U8_P[Local_U8_Counter] != '\0')
    4114:	89 81       	ldd	r24, Y+1	; 0x01
    4116:	28 2f       	mov	r18, r24
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	8a 81       	ldd	r24, Y+2	; 0x02
    411c:	9b 81       	ldd	r25, Y+3	; 0x03
    411e:	fc 01       	movw	r30, r24
    4120:	e2 0f       	add	r30, r18
    4122:	f3 1f       	adc	r31, r19
    4124:	80 81       	ld	r24, Z
    4126:	88 23       	and	r24, r24
    4128:	39 f7       	brne	.-50     	; 0x40f8 <H_LCD_Void_LCDWriteString+0x14>
	{
		H_LCD_Void_LCDWriteCharacter(Copy_U8_P[Local_U8_Counter]);
		Local_U8_Counter++;
	}
}
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	0f 90       	pop	r0
    4130:	cf 91       	pop	r28
    4132:	df 91       	pop	r29
    4134:	08 95       	ret

00004136 <H_LCD_Void_LCDWriteNumber>:
void H_LCD_Void_LCDWriteNumber(f32 Copy_F32_Num)
{
    4136:	0f 93       	push	r16
    4138:	1f 93       	push	r17
    413a:	df 93       	push	r29
    413c:	cf 93       	push	r28
    413e:	cd b7       	in	r28, 0x3d	; 61
    4140:	de b7       	in	r29, 0x3e	; 62
    4142:	6d 97       	sbiw	r28, 0x1d	; 29
    4144:	0f b6       	in	r0, 0x3f	; 63
    4146:	f8 94       	cli
    4148:	de bf       	out	0x3e, r29	; 62
    414a:	0f be       	out	0x3f, r0	; 63
    414c:	cd bf       	out	0x3d, r28	; 61
    414e:	6a 8f       	std	Y+26, r22	; 0x1a
    4150:	7b 8f       	std	Y+27, r23	; 0x1b
    4152:	8c 8f       	std	Y+28, r24	; 0x1c
    4154:	9d 8f       	std	Y+29, r25	; 0x1d
	s8 Local_S8_Counter = -1;
    4156:	8f ef       	ldi	r24, 0xFF	; 255
    4158:	89 87       	std	Y+9, r24	; 0x09
	u8 Local_U8_Arr[16];
	if((int)Copy_F32_Num < 0)
    415a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    415c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    415e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4160:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4162:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    4166:	dc 01       	movw	r26, r24
    4168:	cb 01       	movw	r24, r22
    416a:	99 23       	and	r25, r25
    416c:	64 f4       	brge	.+24     	; 0x4186 <H_LCD_Void_LCDWriteNumber+0x50>
		{
			Copy_F32_Num = Copy_F32_Num * -1;
    416e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4170:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4172:	ac 8d       	ldd	r26, Y+28	; 0x1c
    4174:	bd 8d       	ldd	r27, Y+29	; 0x1d
    4176:	b0 58       	subi	r27, 0x80	; 128
    4178:	8a 8f       	std	Y+26, r24	; 0x1a
    417a:	9b 8f       	std	Y+27, r25	; 0x1b
    417c:	ac 8f       	std	Y+28, r26	; 0x1c
    417e:	bd 8f       	std	Y+29, r27	; 0x1d
			H_LCD_Void_LCDWriteCharacter('-');
    4180:	8d e2       	ldi	r24, 0x2D	; 45
    4182:	0e 94 82 1c 	call	0x3904	; 0x3904 <H_LCD_Void_LCDWriteCharacter>
		}
	f32 Local_F32_FloatNum=Copy_F32_Num -((s32)Copy_F32_Num);
    4186:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4188:	7b 8d       	ldd	r23, Y+27	; 0x1b
    418a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    418c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    418e:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	bc 01       	movw	r22, r24
    4198:	cd 01       	movw	r24, r26
    419a:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    419e:	9b 01       	movw	r18, r22
    41a0:	ac 01       	movw	r20, r24
    41a2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    41a4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    41a6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    41a8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    41aa:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    41ae:	dc 01       	movw	r26, r24
    41b0:	cb 01       	movw	r24, r22
    41b2:	8d 83       	std	Y+5, r24	; 0x05
    41b4:	9e 83       	std	Y+6, r25	; 0x06
    41b6:	af 83       	std	Y+7, r26	; 0x07
    41b8:	b8 87       	std	Y+8, r27	; 0x08
	do
	{
		Local_S8_Counter++;
    41ba:	89 85       	ldd	r24, Y+9	; 0x09
    41bc:	8f 5f       	subi	r24, 0xFF	; 255
    41be:	89 87       	std	Y+9, r24	; 0x09
		Local_U8_Arr[Local_S8_Counter]  =  (s32)Copy_F32_Num % 10;
    41c0:	89 85       	ldd	r24, Y+9	; 0x09
    41c2:	08 2f       	mov	r16, r24
    41c4:	11 27       	eor	r17, r17
    41c6:	07 fd       	sbrc	r16, 7
    41c8:	10 95       	com	r17
    41ca:	6a 8d       	ldd	r22, Y+26	; 0x1a
    41cc:	7b 8d       	ldd	r23, Y+27	; 0x1b
    41ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    41d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    41d2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    41d6:	dc 01       	movw	r26, r24
    41d8:	cb 01       	movw	r24, r22
    41da:	2a e0       	ldi	r18, 0x0A	; 10
    41dc:	30 e0       	ldi	r19, 0x00	; 0
    41de:	40 e0       	ldi	r20, 0x00	; 0
    41e0:	50 e0       	ldi	r21, 0x00	; 0
    41e2:	bc 01       	movw	r22, r24
    41e4:	cd 01       	movw	r24, r26
    41e6:	0e 94 f6 31 	call	0x63ec	; 0x63ec <__divmodsi4>
    41ea:	dc 01       	movw	r26, r24
    41ec:	cb 01       	movw	r24, r22
    41ee:	28 2f       	mov	r18, r24
    41f0:	ce 01       	movw	r24, r28
    41f2:	0a 96       	adiw	r24, 0x0a	; 10
    41f4:	fc 01       	movw	r30, r24
    41f6:	e0 0f       	add	r30, r16
    41f8:	f1 1f       	adc	r31, r17
    41fa:	20 83       	st	Z, r18
		Copy_F32_Num = (int)Copy_F32_Num / 10;
    41fc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    41fe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4200:	8c 8d       	ldd	r24, Y+28	; 0x1c
    4202:	9d 8d       	ldd	r25, Y+29	; 0x1d
    4204:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	2a e0       	ldi	r18, 0x0A	; 10
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	b9 01       	movw	r22, r18
    4212:	0e 94 c1 31 	call	0x6382	; 0x6382 <__divmodhi4>
    4216:	cb 01       	movw	r24, r22
    4218:	aa 27       	eor	r26, r26
    421a:	97 fd       	sbrc	r25, 7
    421c:	a0 95       	com	r26
    421e:	ba 2f       	mov	r27, r26
    4220:	bc 01       	movw	r22, r24
    4222:	cd 01       	movw	r24, r26
    4224:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    4228:	dc 01       	movw	r26, r24
    422a:	cb 01       	movw	r24, r22
    422c:	8a 8f       	std	Y+26, r24	; 0x1a
    422e:	9b 8f       	std	Y+27, r25	; 0x1b
    4230:	ac 8f       	std	Y+28, r26	; 0x1c
    4232:	bd 8f       	std	Y+29, r27	; 0x1d
	}while((int)Copy_F32_Num != 0);
    4234:	6a 8d       	ldd	r22, Y+26	; 0x1a
    4236:	7b 8d       	ldd	r23, Y+27	; 0x1b
    4238:	8c 8d       	ldd	r24, Y+28	; 0x1c
    423a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    423c:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    4240:	dc 01       	movw	r26, r24
    4242:	cb 01       	movw	r24, r22
    4244:	00 97       	sbiw	r24, 0x00	; 0
    4246:	09 f0       	breq	.+2      	; 0x424a <H_LCD_Void_LCDWriteNumber+0x114>
    4248:	b8 cf       	rjmp	.-144    	; 0x41ba <H_LCD_Void_LCDWriteNumber+0x84>
    424a:	11 c0       	rjmp	.+34     	; 0x426e <H_LCD_Void_LCDWriteNumber+0x138>
	while(Local_S8_Counter >= 0)
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48); //ascii of 0 is 48
    424c:	89 85       	ldd	r24, Y+9	; 0x09
    424e:	28 2f       	mov	r18, r24
    4250:	33 27       	eor	r19, r19
    4252:	27 fd       	sbrc	r18, 7
    4254:	30 95       	com	r19
    4256:	ce 01       	movw	r24, r28
    4258:	0a 96       	adiw	r24, 0x0a	; 10
    425a:	fc 01       	movw	r30, r24
    425c:	e2 0f       	add	r30, r18
    425e:	f3 1f       	adc	r31, r19
    4260:	80 81       	ld	r24, Z
    4262:	80 5d       	subi	r24, 0xD0	; 208
    4264:	0e 94 82 1c 	call	0x3904	; 0x3904 <H_LCD_Void_LCDWriteCharacter>
		Local_S8_Counter--;
    4268:	89 85       	ldd	r24, Y+9	; 0x09
    426a:	81 50       	subi	r24, 0x01	; 1
    426c:	89 87       	std	Y+9, r24	; 0x09
	{
		Local_S8_Counter++;
		Local_U8_Arr[Local_S8_Counter]  =  (s32)Copy_F32_Num % 10;
		Copy_F32_Num = (int)Copy_F32_Num / 10;
	}while((int)Copy_F32_Num != 0);
	while(Local_S8_Counter >= 0)
    426e:	89 85       	ldd	r24, Y+9	; 0x09
    4270:	88 23       	and	r24, r24
    4272:	64 f7       	brge	.-40     	; 0x424c <H_LCD_Void_LCDWriteNumber+0x116>
	{
		H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48); //ascii of 0 is 48
		Local_S8_Counter--;
	}
	if(Local_F32_FloatNum!=0)
    4274:	6d 81       	ldd	r22, Y+5	; 0x05
    4276:	7e 81       	ldd	r23, Y+6	; 0x06
    4278:	8f 81       	ldd	r24, Y+7	; 0x07
    427a:	98 85       	ldd	r25, Y+8	; 0x08
    427c:	20 e0       	ldi	r18, 0x00	; 0
    427e:	30 e0       	ldi	r19, 0x00	; 0
    4280:	40 e0       	ldi	r20, 0x00	; 0
    4282:	50 e0       	ldi	r21, 0x00	; 0
    4284:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    4288:	88 23       	and	r24, r24
    428a:	09 f4       	brne	.+2      	; 0x428e <H_LCD_Void_LCDWriteNumber+0x158>
    428c:	b1 c0       	rjmp	.+354    	; 0x43f0 <H_LCD_Void_LCDWriteNumber+0x2ba>
	{
		//decimal number first
		f32 Local_F32_Checker=0;
    428e:	80 e0       	ldi	r24, 0x00	; 0
    4290:	90 e0       	ldi	r25, 0x00	; 0
    4292:	a0 e0       	ldi	r26, 0x00	; 0
    4294:	b0 e0       	ldi	r27, 0x00	; 0
    4296:	89 83       	std	Y+1, r24	; 0x01
    4298:	9a 83       	std	Y+2, r25	; 0x02
    429a:	ab 83       	std	Y+3, r26	; 0x03
    429c:	bc 83       	std	Y+4, r27	; 0x04
		do{
			Local_F32_FloatNum=Local_F32_FloatNum*10;
    429e:	6d 81       	ldd	r22, Y+5	; 0x05
    42a0:	7e 81       	ldd	r23, Y+6	; 0x06
    42a2:	8f 81       	ldd	r24, Y+7	; 0x07
    42a4:	98 85       	ldd	r25, Y+8	; 0x08
    42a6:	20 e0       	ldi	r18, 0x00	; 0
    42a8:	30 e0       	ldi	r19, 0x00	; 0
    42aa:	40 e2       	ldi	r20, 0x20	; 32
    42ac:	51 e4       	ldi	r21, 0x41	; 65
    42ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42b2:	dc 01       	movw	r26, r24
    42b4:	cb 01       	movw	r24, r22
    42b6:	8d 83       	std	Y+5, r24	; 0x05
    42b8:	9e 83       	std	Y+6, r25	; 0x06
    42ba:	af 83       	std	Y+7, r26	; 0x07
    42bc:	b8 87       	std	Y+8, r27	; 0x08
		   Local_F32_Checker=Local_F32_FloatNum -((s32)Local_F32_FloatNum);
    42be:	6d 81       	ldd	r22, Y+5	; 0x05
    42c0:	7e 81       	ldd	r23, Y+6	; 0x06
    42c2:	8f 81       	ldd	r24, Y+7	; 0x07
    42c4:	98 85       	ldd	r25, Y+8	; 0x08
    42c6:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    42ca:	dc 01       	movw	r26, r24
    42cc:	cb 01       	movw	r24, r22
    42ce:	bc 01       	movw	r22, r24
    42d0:	cd 01       	movw	r24, r26
    42d2:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    42d6:	9b 01       	movw	r18, r22
    42d8:	ac 01       	movw	r20, r24
    42da:	6d 81       	ldd	r22, Y+5	; 0x05
    42dc:	7e 81       	ldd	r23, Y+6	; 0x06
    42de:	8f 81       	ldd	r24, Y+7	; 0x07
    42e0:	98 85       	ldd	r25, Y+8	; 0x08
    42e2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    42e6:	dc 01       	movw	r26, r24
    42e8:	cb 01       	movw	r24, r22
    42ea:	89 83       	std	Y+1, r24	; 0x01
    42ec:	9a 83       	std	Y+2, r25	; 0x02
    42ee:	ab 83       	std	Y+3, r26	; 0x03
    42f0:	bc 83       	std	Y+4, r27	; 0x04
		   Local_F32_Checker*=10;
    42f2:	69 81       	ldd	r22, Y+1	; 0x01
    42f4:	7a 81       	ldd	r23, Y+2	; 0x02
    42f6:	8b 81       	ldd	r24, Y+3	; 0x03
    42f8:	9c 81       	ldd	r25, Y+4	; 0x04
    42fa:	20 e0       	ldi	r18, 0x00	; 0
    42fc:	30 e0       	ldi	r19, 0x00	; 0
    42fe:	40 e2       	ldi	r20, 0x20	; 32
    4300:	51 e4       	ldi	r21, 0x41	; 65
    4302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4306:	dc 01       	movw	r26, r24
    4308:	cb 01       	movw	r24, r22
    430a:	89 83       	std	Y+1, r24	; 0x01
    430c:	9a 83       	std	Y+2, r25	; 0x02
    430e:	ab 83       	std	Y+3, r26	; 0x03
    4310:	bc 83       	std	Y+4, r27	; 0x04
        }while((s32)Local_F32_Checker!=0);
    4312:	69 81       	ldd	r22, Y+1	; 0x01
    4314:	7a 81       	ldd	r23, Y+2	; 0x02
    4316:	8b 81       	ldd	r24, Y+3	; 0x03
    4318:	9c 81       	ldd	r25, Y+4	; 0x04
    431a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    431e:	dc 01       	movw	r26, r24
    4320:	cb 01       	movw	r24, r22
    4322:	00 97       	sbiw	r24, 0x00	; 0
    4324:	a1 05       	cpc	r26, r1
    4326:	b1 05       	cpc	r27, r1
    4328:	09 f0       	breq	.+2      	; 0x432c <H_LCD_Void_LCDWriteNumber+0x1f6>
    432a:	b9 cf       	rjmp	.-142    	; 0x429e <H_LCD_Void_LCDWriteNumber+0x168>
		do
			{
				Local_S8_Counter++;
    432c:	89 85       	ldd	r24, Y+9	; 0x09
    432e:	8f 5f       	subi	r24, 0xFF	; 255
    4330:	89 87       	std	Y+9, r24	; 0x09
				Local_U8_Arr[Local_S8_Counter]  =  (s32)Local_F32_FloatNum % 10;
    4332:	89 85       	ldd	r24, Y+9	; 0x09
    4334:	08 2f       	mov	r16, r24
    4336:	11 27       	eor	r17, r17
    4338:	07 fd       	sbrc	r16, 7
    433a:	10 95       	com	r17
    433c:	6d 81       	ldd	r22, Y+5	; 0x05
    433e:	7e 81       	ldd	r23, Y+6	; 0x06
    4340:	8f 81       	ldd	r24, Y+7	; 0x07
    4342:	98 85       	ldd	r25, Y+8	; 0x08
    4344:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    4348:	dc 01       	movw	r26, r24
    434a:	cb 01       	movw	r24, r22
    434c:	2a e0       	ldi	r18, 0x0A	; 10
    434e:	30 e0       	ldi	r19, 0x00	; 0
    4350:	40 e0       	ldi	r20, 0x00	; 0
    4352:	50 e0       	ldi	r21, 0x00	; 0
    4354:	bc 01       	movw	r22, r24
    4356:	cd 01       	movw	r24, r26
    4358:	0e 94 f6 31 	call	0x63ec	; 0x63ec <__divmodsi4>
    435c:	dc 01       	movw	r26, r24
    435e:	cb 01       	movw	r24, r22
    4360:	28 2f       	mov	r18, r24
    4362:	ce 01       	movw	r24, r28
    4364:	0a 96       	adiw	r24, 0x0a	; 10
    4366:	fc 01       	movw	r30, r24
    4368:	e0 0f       	add	r30, r16
    436a:	f1 1f       	adc	r31, r17
    436c:	20 83       	st	Z, r18
				Local_F32_FloatNum = (s32)Local_F32_FloatNum / 10;
    436e:	6d 81       	ldd	r22, Y+5	; 0x05
    4370:	7e 81       	ldd	r23, Y+6	; 0x06
    4372:	8f 81       	ldd	r24, Y+7	; 0x07
    4374:	98 85       	ldd	r25, Y+8	; 0x08
    4376:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	2a e0       	ldi	r18, 0x0A	; 10
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	40 e0       	ldi	r20, 0x00	; 0
    4384:	50 e0       	ldi	r21, 0x00	; 0
    4386:	bc 01       	movw	r22, r24
    4388:	cd 01       	movw	r24, r26
    438a:	0e 94 f6 31 	call	0x63ec	; 0x63ec <__divmodsi4>
    438e:	da 01       	movw	r26, r20
    4390:	c9 01       	movw	r24, r18
    4392:	bc 01       	movw	r22, r24
    4394:	cd 01       	movw	r24, r26
    4396:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    439a:	dc 01       	movw	r26, r24
    439c:	cb 01       	movw	r24, r22
    439e:	8d 83       	std	Y+5, r24	; 0x05
    43a0:	9e 83       	std	Y+6, r25	; 0x06
    43a2:	af 83       	std	Y+7, r26	; 0x07
    43a4:	b8 87       	std	Y+8, r27	; 0x08
			}while((s32)Local_F32_FloatNum != 0);
    43a6:	6d 81       	ldd	r22, Y+5	; 0x05
    43a8:	7e 81       	ldd	r23, Y+6	; 0x06
    43aa:	8f 81       	ldd	r24, Y+7	; 0x07
    43ac:	98 85       	ldd	r25, Y+8	; 0x08
    43ae:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    43b2:	dc 01       	movw	r26, r24
    43b4:	cb 01       	movw	r24, r22
    43b6:	00 97       	sbiw	r24, 0x00	; 0
    43b8:	a1 05       	cpc	r26, r1
    43ba:	b1 05       	cpc	r27, r1
    43bc:	09 f0       	breq	.+2      	; 0x43c0 <H_LCD_Void_LCDWriteNumber+0x28a>
    43be:	b6 cf       	rjmp	.-148    	; 0x432c <H_LCD_Void_LCDWriteNumber+0x1f6>
		H_LCD_Void_LCDWriteCharacter('.');
    43c0:	8e e2       	ldi	r24, 0x2E	; 46
    43c2:	0e 94 82 1c 	call	0x3904	; 0x3904 <H_LCD_Void_LCDWriteCharacter>
    43c6:	11 c0       	rjmp	.+34     	; 0x43ea <H_LCD_Void_LCDWriteNumber+0x2b4>
		while(Local_S8_Counter >= 0)
			{
				H_LCD_Void_LCDWriteCharacter(Local_U8_Arr[Local_S8_Counter] + 48); //ascii of 0 is 48
    43c8:	89 85       	ldd	r24, Y+9	; 0x09
    43ca:	28 2f       	mov	r18, r24
    43cc:	33 27       	eor	r19, r19
    43ce:	27 fd       	sbrc	r18, 7
    43d0:	30 95       	com	r19
    43d2:	ce 01       	movw	r24, r28
    43d4:	0a 96       	adiw	r24, 0x0a	; 10
    43d6:	fc 01       	movw	r30, r24
    43d8:	e2 0f       	add	r30, r18
    43da:	f3 1f       	adc	r31, r19
    43dc:	80 81       	ld	r24, Z
    43de:	80 5d       	subi	r24, 0xD0	; 208
    43e0:	0e 94 82 1c 	call	0x3904	; 0x3904 <H_LCD_Void_LCDWriteCharacter>
				Local_S8_Counter--;
    43e4:	89 85       	ldd	r24, Y+9	; 0x09
    43e6:	81 50       	subi	r24, 0x01	; 1
    43e8:	89 87       	std	Y+9, r24	; 0x09
				Local_S8_Counter++;
				Local_U8_Arr[Local_S8_Counter]  =  (s32)Local_F32_FloatNum % 10;
				Local_F32_FloatNum = (s32)Local_F32_FloatNum / 10;
			}while((s32)Local_F32_FloatNum != 0);
		H_LCD_Void_LCDWriteCharacter('.');
		while(Local_S8_Counter >= 0)
    43ea:	89 85       	ldd	r24, Y+9	; 0x09
    43ec:	88 23       	and	r24, r24
    43ee:	64 f7       	brge	.-40     	; 0x43c8 <H_LCD_Void_LCDWriteNumber+0x292>
				Local_S8_Counter--;
			}

	}

}
    43f0:	6d 96       	adiw	r28, 0x1d	; 29
    43f2:	0f b6       	in	r0, 0x3f	; 63
    43f4:	f8 94       	cli
    43f6:	de bf       	out	0x3e, r29	; 62
    43f8:	0f be       	out	0x3f, r0	; 63
    43fa:	cd bf       	out	0x3d, r28	; 61
    43fc:	cf 91       	pop	r28
    43fe:	df 91       	pop	r29
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	08 95       	ret

00004406 <H_LCD_Void_LCDGoTo>:
void H_LCD_Void_LCDGoTo(u8 Copy_U8_Row,u8 Copy_U8_Col)
{
    4406:	df 93       	push	r29
    4408:	cf 93       	push	r28
    440a:	00 d0       	rcall	.+0      	; 0x440c <H_LCD_Void_LCDGoTo+0x6>
    440c:	00 d0       	rcall	.+0      	; 0x440e <H_LCD_Void_LCDGoTo+0x8>
    440e:	cd b7       	in	r28, 0x3d	; 61
    4410:	de b7       	in	r29, 0x3e	; 62
    4412:	8b 83       	std	Y+3, r24	; 0x03
    4414:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_U8Arr [2] = {0x80 , 0xC0};
    4416:	80 e8       	ldi	r24, 0x80	; 128
    4418:	89 83       	std	Y+1, r24	; 0x01
    441a:	80 ec       	ldi	r24, 0xC0	; 192
    441c:	8a 83       	std	Y+2, r24	; 0x02
	H_LCD_Void_LCDWriteCommand(Local_U8Arr[Copy_U8_Row] + Copy_U8_Col);
    441e:	8b 81       	ldd	r24, Y+3	; 0x03
    4420:	28 2f       	mov	r18, r24
    4422:	30 e0       	ldi	r19, 0x00	; 0
    4424:	ce 01       	movw	r24, r28
    4426:	01 96       	adiw	r24, 0x01	; 1
    4428:	fc 01       	movw	r30, r24
    442a:	e2 0f       	add	r30, r18
    442c:	f3 1f       	adc	r31, r19
    442e:	90 81       	ld	r25, Z
    4430:	8c 81       	ldd	r24, Y+4	; 0x04
    4432:	89 0f       	add	r24, r25
    4434:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <H_LCD_Void_LCDWriteCommand>
}
    4438:	0f 90       	pop	r0
    443a:	0f 90       	pop	r0
    443c:	0f 90       	pop	r0
    443e:	0f 90       	pop	r0
    4440:	cf 91       	pop	r28
    4442:	df 91       	pop	r29
    4444:	08 95       	ret

00004446 <H_LCD_Void_LCDClear>:
void H_LCD_Void_LCDClear(void)
{
    4446:	df 93       	push	r29
    4448:	cf 93       	push	r28
    444a:	cd b7       	in	r28, 0x3d	; 61
    444c:	de b7       	in	r29, 0x3e	; 62
	H_LCD_Void_LCDWriteCommand(LCD_CLEAR);
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <H_LCD_Void_LCDWriteCommand>
}
    4454:	cf 91       	pop	r28
    4456:	df 91       	pop	r29
    4458:	08 95       	ret

0000445a <H_LCD_Void_SetLCDPins>:
static void H_LCD_Void_SetLCDPins(u8 Copy_U8_Pins)
{
    445a:	df 93       	push	r29
    445c:	cf 93       	push	r28
    445e:	0f 92       	push	r0
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 4 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 5 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 6 & 0x01);
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 7 & 0x01);
#elif LCD_MODE   ==   _4_BIT_MODE
	M_DIO_Void_SetPinValue(LCD_D4_PIN,Copy_U8_Pins >> 0 & 0x01);
    4466:	89 81       	ldd	r24, Y+1	; 0x01
    4468:	98 2f       	mov	r25, r24
    446a:	91 70       	andi	r25, 0x01	; 1
    446c:	88 e1       	ldi	r24, 0x18	; 24
    446e:	69 2f       	mov	r22, r25
    4470:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D5_PIN,Copy_U8_Pins >> 1 & 0x01);
    4474:	89 81       	ldd	r24, Y+1	; 0x01
    4476:	86 95       	lsr	r24
    4478:	98 2f       	mov	r25, r24
    447a:	91 70       	andi	r25, 0x01	; 1
    447c:	89 e1       	ldi	r24, 0x19	; 25
    447e:	69 2f       	mov	r22, r25
    4480:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D6_PIN,Copy_U8_Pins >> 2 & 0x01);
    4484:	89 81       	ldd	r24, Y+1	; 0x01
    4486:	86 95       	lsr	r24
    4488:	86 95       	lsr	r24
    448a:	98 2f       	mov	r25, r24
    448c:	91 70       	andi	r25, 0x01	; 1
    448e:	8a e1       	ldi	r24, 0x1A	; 26
    4490:	69 2f       	mov	r22, r25
    4492:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(LCD_D7_PIN,Copy_U8_Pins >> 3 & 0x01);
    4496:	89 81       	ldd	r24, Y+1	; 0x01
    4498:	86 95       	lsr	r24
    449a:	86 95       	lsr	r24
    449c:	86 95       	lsr	r24
    449e:	98 2f       	mov	r25, r24
    44a0:	91 70       	andi	r25, 0x01	; 1
    44a2:	8b e1       	ldi	r24, 0x1B	; 27
    44a4:	69 2f       	mov	r22, r25
    44a6:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
#endif
}
    44aa:	0f 90       	pop	r0
    44ac:	cf 91       	pop	r28
    44ae:	df 91       	pop	r29
    44b0:	08 95       	ret

000044b2 <H_KeyPad_Void_KeyPadInit>:
 */

#include "KeyPad_Interface.h"

void H_KeyPad_Void_KeyPadInit(void)
{
    44b2:	df 93       	push	r29
    44b4:	cf 93       	push	r28
    44b6:	cd b7       	in	r28, 0x3d	; 61
    44b8:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(KEYPAD_R0_PIN,OUTPUT);
    44ba:	81 e2       	ldi	r24, 0x21	; 33
    44bc:	61 e0       	ldi	r22, 0x01	; 1
    44be:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R1_PIN,OUTPUT);
    44c2:	82 e2       	ldi	r24, 0x22	; 34
    44c4:	61 e0       	ldi	r22, 0x01	; 1
    44c6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R2_PIN,OUTPUT);
    44ca:	83 e2       	ldi	r24, 0x23	; 35
    44cc:	61 e0       	ldi	r22, 0x01	; 1
    44ce:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_R3_PIN,OUTPUT);
    44d2:	84 e2       	ldi	r24, 0x24	; 36
    44d4:	61 e0       	ldi	r22, 0x01	; 1
    44d6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>

	M_DIO_Void_SetPinDirection(KEYPAD_C0_PIN,INPUT);
    44da:	88 e1       	ldi	r24, 0x18	; 24
    44dc:	60 e0       	ldi	r22, 0x00	; 0
    44de:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C1_PIN,INPUT);
    44e2:	89 e1       	ldi	r24, 0x19	; 25
    44e4:	60 e0       	ldi	r22, 0x00	; 0
    44e6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C2_PIN,INPUT);
    44ea:	8a e1       	ldi	r24, 0x1A	; 26
    44ec:	60 e0       	ldi	r22, 0x00	; 0
    44ee:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(KEYPAD_C3_PIN,INPUT);
    44f2:	8b e1       	ldi	r24, 0x1B	; 27
    44f4:	60 e0       	ldi	r22, 0x00	; 0
    44f6:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>

	// to activate internal pull up res
	M_DIO_Void_SetPinPullUpResistor(KEYPAD_C0_PIN,ENABLE);
    44fa:	88 e1       	ldi	r24, 0x18	; 24
    44fc:	61 e0       	ldi	r22, 0x01	; 1
    44fe:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <M_DIO_Void_SetPinPullUpResistor>
	M_DIO_Void_SetPinPullUpResistor(KEYPAD_C1_PIN,ENABLE);
    4502:	89 e1       	ldi	r24, 0x19	; 25
    4504:	61 e0       	ldi	r22, 0x01	; 1
    4506:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <M_DIO_Void_SetPinPullUpResistor>
	M_DIO_Void_SetPinPullUpResistor(KEYPAD_C2_PIN,ENABLE);
    450a:	8a e1       	ldi	r24, 0x1A	; 26
    450c:	61 e0       	ldi	r22, 0x01	; 1
    450e:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <M_DIO_Void_SetPinPullUpResistor>
	M_DIO_Void_SetPinPullUpResistor(KEYPAD_C3_PIN,ENABLE);
    4512:	8b e1       	ldi	r24, 0x1B	; 27
    4514:	61 e0       	ldi	r22, 0x01	; 1
    4516:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <M_DIO_Void_SetPinPullUpResistor>
	//	SET_BIT(PORTB_REG,4);

	M_DIO_Void_SetPinValue(KEYPAD_R0_PIN,HIGH);
    451a:	81 e2       	ldi	r24, 0x21	; 33
    451c:	61 e0       	ldi	r22, 0x01	; 1
    451e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R1_PIN,HIGH);
    4522:	82 e2       	ldi	r24, 0x22	; 34
    4524:	61 e0       	ldi	r22, 0x01	; 1
    4526:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R2_PIN,HIGH);
    452a:	83 e2       	ldi	r24, 0x23	; 35
    452c:	61 e0       	ldi	r22, 0x01	; 1
    452e:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
	M_DIO_Void_SetPinValue(KEYPAD_R3_PIN,HIGH);
    4532:	84 e2       	ldi	r24, 0x24	; 36
    4534:	61 e0       	ldi	r22, 0x01	; 1
    4536:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
}
    453a:	cf 91       	pop	r28
    453c:	df 91       	pop	r29
    453e:	08 95       	ret

00004540 <H_KeyPad_U8_KeyPadRead>:
u8 H_KeyPad_U8_KeyPadRead(void)
{
    4540:	df 93       	push	r29
    4542:	cf 93       	push	r28
    4544:	cd b7       	in	r28, 0x3d	; 61
    4546:	de b7       	in	r29, 0x3e	; 62
    4548:	a6 97       	sbiw	r28, 0x26	; 38
    454a:	0f b6       	in	r0, 0x3f	; 63
    454c:	f8 94       	cli
    454e:	de bf       	out	0x3e, r29	; 62
    4550:	0f be       	out	0x3f, r0	; 63
    4552:	cd bf       	out	0x3d, r28	; 61
	u8 Local_U8_Arr [4][4]= {{ '1','2','3','A'},
	                         { '4','5','6','B'},
   	                         { '7','8','9','C'},
    	                     { '*','0','#','D'}};
    4554:	ce 01       	movw	r24, r28
    4556:	42 96       	adiw	r24, 0x12	; 18
    4558:	9b a3       	std	Y+35, r25	; 0x23
    455a:	8a a3       	std	Y+34, r24	; 0x22
    455c:	e3 ee       	ldi	r30, 0xE3	; 227
    455e:	f1 e0       	ldi	r31, 0x01	; 1
    4560:	fd a3       	std	Y+37, r31	; 0x25
    4562:	ec a3       	std	Y+36, r30	; 0x24
    4564:	f0 e1       	ldi	r31, 0x10	; 16
    4566:	fe a3       	std	Y+38, r31	; 0x26
    4568:	ec a1       	ldd	r30, Y+36	; 0x24
    456a:	fd a1       	ldd	r31, Y+37	; 0x25
    456c:	00 80       	ld	r0, Z
    456e:	8c a1       	ldd	r24, Y+36	; 0x24
    4570:	9d a1       	ldd	r25, Y+37	; 0x25
    4572:	01 96       	adiw	r24, 0x01	; 1
    4574:	9d a3       	std	Y+37, r25	; 0x25
    4576:	8c a3       	std	Y+36, r24	; 0x24
    4578:	ea a1       	ldd	r30, Y+34	; 0x22
    457a:	fb a1       	ldd	r31, Y+35	; 0x23
    457c:	00 82       	st	Z, r0
    457e:	8a a1       	ldd	r24, Y+34	; 0x22
    4580:	9b a1       	ldd	r25, Y+35	; 0x23
    4582:	01 96       	adiw	r24, 0x01	; 1
    4584:	9b a3       	std	Y+35, r25	; 0x23
    4586:	8a a3       	std	Y+34, r24	; 0x22
    4588:	9e a1       	ldd	r25, Y+38	; 0x26
    458a:	91 50       	subi	r25, 0x01	; 1
    458c:	9e a3       	std	Y+38, r25	; 0x26
    458e:	ee a1       	ldd	r30, Y+38	; 0x26
    4590:	ee 23       	and	r30, r30
    4592:	51 f7       	brne	.-44     	; 0x4568 <H_KeyPad_U8_KeyPadRead+0x28>
	u8 Local_U8_Reading=0;
    4594:	19 8a       	std	Y+17, r1	; 0x11
	u8 Local_U8_Row=0;
    4596:	18 8a       	std	Y+16, r1	; 0x10
	u8 Local_U8_Col=0;
    4598:	1f 86       	std	Y+15, r1	; 0x0f
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
    459a:	81 e2       	ldi	r24, 0x21	; 33
    459c:	88 8b       	std	Y+16, r24	; 0x10
    459e:	b1 c0       	rjmp	.+354    	; 0x4702 <H_KeyPad_U8_KeyPadRead+0x1c2>
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
    45a0:	88 89       	ldd	r24, Y+16	; 0x10
    45a2:	60 e0       	ldi	r22, 0x00	; 0
    45a4:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
    45a8:	88 e1       	ldi	r24, 0x18	; 24
    45aa:	8f 87       	std	Y+15, r24	; 0x0f
    45ac:	9f c0       	rjmp	.+318    	; 0x46ec <H_KeyPad_U8_KeyPadRead+0x1ac>
		{
			if(M_DIO_U8_GetPinValue(Local_U8_Col)==KEYPAD_PRESSED)
    45ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    45b0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    45b4:	88 23       	and	r24, r24
    45b6:	09 f0       	breq	.+2      	; 0x45ba <H_KeyPad_U8_KeyPadRead+0x7a>
    45b8:	96 c0       	rjmp	.+300    	; 0x46e6 <H_KeyPad_U8_KeyPadRead+0x1a6>
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	90 e0       	ldi	r25, 0x00	; 0
    45be:	a0 ef       	ldi	r26, 0xF0	; 240
    45c0:	b2 e4       	ldi	r27, 0x42	; 66
    45c2:	8b 87       	std	Y+11, r24	; 0x0b
    45c4:	9c 87       	std	Y+12, r25	; 0x0c
    45c6:	ad 87       	std	Y+13, r26	; 0x0d
    45c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    45cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    45ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    45d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	4a e7       	ldi	r20, 0x7A	; 122
    45d8:	55 e4       	ldi	r21, 0x45	; 69
    45da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	8f 83       	std	Y+7, r24	; 0x07
    45e4:	98 87       	std	Y+8, r25	; 0x08
    45e6:	a9 87       	std	Y+9, r26	; 0x09
    45e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45ea:	6f 81       	ldd	r22, Y+7	; 0x07
    45ec:	78 85       	ldd	r23, Y+8	; 0x08
    45ee:	89 85       	ldd	r24, Y+9	; 0x09
    45f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f2:	20 e0       	ldi	r18, 0x00	; 0
    45f4:	30 e0       	ldi	r19, 0x00	; 0
    45f6:	40 e8       	ldi	r20, 0x80	; 128
    45f8:	5f e3       	ldi	r21, 0x3F	; 63
    45fa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    45fe:	88 23       	and	r24, r24
    4600:	2c f4       	brge	.+10     	; 0x460c <H_KeyPad_U8_KeyPadRead+0xcc>
		__ticks = 1;
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	90 e0       	ldi	r25, 0x00	; 0
    4606:	9e 83       	std	Y+6, r25	; 0x06
    4608:	8d 83       	std	Y+5, r24	; 0x05
    460a:	3f c0       	rjmp	.+126    	; 0x468a <H_KeyPad_U8_KeyPadRead+0x14a>
	else if (__tmp > 65535)
    460c:	6f 81       	ldd	r22, Y+7	; 0x07
    460e:	78 85       	ldd	r23, Y+8	; 0x08
    4610:	89 85       	ldd	r24, Y+9	; 0x09
    4612:	9a 85       	ldd	r25, Y+10	; 0x0a
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	3f ef       	ldi	r19, 0xFF	; 255
    4618:	4f e7       	ldi	r20, 0x7F	; 127
    461a:	57 e4       	ldi	r21, 0x47	; 71
    461c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4620:	18 16       	cp	r1, r24
    4622:	4c f5       	brge	.+82     	; 0x4676 <H_KeyPad_U8_KeyPadRead+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4624:	6b 85       	ldd	r22, Y+11	; 0x0b
    4626:	7c 85       	ldd	r23, Y+12	; 0x0c
    4628:	8d 85       	ldd	r24, Y+13	; 0x0d
    462a:	9e 85       	ldd	r25, Y+14	; 0x0e
    462c:	20 e0       	ldi	r18, 0x00	; 0
    462e:	30 e0       	ldi	r19, 0x00	; 0
    4630:	40 e2       	ldi	r20, 0x20	; 32
    4632:	51 e4       	ldi	r21, 0x41	; 65
    4634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	bc 01       	movw	r22, r24
    463e:	cd 01       	movw	r24, r26
    4640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4644:	dc 01       	movw	r26, r24
    4646:	cb 01       	movw	r24, r22
    4648:	9e 83       	std	Y+6, r25	; 0x06
    464a:	8d 83       	std	Y+5, r24	; 0x05
    464c:	0f c0       	rjmp	.+30     	; 0x466c <H_KeyPad_U8_KeyPadRead+0x12c>
    464e:	80 e9       	ldi	r24, 0x90	; 144
    4650:	91 e0       	ldi	r25, 0x01	; 1
    4652:	9c 83       	std	Y+4, r25	; 0x04
    4654:	8b 83       	std	Y+3, r24	; 0x03
    4656:	8b 81       	ldd	r24, Y+3	; 0x03
    4658:	9c 81       	ldd	r25, Y+4	; 0x04
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	f1 f7       	brne	.-4      	; 0x465a <H_KeyPad_U8_KeyPadRead+0x11a>
    465e:	9c 83       	std	Y+4, r25	; 0x04
    4660:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4662:	8d 81       	ldd	r24, Y+5	; 0x05
    4664:	9e 81       	ldd	r25, Y+6	; 0x06
    4666:	01 97       	sbiw	r24, 0x01	; 1
    4668:	9e 83       	std	Y+6, r25	; 0x06
    466a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    466c:	8d 81       	ldd	r24, Y+5	; 0x05
    466e:	9e 81       	ldd	r25, Y+6	; 0x06
    4670:	00 97       	sbiw	r24, 0x00	; 0
    4672:	69 f7       	brne	.-38     	; 0x464e <H_KeyPad_U8_KeyPadRead+0x10e>
    4674:	14 c0       	rjmp	.+40     	; 0x469e <H_KeyPad_U8_KeyPadRead+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4676:	6f 81       	ldd	r22, Y+7	; 0x07
    4678:	78 85       	ldd	r23, Y+8	; 0x08
    467a:	89 85       	ldd	r24, Y+9	; 0x09
    467c:	9a 85       	ldd	r25, Y+10	; 0x0a
    467e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4682:	dc 01       	movw	r26, r24
    4684:	cb 01       	movw	r24, r22
    4686:	9e 83       	std	Y+6, r25	; 0x06
    4688:	8d 83       	std	Y+5, r24	; 0x05
    468a:	8d 81       	ldd	r24, Y+5	; 0x05
    468c:	9e 81       	ldd	r25, Y+6	; 0x06
    468e:	9a 83       	std	Y+2, r25	; 0x02
    4690:	89 83       	std	Y+1, r24	; 0x01
    4692:	89 81       	ldd	r24, Y+1	; 0x01
    4694:	9a 81       	ldd	r25, Y+2	; 0x02
    4696:	01 97       	sbiw	r24, 0x01	; 1
    4698:	f1 f7       	brne	.-4      	; 0x4696 <H_KeyPad_U8_KeyPadRead+0x156>
    469a:	9a 83       	std	Y+2, r25	; 0x02
    469c:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(KEYPAD_DEBOUNCING_TIME);
				if(M_DIO_U8_GetPinValue(Local_U8_Col)==KEYPAD_PRESSED)
    469e:	8f 85       	ldd	r24, Y+15	; 0x0f
    46a0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    46a4:	88 23       	and	r24, r24
    46a6:	f9 f4       	brne	.+62     	; 0x46e6 <H_KeyPad_U8_KeyPadRead+0x1a6>
				{
				while(M_DIO_U8_GetPinValue(Local_U8_Col)==KEYPAD_PRESSED);
    46a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    46aa:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <M_DIO_U8_GetPinValue>
    46ae:	88 23       	and	r24, r24
    46b0:	d9 f3       	breq	.-10     	; 0x46a8 <H_KeyPad_U8_KeyPadRead+0x168>
				Local_U8_Reading=Local_U8_Arr [Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
    46b2:	88 89       	ldd	r24, Y+16	; 0x10
    46b4:	88 2f       	mov	r24, r24
    46b6:	90 e0       	ldi	r25, 0x00	; 0
    46b8:	9c 01       	movw	r18, r24
    46ba:	21 52       	subi	r18, 0x21	; 33
    46bc:	30 40       	sbci	r19, 0x00	; 0
    46be:	8f 85       	ldd	r24, Y+15	; 0x0f
    46c0:	88 2f       	mov	r24, r24
    46c2:	90 e0       	ldi	r25, 0x00	; 0
    46c4:	ac 01       	movw	r20, r24
    46c6:	48 51       	subi	r20, 0x18	; 24
    46c8:	50 40       	sbci	r21, 0x00	; 0
    46ca:	22 0f       	add	r18, r18
    46cc:	33 1f       	adc	r19, r19
    46ce:	22 0f       	add	r18, r18
    46d0:	33 1f       	adc	r19, r19
    46d2:	ce 01       	movw	r24, r28
    46d4:	01 96       	adiw	r24, 0x01	; 1
    46d6:	82 0f       	add	r24, r18
    46d8:	93 1f       	adc	r25, r19
    46da:	84 0f       	add	r24, r20
    46dc:	95 1f       	adc	r25, r21
    46de:	fc 01       	movw	r30, r24
    46e0:	71 96       	adiw	r30, 0x11	; 17
    46e2:	80 81       	ld	r24, Z
    46e4:	89 8b       	std	Y+17, r24	; 0x11
	u8 Local_U8_Row=0;
	u8 Local_U8_Col=0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
	{
		M_DIO_Void_SetPinValue(Local_U8_Row,LOW);
		for(Local_U8_Col=KEYPAD_C0_PIN;Local_U8_Col<=KEYPAD_C3_PIN;Local_U8_Col++)
    46e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    46e8:	8f 5f       	subi	r24, 0xFF	; 255
    46ea:	8f 87       	std	Y+15, r24	; 0x0f
    46ec:	8f 85       	ldd	r24, Y+15	; 0x0f
    46ee:	8c 31       	cpi	r24, 0x1C	; 28
    46f0:	08 f4       	brcc	.+2      	; 0x46f4 <H_KeyPad_U8_KeyPadRead+0x1b4>
    46f2:	5d cf       	rjmp	.-326    	; 0x45ae <H_KeyPad_U8_KeyPadRead+0x6e>
				while(M_DIO_U8_GetPinValue(Local_U8_Col)==KEYPAD_PRESSED);
				Local_U8_Reading=Local_U8_Arr [Local_U8_Row-KEYPAD_R0_PIN][Local_U8_Col-KEYPAD_C0_PIN];
				}
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
    46f4:	88 89       	ldd	r24, Y+16	; 0x10
    46f6:	61 e0       	ldi	r22, 0x01	; 1
    46f8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
   	                         { '7','8','9','C'},
    	                     { '*','0','#','D'}};
	u8 Local_U8_Reading=0;
	u8 Local_U8_Row=0;
	u8 Local_U8_Col=0;
	for(Local_U8_Row=KEYPAD_R0_PIN;Local_U8_Row<=KEYPAD_R3_PIN;Local_U8_Row++)
    46fc:	88 89       	ldd	r24, Y+16	; 0x10
    46fe:	8f 5f       	subi	r24, 0xFF	; 255
    4700:	88 8b       	std	Y+16, r24	; 0x10
    4702:	88 89       	ldd	r24, Y+16	; 0x10
    4704:	85 32       	cpi	r24, 0x25	; 37
    4706:	08 f4       	brcc	.+2      	; 0x470a <H_KeyPad_U8_KeyPadRead+0x1ca>
    4708:	4b cf       	rjmp	.-362    	; 0x45a0 <H_KeyPad_U8_KeyPadRead+0x60>
				}
			}
		}
		M_DIO_Void_SetPinValue(Local_U8_Row,HIGH);
	}
	return Local_U8_Reading;
    470a:	89 89       	ldd	r24, Y+17	; 0x11
}
    470c:	a6 96       	adiw	r28, 0x26	; 38
    470e:	0f b6       	in	r0, 0x3f	; 63
    4710:	f8 94       	cli
    4712:	de bf       	out	0x3e, r29	; 62
    4714:	0f be       	out	0x3f, r0	; 63
    4716:	cd bf       	out	0x3d, r28	; 61
    4718:	cf 91       	pop	r28
    471a:	df 91       	pop	r29
    471c:	08 95       	ret

0000471e <H_DCMotor_Void_DCMotorInit>:


#include "DCMotor_Interface.h"

void H_DCMotor_Void_DCMotorInit(void)
{
    471e:	df 93       	push	r29
    4720:	cf 93       	push	r28
    4722:	cd b7       	in	r28, 0x3d	; 61
    4724:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN1,OUTPUT);
    4726:	83 e2       	ldi	r24, 0x23	; 35
    4728:	61 e0       	ldi	r22, 0x01	; 1
    472a:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_DIO_Void_SetPinDirection(DC_MOTOR_PIN2,OUTPUT);
    472e:	84 e2       	ldi	r24, 0x24	; 36
    4730:	61 e0       	ldi	r22, 0x01	; 1
    4732:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
	M_TIMER_Void_PWMInit(TIMER1_CHANNEL);
    4736:	81 e0       	ldi	r24, 0x01	; 1
    4738:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <M_TIMER_Void_PWMInit>
}
    473c:	cf 91       	pop	r28
    473e:	df 91       	pop	r29
    4740:	08 95       	ret

00004742 <H_DCMotor_Void_DCMotorSetSpeed>:
void H_DCMotor_Void_DCMotorSetSpeed(u32 Copy_U32_MotorSpeed)
{
    4742:	df 93       	push	r29
    4744:	cf 93       	push	r28
    4746:	00 d0       	rcall	.+0      	; 0x4748 <H_DCMotor_Void_DCMotorSetSpeed+0x6>
    4748:	00 d0       	rcall	.+0      	; 0x474a <H_DCMotor_Void_DCMotorSetSpeed+0x8>
    474a:	cd b7       	in	r28, 0x3d	; 61
    474c:	de b7       	in	r29, 0x3e	; 62
    474e:	69 83       	std	Y+1, r22	; 0x01
    4750:	7a 83       	std	Y+2, r23	; 0x02
    4752:	8b 83       	std	Y+3, r24	; 0x03
    4754:	9c 83       	std	Y+4, r25	; 0x04
	M_TIMER_F32_PWMSetDutyCycle(TIMER1_CHANNEL,Copy_U32_MotorSpeed);
    4756:	69 81       	ldd	r22, Y+1	; 0x01
    4758:	7a 81       	ldd	r23, Y+2	; 0x02
    475a:	8b 81       	ldd	r24, Y+3	; 0x03
    475c:	9c 81       	ldd	r25, Y+4	; 0x04
    475e:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    4762:	9b 01       	movw	r18, r22
    4764:	ac 01       	movw	r20, r24
    4766:	81 e0       	ldi	r24, 0x01	; 1
    4768:	ba 01       	movw	r22, r20
    476a:	a9 01       	movw	r20, r18
    476c:	0e 94 bd 0a 	call	0x157a	; 0x157a <M_TIMER_F32_PWMSetDutyCycle>
}
    4770:	0f 90       	pop	r0
    4772:	0f 90       	pop	r0
    4774:	0f 90       	pop	r0
    4776:	0f 90       	pop	r0
    4778:	cf 91       	pop	r28
    477a:	df 91       	pop	r29
    477c:	08 95       	ret

0000477e <H_DCMotor_Void_DCMotorSetDirection>:
void H_DCMotor_Void_DCMotorSetDirection(u8 Copy_U8_Direction)
{
    477e:	df 93       	push	r29
    4780:	cf 93       	push	r28
    4782:	00 d0       	rcall	.+0      	; 0x4784 <H_DCMotor_Void_DCMotorSetDirection+0x6>
    4784:	0f 92       	push	r0
    4786:	cd b7       	in	r28, 0x3d	; 61
    4788:	de b7       	in	r29, 0x3e	; 62
    478a:	89 83       	std	Y+1, r24	; 0x01
	switch(Copy_U8_Direction)
    478c:	89 81       	ldd	r24, Y+1	; 0x01
    478e:	28 2f       	mov	r18, r24
    4790:	30 e0       	ldi	r19, 0x00	; 0
    4792:	3b 83       	std	Y+3, r19	; 0x03
    4794:	2a 83       	std	Y+2, r18	; 0x02
    4796:	8a 81       	ldd	r24, Y+2	; 0x02
    4798:	9b 81       	ldd	r25, Y+3	; 0x03
    479a:	00 97       	sbiw	r24, 0x00	; 0
    479c:	31 f0       	breq	.+12     	; 0x47aa <H_DCMotor_Void_DCMotorSetDirection+0x2c>
    479e:	2a 81       	ldd	r18, Y+2	; 0x02
    47a0:	3b 81       	ldd	r19, Y+3	; 0x03
    47a2:	21 30       	cpi	r18, 0x01	; 1
    47a4:	31 05       	cpc	r19, r1
    47a6:	51 f0       	breq	.+20     	; 0x47bc <H_DCMotor_Void_DCMotorSetDirection+0x3e>
    47a8:	11 c0       	rjmp	.+34     	; 0x47cc <H_DCMotor_Void_DCMotorSetDirection+0x4e>
	{
	case ACW:
		M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,LOW);
    47aa:	83 e2       	ldi	r24, 0x23	; 35
    47ac:	60 e0       	ldi	r22, 0x00	; 0
    47ae:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,HIGH);
    47b2:	84 e2       	ldi	r24, 0x24	; 36
    47b4:	61 e0       	ldi	r22, 0x01	; 1
    47b6:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    47ba:	08 c0       	rjmp	.+16     	; 0x47cc <H_DCMotor_Void_DCMotorSetDirection+0x4e>
		break;
	case CW:
		M_DIO_Void_SetPinValue(DC_MOTOR_PIN1,HIGH);
    47bc:	83 e2       	ldi	r24, 0x23	; 35
    47be:	61 e0       	ldi	r22, 0x01	; 1
    47c0:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
		M_DIO_Void_SetPinValue(DC_MOTOR_PIN2,LOW);
    47c4:	84 e2       	ldi	r24, 0x24	; 36
    47c6:	60 e0       	ldi	r22, 0x00	; 0
    47c8:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
		break;
	}
}
    47cc:	0f 90       	pop	r0
    47ce:	0f 90       	pop	r0
    47d0:	0f 90       	pop	r0
    47d2:	cf 91       	pop	r28
    47d4:	df 91       	pop	r29
    47d6:	08 95       	ret

000047d8 <H_DCMotor_Void_DCMotortart>:
void H_DCMotor_Void_DCMotortart(void)
{
    47d8:	df 93       	push	r29
    47da:	cf 93       	push	r28
    47dc:	cd b7       	in	r28, 0x3d	; 61
    47de:	de b7       	in	r29, 0x3e	; 62
	M_TIMER_U32_PWMStart(TIMER2_CHANNEL);
    47e0:	82 e0       	ldi	r24, 0x02	; 2
    47e2:	0e 94 33 0b 	call	0x1666	; 0x1666 <M_TIMER_U32_PWMStart>
}
    47e6:	cf 91       	pop	r28
    47e8:	df 91       	pop	r29
    47ea:	08 95       	ret

000047ec <H_DCMotor_Void_DCMotorStop>:
void H_DCMotor_Void_DCMotorStop(void)
{
    47ec:	df 93       	push	r29
    47ee:	cf 93       	push	r28
    47f0:	cd b7       	in	r28, 0x3d	; 61
    47f2:	de b7       	in	r29, 0x3e	; 62
	M_TIMER_U32_PWMStop(TIMER2_CHANNEL);
    47f4:	82 e0       	ldi	r24, 0x02	; 2
    47f6:	0e 94 40 0b 	call	0x1680	; 0x1680 <M_TIMER_U32_PWMStop>
}
    47fa:	cf 91       	pop	r28
    47fc:	df 91       	pop	r29
    47fe:	08 95       	ret

00004800 <H_Buzzer_Void_BuzzerInit>:
 */

#include "Buzzer_Interface.h"

void H_Buzzer_Void_BuzzerInit(void)
{
    4800:	df 93       	push	r29
    4802:	cf 93       	push	r28
    4804:	cd b7       	in	r28, 0x3d	; 61
    4806:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinDirection(Buzzer_PIN,OUTPUT);
    4808:	8d e0       	ldi	r24, 0x0D	; 13
    480a:	61 e0       	ldi	r22, 0x01	; 1
    480c:	0e 94 a2 0d 	call	0x1b44	; 0x1b44 <M_DIO_Void_SetPinDirection>
}
    4810:	cf 91       	pop	r28
    4812:	df 91       	pop	r29
    4814:	08 95       	ret

00004816 <H_Buzzer_Void_BuzzerSetOn>:
void H_Buzzer_Void_BuzzerSetOn(void)
{
    4816:	df 93       	push	r29
    4818:	cf 93       	push	r28
    481a:	cd b7       	in	r28, 0x3d	; 61
    481c:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(Buzzer_PIN,HIGH);
    481e:	8d e0       	ldi	r24, 0x0D	; 13
    4820:	61 e0       	ldi	r22, 0x01	; 1
    4822:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
}
    4826:	cf 91       	pop	r28
    4828:	df 91       	pop	r29
    482a:	08 95       	ret

0000482c <H_Buzzer_Void_BuzzerSetOff>:
void H_Buzzer_Void_BuzzerSetOff(void)
{
    482c:	df 93       	push	r29
    482e:	cf 93       	push	r28
    4830:	cd b7       	in	r28, 0x3d	; 61
    4832:	de b7       	in	r29, 0x3e	; 62
	M_DIO_Void_SetPinValue(Buzzer_PIN,LOW);
    4834:	8d e0       	ldi	r24, 0x0D	; 13
    4836:	60 e0       	ldi	r22, 0x00	; 0
    4838:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
}
    483c:	cf 91       	pop	r28
    483e:	df 91       	pop	r29
    4840:	08 95       	ret

00004842 <H_Buzzer_void_BuzzerOnce>:
void H_Buzzer_void_BuzzerOnce(void)
{
    4842:	df 93       	push	r29
    4844:	cf 93       	push	r28
    4846:	cd b7       	in	r28, 0x3d	; 61
    4848:	de b7       	in	r29, 0x3e	; 62
    484a:	2e 97       	sbiw	r28, 0x0e	; 14
    484c:	0f b6       	in	r0, 0x3f	; 63
    484e:	f8 94       	cli
    4850:	de bf       	out	0x3e, r29	; 62
    4852:	0f be       	out	0x3f, r0	; 63
    4854:	cd bf       	out	0x3d, r28	; 61
	M_DIO_Void_SetPinValue(Buzzer_PIN,HIGH);
    4856:	8d e0       	ldi	r24, 0x0D	; 13
    4858:	61 e0       	ldi	r22, 0x01	; 1
    485a:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
    485e:	80 e0       	ldi	r24, 0x00	; 0
    4860:	90 e0       	ldi	r25, 0x00	; 0
    4862:	a8 ec       	ldi	r26, 0xC8	; 200
    4864:	b2 e4       	ldi	r27, 0x42	; 66
    4866:	8b 87       	std	Y+11, r24	; 0x0b
    4868:	9c 87       	std	Y+12, r25	; 0x0c
    486a:	ad 87       	std	Y+13, r26	; 0x0d
    486c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    486e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4870:	7c 85       	ldd	r23, Y+12	; 0x0c
    4872:	8d 85       	ldd	r24, Y+13	; 0x0d
    4874:	9e 85       	ldd	r25, Y+14	; 0x0e
    4876:	20 e0       	ldi	r18, 0x00	; 0
    4878:	30 e0       	ldi	r19, 0x00	; 0
    487a:	4a e7       	ldi	r20, 0x7A	; 122
    487c:	55 e4       	ldi	r21, 0x45	; 69
    487e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4882:	dc 01       	movw	r26, r24
    4884:	cb 01       	movw	r24, r22
    4886:	8f 83       	std	Y+7, r24	; 0x07
    4888:	98 87       	std	Y+8, r25	; 0x08
    488a:	a9 87       	std	Y+9, r26	; 0x09
    488c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    488e:	6f 81       	ldd	r22, Y+7	; 0x07
    4890:	78 85       	ldd	r23, Y+8	; 0x08
    4892:	89 85       	ldd	r24, Y+9	; 0x09
    4894:	9a 85       	ldd	r25, Y+10	; 0x0a
    4896:	20 e0       	ldi	r18, 0x00	; 0
    4898:	30 e0       	ldi	r19, 0x00	; 0
    489a:	40 e8       	ldi	r20, 0x80	; 128
    489c:	5f e3       	ldi	r21, 0x3F	; 63
    489e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    48a2:	88 23       	and	r24, r24
    48a4:	2c f4       	brge	.+10     	; 0x48b0 <H_Buzzer_void_BuzzerOnce+0x6e>
		__ticks = 1;
    48a6:	81 e0       	ldi	r24, 0x01	; 1
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	9e 83       	std	Y+6, r25	; 0x06
    48ac:	8d 83       	std	Y+5, r24	; 0x05
    48ae:	3f c0       	rjmp	.+126    	; 0x492e <H_Buzzer_void_BuzzerOnce+0xec>
	else if (__tmp > 65535)
    48b0:	6f 81       	ldd	r22, Y+7	; 0x07
    48b2:	78 85       	ldd	r23, Y+8	; 0x08
    48b4:	89 85       	ldd	r24, Y+9	; 0x09
    48b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	3f ef       	ldi	r19, 0xFF	; 255
    48bc:	4f e7       	ldi	r20, 0x7F	; 127
    48be:	57 e4       	ldi	r21, 0x47	; 71
    48c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    48c4:	18 16       	cp	r1, r24
    48c6:	4c f5       	brge	.+82     	; 0x491a <H_Buzzer_void_BuzzerOnce+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    48c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    48ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    48cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    48ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    48d0:	20 e0       	ldi	r18, 0x00	; 0
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	40 e2       	ldi	r20, 0x20	; 32
    48d6:	51 e4       	ldi	r21, 0x41	; 65
    48d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48dc:	dc 01       	movw	r26, r24
    48de:	cb 01       	movw	r24, r22
    48e0:	bc 01       	movw	r22, r24
    48e2:	cd 01       	movw	r24, r26
    48e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48e8:	dc 01       	movw	r26, r24
    48ea:	cb 01       	movw	r24, r22
    48ec:	9e 83       	std	Y+6, r25	; 0x06
    48ee:	8d 83       	std	Y+5, r24	; 0x05
    48f0:	0f c0       	rjmp	.+30     	; 0x4910 <H_Buzzer_void_BuzzerOnce+0xce>
    48f2:	80 e9       	ldi	r24, 0x90	; 144
    48f4:	91 e0       	ldi	r25, 0x01	; 1
    48f6:	9c 83       	std	Y+4, r25	; 0x04
    48f8:	8b 83       	std	Y+3, r24	; 0x03
    48fa:	8b 81       	ldd	r24, Y+3	; 0x03
    48fc:	9c 81       	ldd	r25, Y+4	; 0x04
    48fe:	01 97       	sbiw	r24, 0x01	; 1
    4900:	f1 f7       	brne	.-4      	; 0x48fe <H_Buzzer_void_BuzzerOnce+0xbc>
    4902:	9c 83       	std	Y+4, r25	; 0x04
    4904:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4906:	8d 81       	ldd	r24, Y+5	; 0x05
    4908:	9e 81       	ldd	r25, Y+6	; 0x06
    490a:	01 97       	sbiw	r24, 0x01	; 1
    490c:	9e 83       	std	Y+6, r25	; 0x06
    490e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4910:	8d 81       	ldd	r24, Y+5	; 0x05
    4912:	9e 81       	ldd	r25, Y+6	; 0x06
    4914:	00 97       	sbiw	r24, 0x00	; 0
    4916:	69 f7       	brne	.-38     	; 0x48f2 <H_Buzzer_void_BuzzerOnce+0xb0>
    4918:	14 c0       	rjmp	.+40     	; 0x4942 <H_Buzzer_void_BuzzerOnce+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    491a:	6f 81       	ldd	r22, Y+7	; 0x07
    491c:	78 85       	ldd	r23, Y+8	; 0x08
    491e:	89 85       	ldd	r24, Y+9	; 0x09
    4920:	9a 85       	ldd	r25, Y+10	; 0x0a
    4922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4926:	dc 01       	movw	r26, r24
    4928:	cb 01       	movw	r24, r22
    492a:	9e 83       	std	Y+6, r25	; 0x06
    492c:	8d 83       	std	Y+5, r24	; 0x05
    492e:	8d 81       	ldd	r24, Y+5	; 0x05
    4930:	9e 81       	ldd	r25, Y+6	; 0x06
    4932:	9a 83       	std	Y+2, r25	; 0x02
    4934:	89 83       	std	Y+1, r24	; 0x01
    4936:	89 81       	ldd	r24, Y+1	; 0x01
    4938:	9a 81       	ldd	r25, Y+2	; 0x02
    493a:	01 97       	sbiw	r24, 0x01	; 1
    493c:	f1 f7       	brne	.-4      	; 0x493a <H_Buzzer_void_BuzzerOnce+0xf8>
    493e:	9a 83       	std	Y+2, r25	; 0x02
    4940:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(BUZZER_TIME_ON);
	M_DIO_Void_SetPinValue(Buzzer_PIN,LOW);
    4942:	8d e0       	ldi	r24, 0x0D	; 13
    4944:	60 e0       	ldi	r22, 0x00	; 0
    4946:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <M_DIO_Void_SetPinValue>
}
    494a:	2e 96       	adiw	r28, 0x0e	; 14
    494c:	0f b6       	in	r0, 0x3f	; 63
    494e:	f8 94       	cli
    4950:	de bf       	out	0x3e, r29	; 62
    4952:	0f be       	out	0x3f, r0	; 63
    4954:	cd bf       	out	0x3d, r28	; 61
    4956:	cf 91       	pop	r28
    4958:	df 91       	pop	r29
    495a:	08 95       	ret

0000495c <main>:
#define Finger_Sensor_3_Bent 390
#define Finger_Sensor_4_Bent 300
#define Finger_Sensor_5_Bent 150

int main()
{
    495c:	0f 93       	push	r16
    495e:	1f 93       	push	r17
    4960:	df 93       	push	r29
    4962:	cf 93       	push	r28
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
    4968:	cc 5d       	subi	r28, 0xDC	; 220
    496a:	d0 40       	sbci	r29, 0x00	; 0
    496c:	0f b6       	in	r0, 0x3f	; 63
    496e:	f8 94       	cli
    4970:	de bf       	out	0x3e, r29	; 62
    4972:	0f be       	out	0x3f, r0	; 63
    4974:	cd bf       	out	0x3d, r28	; 61
	H_LCD_Void_LCDInit();
    4976:	0e 94 49 1c 	call	0x3892	; 0x3892 <H_LCD_Void_LCDInit>
	M_ADC_Void_ADCInit();
    497a:	0e 94 38 13 	call	0x2670	; 0x2670 <M_ADC_Void_ADCInit>
	H_LED_Void_LedInit(LED0);
    497e:	80 e0       	ldi	r24, 0x00	; 0
    4980:	0e 94 94 1b 	call	0x3728	; 0x3728 <H_LED_Void_LedInit>
	u16 Finger_Sensor_1 = 0 , Finger_Sensor_2 = 0 , Finger_Sensor_3 = 0 , Finger_Sensor_4 = 0 , Finger_Sensor_5 = 0;
    4984:	fe 01       	movw	r30, r28
    4986:	e5 52       	subi	r30, 0x25	; 37
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	11 82       	std	Z+1, r1	; 0x01
    498c:	10 82       	st	Z, r1
    498e:	fe 01       	movw	r30, r28
    4990:	e7 52       	subi	r30, 0x27	; 39
    4992:	ff 4f       	sbci	r31, 0xFF	; 255
    4994:	11 82       	std	Z+1, r1	; 0x01
    4996:	10 82       	st	Z, r1
    4998:	fe 01       	movw	r30, r28
    499a:	e9 52       	subi	r30, 0x29	; 41
    499c:	ff 4f       	sbci	r31, 0xFF	; 255
    499e:	11 82       	std	Z+1, r1	; 0x01
    49a0:	10 82       	st	Z, r1
    49a2:	fe 01       	movw	r30, r28
    49a4:	eb 52       	subi	r30, 0x2B	; 43
    49a6:	ff 4f       	sbci	r31, 0xFF	; 255
    49a8:	11 82       	std	Z+1, r1	; 0x01
    49aa:	10 82       	st	Z, r1
    49ac:	fe 01       	movw	r30, r28
    49ae:	ed 52       	subi	r30, 0x2D	; 45
    49b0:	ff 4f       	sbci	r31, 0xFF	; 255
    49b2:	11 82       	std	Z+1, r1	; 0x01
    49b4:	10 82       	st	Z, r1
	 * Finger_Sensor_4 for Middle Finger
	 * Finger_Sensor_5 for Ring Finger
	 */
	while(1)
	{
		H_LCD_Void_LCDClear();
    49b6:	0e 94 23 22 	call	0x4446	; 0x4446 <H_LCD_Void_LCDClear>
		Finger_Sensor_1 = M_ADC_U16_ADCRead(ADC_CHANNEL_0);
    49ba:	80 e0       	ldi	r24, 0x00	; 0
    49bc:	0e 94 77 13 	call	0x26ee	; 0x26ee <M_ADC_U16_ADCRead>
    49c0:	fe 01       	movw	r30, r28
    49c2:	e5 52       	subi	r30, 0x25	; 37
    49c4:	ff 4f       	sbci	r31, 0xFF	; 255
    49c6:	91 83       	std	Z+1, r25	; 0x01
    49c8:	80 83       	st	Z, r24
		Finger_Sensor_2 = M_ADC_U16_ADCRead(ADC_CHANNEL_4);
    49ca:	84 e0       	ldi	r24, 0x04	; 4
    49cc:	0e 94 77 13 	call	0x26ee	; 0x26ee <M_ADC_U16_ADCRead>
    49d0:	fe 01       	movw	r30, r28
    49d2:	e7 52       	subi	r30, 0x27	; 39
    49d4:	ff 4f       	sbci	r31, 0xFF	; 255
    49d6:	91 83       	std	Z+1, r25	; 0x01
    49d8:	80 83       	st	Z, r24
		Finger_Sensor_3 = M_ADC_U16_ADCRead(ADC_CHANNEL_5);
    49da:	85 e0       	ldi	r24, 0x05	; 5
    49dc:	0e 94 77 13 	call	0x26ee	; 0x26ee <M_ADC_U16_ADCRead>
    49e0:	fe 01       	movw	r30, r28
    49e2:	e9 52       	subi	r30, 0x29	; 41
    49e4:	ff 4f       	sbci	r31, 0xFF	; 255
    49e6:	91 83       	std	Z+1, r25	; 0x01
    49e8:	80 83       	st	Z, r24
		Finger_Sensor_4 = M_ADC_U16_ADCRead(ADC_CHANNEL_6);
    49ea:	86 e0       	ldi	r24, 0x06	; 6
    49ec:	0e 94 77 13 	call	0x26ee	; 0x26ee <M_ADC_U16_ADCRead>
    49f0:	fe 01       	movw	r30, r28
    49f2:	eb 52       	subi	r30, 0x2B	; 43
    49f4:	ff 4f       	sbci	r31, 0xFF	; 255
    49f6:	91 83       	std	Z+1, r25	; 0x01
    49f8:	80 83       	st	Z, r24
		Finger_Sensor_5 = M_ADC_U16_ADCRead(ADC_CHANNEL_7);
    49fa:	87 e0       	ldi	r24, 0x07	; 7
    49fc:	0e 94 77 13 	call	0x26ee	; 0x26ee <M_ADC_U16_ADCRead>
    4a00:	fe 01       	movw	r30, r28
    4a02:	ed 52       	subi	r30, 0x2D	; 45
    4a04:	ff 4f       	sbci	r31, 0xFF	; 255
    4a06:	91 83       	std	Z+1, r25	; 0x01
    4a08:	80 83       	st	Z, r24
		//No fingers used
		if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	e5 52       	subi	r30, 0x25	; 37
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	80 81       	ld	r24, Z
    4a12:	91 81       	ldd	r25, Z+1	; 0x01
    4a14:	82 34       	cpi	r24, 0x42	; 66
    4a16:	91 05       	cpc	r25, r1
    4a18:	08 f4       	brcc	.+2      	; 0x4a1c <main+0xc0>
    4a1a:	e0 c0       	rjmp	.+448    	; 0x4bdc <main+0x280>
    4a1c:	fe 01       	movw	r30, r28
    4a1e:	e7 52       	subi	r30, 0x27	; 39
    4a20:	ff 4f       	sbci	r31, 0xFF	; 255
    4a22:	80 81       	ld	r24, Z
    4a24:	91 81       	ldd	r25, Z+1	; 0x01
    4a26:	21 e0       	ldi	r18, 0x01	; 1
    4a28:	8c 37       	cpi	r24, 0x7C	; 124
    4a2a:	92 07       	cpc	r25, r18
    4a2c:	08 f0       	brcs	.+2      	; 0x4a30 <main+0xd4>
    4a2e:	d6 c0       	rjmp	.+428    	; 0x4bdc <main+0x280>
    4a30:	fe 01       	movw	r30, r28
    4a32:	e9 52       	subi	r30, 0x29	; 41
    4a34:	ff 4f       	sbci	r31, 0xFF	; 255
    4a36:	80 81       	ld	r24, Z
    4a38:	91 81       	ldd	r25, Z+1	; 0x01
    4a3a:	e1 e0       	ldi	r30, 0x01	; 1
    4a3c:	86 38       	cpi	r24, 0x86	; 134
    4a3e:	9e 07       	cpc	r25, r30
    4a40:	08 f0       	brcs	.+2      	; 0x4a44 <main+0xe8>
    4a42:	cc c0       	rjmp	.+408    	; 0x4bdc <main+0x280>
    4a44:	fe 01       	movw	r30, r28
    4a46:	eb 52       	subi	r30, 0x2B	; 43
    4a48:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4a:	80 81       	ld	r24, Z
    4a4c:	91 81       	ldd	r25, Z+1	; 0x01
    4a4e:	f1 e0       	ldi	r31, 0x01	; 1
    4a50:	8d 32       	cpi	r24, 0x2D	; 45
    4a52:	9f 07       	cpc	r25, r31
    4a54:	08 f4       	brcc	.+2      	; 0x4a58 <main+0xfc>
    4a56:	c2 c0       	rjmp	.+388    	; 0x4bdc <main+0x280>
    4a58:	fe 01       	movw	r30, r28
    4a5a:	ed 52       	subi	r30, 0x2D	; 45
    4a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a5e:	80 81       	ld	r24, Z
    4a60:	91 81       	ldd	r25, Z+1	; 0x01
    4a62:	87 39       	cpi	r24, 0x97	; 151
    4a64:	91 05       	cpc	r25, r1
    4a66:	08 f4       	brcc	.+2      	; 0x4a6a <main+0x10e>
    4a68:	b9 c0       	rjmp	.+370    	; 0x4bdc <main+0x280>
		{
			H_LCD_Void_LCDWriteString("No to Racism");
    4a6a:	80 e6       	ldi	r24, 0x60	; 96
    4a6c:	90 e0       	ldi	r25, 0x00	; 0
    4a6e:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    4a72:	fe 01       	movw	r30, r28
    4a74:	e1 53       	subi	r30, 0x31	; 49
    4a76:	ff 4f       	sbci	r31, 0xFF	; 255
    4a78:	80 e0       	ldi	r24, 0x00	; 0
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	aa ef       	ldi	r26, 0xFA	; 250
    4a7e:	b3 e4       	ldi	r27, 0x43	; 67
    4a80:	80 83       	st	Z, r24
    4a82:	91 83       	std	Z+1, r25	; 0x01
    4a84:	a2 83       	std	Z+2, r26	; 0x02
    4a86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4a88:	8e 01       	movw	r16, r28
    4a8a:	05 53       	subi	r16, 0x35	; 53
    4a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a8e:	fe 01       	movw	r30, r28
    4a90:	e1 53       	subi	r30, 0x31	; 49
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	60 81       	ld	r22, Z
    4a96:	71 81       	ldd	r23, Z+1	; 0x01
    4a98:	82 81       	ldd	r24, Z+2	; 0x02
    4a9a:	93 81       	ldd	r25, Z+3	; 0x03
    4a9c:	20 e0       	ldi	r18, 0x00	; 0
    4a9e:	30 e0       	ldi	r19, 0x00	; 0
    4aa0:	4a e7       	ldi	r20, 0x7A	; 122
    4aa2:	55 e4       	ldi	r21, 0x45	; 69
    4aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	cb 01       	movw	r24, r22
    4aac:	f8 01       	movw	r30, r16
    4aae:	80 83       	st	Z, r24
    4ab0:	91 83       	std	Z+1, r25	; 0x01
    4ab2:	a2 83       	std	Z+2, r26	; 0x02
    4ab4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4ab6:	fe 01       	movw	r30, r28
    4ab8:	e5 53       	subi	r30, 0x35	; 53
    4aba:	ff 4f       	sbci	r31, 0xFF	; 255
    4abc:	60 81       	ld	r22, Z
    4abe:	71 81       	ldd	r23, Z+1	; 0x01
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	20 e0       	ldi	r18, 0x00	; 0
    4ac6:	30 e0       	ldi	r19, 0x00	; 0
    4ac8:	40 e8       	ldi	r20, 0x80	; 128
    4aca:	5f e3       	ldi	r21, 0x3F	; 63
    4acc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4ad0:	88 23       	and	r24, r24
    4ad2:	44 f4       	brge	.+16     	; 0x4ae4 <main+0x188>
		__ticks = 1;
    4ad4:	fe 01       	movw	r30, r28
    4ad6:	e7 53       	subi	r30, 0x37	; 55
    4ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    4ada:	81 e0       	ldi	r24, 0x01	; 1
    4adc:	90 e0       	ldi	r25, 0x00	; 0
    4ade:	91 83       	std	Z+1, r25	; 0x01
    4ae0:	80 83       	st	Z, r24
    4ae2:	64 c0       	rjmp	.+200    	; 0x4bac <main+0x250>
	else if (__tmp > 65535)
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	e5 53       	subi	r30, 0x35	; 53
    4ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    4aea:	60 81       	ld	r22, Z
    4aec:	71 81       	ldd	r23, Z+1	; 0x01
    4aee:	82 81       	ldd	r24, Z+2	; 0x02
    4af0:	93 81       	ldd	r25, Z+3	; 0x03
    4af2:	20 e0       	ldi	r18, 0x00	; 0
    4af4:	3f ef       	ldi	r19, 0xFF	; 255
    4af6:	4f e7       	ldi	r20, 0x7F	; 127
    4af8:	57 e4       	ldi	r21, 0x47	; 71
    4afa:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4afe:	18 16       	cp	r1, r24
    4b00:	0c f0       	brlt	.+2      	; 0x4b04 <main+0x1a8>
    4b02:	43 c0       	rjmp	.+134    	; 0x4b8a <main+0x22e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b04:	fe 01       	movw	r30, r28
    4b06:	e1 53       	subi	r30, 0x31	; 49
    4b08:	ff 4f       	sbci	r31, 0xFF	; 255
    4b0a:	60 81       	ld	r22, Z
    4b0c:	71 81       	ldd	r23, Z+1	; 0x01
    4b0e:	82 81       	ldd	r24, Z+2	; 0x02
    4b10:	93 81       	ldd	r25, Z+3	; 0x03
    4b12:	20 e0       	ldi	r18, 0x00	; 0
    4b14:	30 e0       	ldi	r19, 0x00	; 0
    4b16:	40 e2       	ldi	r20, 0x20	; 32
    4b18:	51 e4       	ldi	r21, 0x41	; 65
    4b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	8e 01       	movw	r16, r28
    4b24:	07 53       	subi	r16, 0x37	; 55
    4b26:	1f 4f       	sbci	r17, 0xFF	; 255
    4b28:	bc 01       	movw	r22, r24
    4b2a:	cd 01       	movw	r24, r26
    4b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b30:	dc 01       	movw	r26, r24
    4b32:	cb 01       	movw	r24, r22
    4b34:	f8 01       	movw	r30, r16
    4b36:	91 83       	std	Z+1, r25	; 0x01
    4b38:	80 83       	st	Z, r24
    4b3a:	1f c0       	rjmp	.+62     	; 0x4b7a <main+0x21e>
    4b3c:	fe 01       	movw	r30, r28
    4b3e:	e9 53       	subi	r30, 0x39	; 57
    4b40:	ff 4f       	sbci	r31, 0xFF	; 255
    4b42:	80 e9       	ldi	r24, 0x90	; 144
    4b44:	91 e0       	ldi	r25, 0x01	; 1
    4b46:	91 83       	std	Z+1, r25	; 0x01
    4b48:	80 83       	st	Z, r24
    4b4a:	fe 01       	movw	r30, r28
    4b4c:	e9 53       	subi	r30, 0x39	; 57
    4b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b50:	80 81       	ld	r24, Z
    4b52:	91 81       	ldd	r25, Z+1	; 0x01
    4b54:	01 97       	sbiw	r24, 0x01	; 1
    4b56:	f1 f7       	brne	.-4      	; 0x4b54 <main+0x1f8>
    4b58:	fe 01       	movw	r30, r28
    4b5a:	e9 53       	subi	r30, 0x39	; 57
    4b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b5e:	91 83       	std	Z+1, r25	; 0x01
    4b60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b62:	de 01       	movw	r26, r28
    4b64:	a7 53       	subi	r26, 0x37	; 55
    4b66:	bf 4f       	sbci	r27, 0xFF	; 255
    4b68:	fe 01       	movw	r30, r28
    4b6a:	e7 53       	subi	r30, 0x37	; 55
    4b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b6e:	80 81       	ld	r24, Z
    4b70:	91 81       	ldd	r25, Z+1	; 0x01
    4b72:	01 97       	sbiw	r24, 0x01	; 1
    4b74:	11 96       	adiw	r26, 0x01	; 1
    4b76:	9c 93       	st	X, r25
    4b78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b7a:	fe 01       	movw	r30, r28
    4b7c:	e7 53       	subi	r30, 0x37	; 55
    4b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b80:	80 81       	ld	r24, Z
    4b82:	91 81       	ldd	r25, Z+1	; 0x01
    4b84:	00 97       	sbiw	r24, 0x00	; 0
    4b86:	d1 f6       	brne	.-76     	; 0x4b3c <main+0x1e0>
    4b88:	16 cf       	rjmp	.-468    	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b8a:	8e 01       	movw	r16, r28
    4b8c:	07 53       	subi	r16, 0x37	; 55
    4b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b90:	fe 01       	movw	r30, r28
    4b92:	e5 53       	subi	r30, 0x35	; 53
    4b94:	ff 4f       	sbci	r31, 0xFF	; 255
    4b96:	60 81       	ld	r22, Z
    4b98:	71 81       	ldd	r23, Z+1	; 0x01
    4b9a:	82 81       	ldd	r24, Z+2	; 0x02
    4b9c:	93 81       	ldd	r25, Z+3	; 0x03
    4b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ba2:	dc 01       	movw	r26, r24
    4ba4:	cb 01       	movw	r24, r22
    4ba6:	f8 01       	movw	r30, r16
    4ba8:	91 83       	std	Z+1, r25	; 0x01
    4baa:	80 83       	st	Z, r24
    4bac:	de 01       	movw	r26, r28
    4bae:	ab 53       	subi	r26, 0x3B	; 59
    4bb0:	bf 4f       	sbci	r27, 0xFF	; 255
    4bb2:	fe 01       	movw	r30, r28
    4bb4:	e7 53       	subi	r30, 0x37	; 55
    4bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bb8:	80 81       	ld	r24, Z
    4bba:	91 81       	ldd	r25, Z+1	; 0x01
    4bbc:	11 96       	adiw	r26, 0x01	; 1
    4bbe:	9c 93       	st	X, r25
    4bc0:	8e 93       	st	-X, r24
    4bc2:	fe 01       	movw	r30, r28
    4bc4:	eb 53       	subi	r30, 0x3B	; 59
    4bc6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc8:	80 81       	ld	r24, Z
    4bca:	91 81       	ldd	r25, Z+1	; 0x01
    4bcc:	01 97       	sbiw	r24, 0x01	; 1
    4bce:	f1 f7       	brne	.-4      	; 0x4bcc <main+0x270>
    4bd0:	fe 01       	movw	r30, r28
    4bd2:	eb 53       	subi	r30, 0x3B	; 59
    4bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd6:	91 83       	std	Z+1, r25	; 0x01
    4bd8:	80 83       	st	Z, r24
    4bda:	ed ce       	rjmp	.-550    	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		//One finger used
		// print Hi if first finger only flexed
		else if(Finger_Sensor_1 >Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    4bdc:	fe 01       	movw	r30, r28
    4bde:	e5 52       	subi	r30, 0x25	; 37
    4be0:	ff 4f       	sbci	r31, 0xFF	; 255
    4be2:	80 81       	ld	r24, Z
    4be4:	91 81       	ldd	r25, Z+1	; 0x01
    4be6:	82 34       	cpi	r24, 0x42	; 66
    4be8:	91 05       	cpc	r25, r1
    4bea:	08 f4       	brcc	.+2      	; 0x4bee <main+0x292>
    4bec:	e0 c0       	rjmp	.+448    	; 0x4dae <main+0x452>
    4bee:	fe 01       	movw	r30, r28
    4bf0:	e7 52       	subi	r30, 0x27	; 39
    4bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf4:	80 81       	ld	r24, Z
    4bf6:	91 81       	ldd	r25, Z+1	; 0x01
    4bf8:	f1 e0       	ldi	r31, 0x01	; 1
    4bfa:	8c 37       	cpi	r24, 0x7C	; 124
    4bfc:	9f 07       	cpc	r25, r31
    4bfe:	08 f0       	brcs	.+2      	; 0x4c02 <main+0x2a6>
    4c00:	d6 c0       	rjmp	.+428    	; 0x4dae <main+0x452>
    4c02:	fe 01       	movw	r30, r28
    4c04:	e9 52       	subi	r30, 0x29	; 41
    4c06:	ff 4f       	sbci	r31, 0xFF	; 255
    4c08:	80 81       	ld	r24, Z
    4c0a:	91 81       	ldd	r25, Z+1	; 0x01
    4c0c:	21 e0       	ldi	r18, 0x01	; 1
    4c0e:	87 38       	cpi	r24, 0x87	; 135
    4c10:	92 07       	cpc	r25, r18
    4c12:	08 f4       	brcc	.+2      	; 0x4c16 <main+0x2ba>
    4c14:	cc c0       	rjmp	.+408    	; 0x4dae <main+0x452>
    4c16:	fe 01       	movw	r30, r28
    4c18:	eb 52       	subi	r30, 0x2B	; 43
    4c1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c1c:	80 81       	ld	r24, Z
    4c1e:	91 81       	ldd	r25, Z+1	; 0x01
    4c20:	e1 e0       	ldi	r30, 0x01	; 1
    4c22:	8d 32       	cpi	r24, 0x2D	; 45
    4c24:	9e 07       	cpc	r25, r30
    4c26:	08 f4       	brcc	.+2      	; 0x4c2a <main+0x2ce>
    4c28:	c2 c0       	rjmp	.+388    	; 0x4dae <main+0x452>
    4c2a:	fe 01       	movw	r30, r28
    4c2c:	ed 52       	subi	r30, 0x2D	; 45
    4c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4c30:	80 81       	ld	r24, Z
    4c32:	91 81       	ldd	r25, Z+1	; 0x01
    4c34:	87 39       	cpi	r24, 0x97	; 151
    4c36:	91 05       	cpc	r25, r1
    4c38:	08 f4       	brcc	.+2      	; 0x4c3c <main+0x2e0>
    4c3a:	b9 c0       	rjmp	.+370    	; 0x4dae <main+0x452>
		{
			H_LCD_Void_LCDWriteString("Hi");
    4c3c:	8d e6       	ldi	r24, 0x6D	; 109
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    4c44:	fe 01       	movw	r30, r28
    4c46:	ef 53       	subi	r30, 0x3F	; 63
    4c48:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4a:	80 e0       	ldi	r24, 0x00	; 0
    4c4c:	90 e0       	ldi	r25, 0x00	; 0
    4c4e:	aa ef       	ldi	r26, 0xFA	; 250
    4c50:	b3 e4       	ldi	r27, 0x43	; 67
    4c52:	80 83       	st	Z, r24
    4c54:	91 83       	std	Z+1, r25	; 0x01
    4c56:	a2 83       	std	Z+2, r26	; 0x02
    4c58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c5a:	8e 01       	movw	r16, r28
    4c5c:	03 54       	subi	r16, 0x43	; 67
    4c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c60:	fe 01       	movw	r30, r28
    4c62:	ef 53       	subi	r30, 0x3F	; 63
    4c64:	ff 4f       	sbci	r31, 0xFF	; 255
    4c66:	60 81       	ld	r22, Z
    4c68:	71 81       	ldd	r23, Z+1	; 0x01
    4c6a:	82 81       	ldd	r24, Z+2	; 0x02
    4c6c:	93 81       	ldd	r25, Z+3	; 0x03
    4c6e:	20 e0       	ldi	r18, 0x00	; 0
    4c70:	30 e0       	ldi	r19, 0x00	; 0
    4c72:	4a e7       	ldi	r20, 0x7A	; 122
    4c74:	55 e4       	ldi	r21, 0x45	; 69
    4c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c7a:	dc 01       	movw	r26, r24
    4c7c:	cb 01       	movw	r24, r22
    4c7e:	f8 01       	movw	r30, r16
    4c80:	80 83       	st	Z, r24
    4c82:	91 83       	std	Z+1, r25	; 0x01
    4c84:	a2 83       	std	Z+2, r26	; 0x02
    4c86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c88:	fe 01       	movw	r30, r28
    4c8a:	e3 54       	subi	r30, 0x43	; 67
    4c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8e:	60 81       	ld	r22, Z
    4c90:	71 81       	ldd	r23, Z+1	; 0x01
    4c92:	82 81       	ldd	r24, Z+2	; 0x02
    4c94:	93 81       	ldd	r25, Z+3	; 0x03
    4c96:	20 e0       	ldi	r18, 0x00	; 0
    4c98:	30 e0       	ldi	r19, 0x00	; 0
    4c9a:	40 e8       	ldi	r20, 0x80	; 128
    4c9c:	5f e3       	ldi	r21, 0x3F	; 63
    4c9e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4ca2:	88 23       	and	r24, r24
    4ca4:	44 f4       	brge	.+16     	; 0x4cb6 <main+0x35a>
		__ticks = 1;
    4ca6:	fe 01       	movw	r30, r28
    4ca8:	e5 54       	subi	r30, 0x45	; 69
    4caa:	ff 4f       	sbci	r31, 0xFF	; 255
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	91 83       	std	Z+1, r25	; 0x01
    4cb2:	80 83       	st	Z, r24
    4cb4:	64 c0       	rjmp	.+200    	; 0x4d7e <main+0x422>
	else if (__tmp > 65535)
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e3 54       	subi	r30, 0x43	; 67
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	60 81       	ld	r22, Z
    4cbe:	71 81       	ldd	r23, Z+1	; 0x01
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	93 81       	ldd	r25, Z+3	; 0x03
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	3f ef       	ldi	r19, 0xFF	; 255
    4cc8:	4f e7       	ldi	r20, 0x7F	; 127
    4cca:	57 e4       	ldi	r21, 0x47	; 71
    4ccc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4cd0:	18 16       	cp	r1, r24
    4cd2:	0c f0       	brlt	.+2      	; 0x4cd6 <main+0x37a>
    4cd4:	43 c0       	rjmp	.+134    	; 0x4d5c <main+0x400>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cd6:	fe 01       	movw	r30, r28
    4cd8:	ef 53       	subi	r30, 0x3F	; 63
    4cda:	ff 4f       	sbci	r31, 0xFF	; 255
    4cdc:	60 81       	ld	r22, Z
    4cde:	71 81       	ldd	r23, Z+1	; 0x01
    4ce0:	82 81       	ldd	r24, Z+2	; 0x02
    4ce2:	93 81       	ldd	r25, Z+3	; 0x03
    4ce4:	20 e0       	ldi	r18, 0x00	; 0
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	40 e2       	ldi	r20, 0x20	; 32
    4cea:	51 e4       	ldi	r21, 0x41	; 65
    4cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cf0:	dc 01       	movw	r26, r24
    4cf2:	cb 01       	movw	r24, r22
    4cf4:	8e 01       	movw	r16, r28
    4cf6:	05 54       	subi	r16, 0x45	; 69
    4cf8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cfa:	bc 01       	movw	r22, r24
    4cfc:	cd 01       	movw	r24, r26
    4cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d02:	dc 01       	movw	r26, r24
    4d04:	cb 01       	movw	r24, r22
    4d06:	f8 01       	movw	r30, r16
    4d08:	91 83       	std	Z+1, r25	; 0x01
    4d0a:	80 83       	st	Z, r24
    4d0c:	1f c0       	rjmp	.+62     	; 0x4d4c <main+0x3f0>
    4d0e:	fe 01       	movw	r30, r28
    4d10:	e7 54       	subi	r30, 0x47	; 71
    4d12:	ff 4f       	sbci	r31, 0xFF	; 255
    4d14:	80 e9       	ldi	r24, 0x90	; 144
    4d16:	91 e0       	ldi	r25, 0x01	; 1
    4d18:	91 83       	std	Z+1, r25	; 0x01
    4d1a:	80 83       	st	Z, r24
    4d1c:	fe 01       	movw	r30, r28
    4d1e:	e7 54       	subi	r30, 0x47	; 71
    4d20:	ff 4f       	sbci	r31, 0xFF	; 255
    4d22:	80 81       	ld	r24, Z
    4d24:	91 81       	ldd	r25, Z+1	; 0x01
    4d26:	01 97       	sbiw	r24, 0x01	; 1
    4d28:	f1 f7       	brne	.-4      	; 0x4d26 <main+0x3ca>
    4d2a:	fe 01       	movw	r30, r28
    4d2c:	e7 54       	subi	r30, 0x47	; 71
    4d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d30:	91 83       	std	Z+1, r25	; 0x01
    4d32:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d34:	de 01       	movw	r26, r28
    4d36:	a5 54       	subi	r26, 0x45	; 69
    4d38:	bf 4f       	sbci	r27, 0xFF	; 255
    4d3a:	fe 01       	movw	r30, r28
    4d3c:	e5 54       	subi	r30, 0x45	; 69
    4d3e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d40:	80 81       	ld	r24, Z
    4d42:	91 81       	ldd	r25, Z+1	; 0x01
    4d44:	01 97       	sbiw	r24, 0x01	; 1
    4d46:	11 96       	adiw	r26, 0x01	; 1
    4d48:	9c 93       	st	X, r25
    4d4a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d4c:	fe 01       	movw	r30, r28
    4d4e:	e5 54       	subi	r30, 0x45	; 69
    4d50:	ff 4f       	sbci	r31, 0xFF	; 255
    4d52:	80 81       	ld	r24, Z
    4d54:	91 81       	ldd	r25, Z+1	; 0x01
    4d56:	00 97       	sbiw	r24, 0x00	; 0
    4d58:	d1 f6       	brne	.-76     	; 0x4d0e <main+0x3b2>
    4d5a:	2d ce       	rjmp	.-934    	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d5c:	8e 01       	movw	r16, r28
    4d5e:	05 54       	subi	r16, 0x45	; 69
    4d60:	1f 4f       	sbci	r17, 0xFF	; 255
    4d62:	fe 01       	movw	r30, r28
    4d64:	e3 54       	subi	r30, 0x43	; 67
    4d66:	ff 4f       	sbci	r31, 0xFF	; 255
    4d68:	60 81       	ld	r22, Z
    4d6a:	71 81       	ldd	r23, Z+1	; 0x01
    4d6c:	82 81       	ldd	r24, Z+2	; 0x02
    4d6e:	93 81       	ldd	r25, Z+3	; 0x03
    4d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d74:	dc 01       	movw	r26, r24
    4d76:	cb 01       	movw	r24, r22
    4d78:	f8 01       	movw	r30, r16
    4d7a:	91 83       	std	Z+1, r25	; 0x01
    4d7c:	80 83       	st	Z, r24
    4d7e:	de 01       	movw	r26, r28
    4d80:	a9 54       	subi	r26, 0x49	; 73
    4d82:	bf 4f       	sbci	r27, 0xFF	; 255
    4d84:	fe 01       	movw	r30, r28
    4d86:	e5 54       	subi	r30, 0x45	; 69
    4d88:	ff 4f       	sbci	r31, 0xFF	; 255
    4d8a:	80 81       	ld	r24, Z
    4d8c:	91 81       	ldd	r25, Z+1	; 0x01
    4d8e:	11 96       	adiw	r26, 0x01	; 1
    4d90:	9c 93       	st	X, r25
    4d92:	8e 93       	st	-X, r24
    4d94:	fe 01       	movw	r30, r28
    4d96:	e9 54       	subi	r30, 0x49	; 73
    4d98:	ff 4f       	sbci	r31, 0xFF	; 255
    4d9a:	80 81       	ld	r24, Z
    4d9c:	91 81       	ldd	r25, Z+1	; 0x01
    4d9e:	01 97       	sbiw	r24, 0x01	; 1
    4da0:	f1 f7       	brne	.-4      	; 0x4d9e <main+0x442>
    4da2:	fe 01       	movw	r30, r28
    4da4:	e9 54       	subi	r30, 0x49	; 73
    4da6:	ff 4f       	sbci	r31, 0xFF	; 255
    4da8:	91 83       	std	Z+1, r25	; 0x01
    4daa:	80 83       	st	Z, r24
    4dac:	04 ce       	rjmp	.-1016   	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    4dae:	fe 01       	movw	r30, r28
    4db0:	e5 52       	subi	r30, 0x25	; 37
    4db2:	ff 4f       	sbci	r31, 0xFF	; 255
    4db4:	80 81       	ld	r24, Z
    4db6:	91 81       	ldd	r25, Z+1	; 0x01
    4db8:	82 34       	cpi	r24, 0x42	; 66
    4dba:	91 05       	cpc	r25, r1
    4dbc:	08 f4       	brcc	.+2      	; 0x4dc0 <main+0x464>
    4dbe:	e0 c0       	rjmp	.+448    	; 0x4f80 <main+0x624>
    4dc0:	fe 01       	movw	r30, r28
    4dc2:	e7 52       	subi	r30, 0x27	; 39
    4dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc6:	80 81       	ld	r24, Z
    4dc8:	91 81       	ldd	r25, Z+1	; 0x01
    4dca:	f1 e0       	ldi	r31, 0x01	; 1
    4dcc:	8c 37       	cpi	r24, 0x7C	; 124
    4dce:	9f 07       	cpc	r25, r31
    4dd0:	08 f0       	brcs	.+2      	; 0x4dd4 <main+0x478>
    4dd2:	d6 c0       	rjmp	.+428    	; 0x4f80 <main+0x624>
    4dd4:	fe 01       	movw	r30, r28
    4dd6:	e9 52       	subi	r30, 0x29	; 41
    4dd8:	ff 4f       	sbci	r31, 0xFF	; 255
    4dda:	80 81       	ld	r24, Z
    4ddc:	91 81       	ldd	r25, Z+1	; 0x01
    4dde:	21 e0       	ldi	r18, 0x01	; 1
    4de0:	86 38       	cpi	r24, 0x86	; 134
    4de2:	92 07       	cpc	r25, r18
    4de4:	08 f0       	brcs	.+2      	; 0x4de8 <main+0x48c>
    4de6:	cc c0       	rjmp	.+408    	; 0x4f80 <main+0x624>
    4de8:	fe 01       	movw	r30, r28
    4dea:	eb 52       	subi	r30, 0x2B	; 43
    4dec:	ff 4f       	sbci	r31, 0xFF	; 255
    4dee:	80 81       	ld	r24, Z
    4df0:	91 81       	ldd	r25, Z+1	; 0x01
    4df2:	e1 e0       	ldi	r30, 0x01	; 1
    4df4:	8c 32       	cpi	r24, 0x2C	; 44
    4df6:	9e 07       	cpc	r25, r30
    4df8:	08 f0       	brcs	.+2      	; 0x4dfc <main+0x4a0>
    4dfa:	c2 c0       	rjmp	.+388    	; 0x4f80 <main+0x624>
    4dfc:	fe 01       	movw	r30, r28
    4dfe:	ed 52       	subi	r30, 0x2D	; 45
    4e00:	ff 4f       	sbci	r31, 0xFF	; 255
    4e02:	80 81       	ld	r24, Z
    4e04:	91 81       	ldd	r25, Z+1	; 0x01
    4e06:	87 39       	cpi	r24, 0x97	; 151
    4e08:	91 05       	cpc	r25, r1
    4e0a:	08 f4       	brcc	.+2      	; 0x4e0e <main+0x4b2>
    4e0c:	b9 c0       	rjmp	.+370    	; 0x4f80 <main+0x624>
		{
			H_LCD_Void_LCDWriteString("Fuck You");
    4e0e:	80 e7       	ldi	r24, 0x70	; 112
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    4e16:	fe 01       	movw	r30, r28
    4e18:	ed 54       	subi	r30, 0x4D	; 77
    4e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1c:	80 e0       	ldi	r24, 0x00	; 0
    4e1e:	90 e0       	ldi	r25, 0x00	; 0
    4e20:	aa ef       	ldi	r26, 0xFA	; 250
    4e22:	b3 e4       	ldi	r27, 0x43	; 67
    4e24:	80 83       	st	Z, r24
    4e26:	91 83       	std	Z+1, r25	; 0x01
    4e28:	a2 83       	std	Z+2, r26	; 0x02
    4e2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4e2c:	8e 01       	movw	r16, r28
    4e2e:	01 55       	subi	r16, 0x51	; 81
    4e30:	1f 4f       	sbci	r17, 0xFF	; 255
    4e32:	fe 01       	movw	r30, r28
    4e34:	ed 54       	subi	r30, 0x4D	; 77
    4e36:	ff 4f       	sbci	r31, 0xFF	; 255
    4e38:	60 81       	ld	r22, Z
    4e3a:	71 81       	ldd	r23, Z+1	; 0x01
    4e3c:	82 81       	ldd	r24, Z+2	; 0x02
    4e3e:	93 81       	ldd	r25, Z+3	; 0x03
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	30 e0       	ldi	r19, 0x00	; 0
    4e44:	4a e7       	ldi	r20, 0x7A	; 122
    4e46:	55 e4       	ldi	r21, 0x45	; 69
    4e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e4c:	dc 01       	movw	r26, r24
    4e4e:	cb 01       	movw	r24, r22
    4e50:	f8 01       	movw	r30, r16
    4e52:	80 83       	st	Z, r24
    4e54:	91 83       	std	Z+1, r25	; 0x01
    4e56:	a2 83       	std	Z+2, r26	; 0x02
    4e58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4e5a:	fe 01       	movw	r30, r28
    4e5c:	e1 55       	subi	r30, 0x51	; 81
    4e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e60:	60 81       	ld	r22, Z
    4e62:	71 81       	ldd	r23, Z+1	; 0x01
    4e64:	82 81       	ldd	r24, Z+2	; 0x02
    4e66:	93 81       	ldd	r25, Z+3	; 0x03
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	40 e8       	ldi	r20, 0x80	; 128
    4e6e:	5f e3       	ldi	r21, 0x3F	; 63
    4e70:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4e74:	88 23       	and	r24, r24
    4e76:	44 f4       	brge	.+16     	; 0x4e88 <main+0x52c>
		__ticks = 1;
    4e78:	fe 01       	movw	r30, r28
    4e7a:	e3 55       	subi	r30, 0x53	; 83
    4e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e7e:	81 e0       	ldi	r24, 0x01	; 1
    4e80:	90 e0       	ldi	r25, 0x00	; 0
    4e82:	91 83       	std	Z+1, r25	; 0x01
    4e84:	80 83       	st	Z, r24
    4e86:	64 c0       	rjmp	.+200    	; 0x4f50 <main+0x5f4>
	else if (__tmp > 65535)
    4e88:	fe 01       	movw	r30, r28
    4e8a:	e1 55       	subi	r30, 0x51	; 81
    4e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    4e8e:	60 81       	ld	r22, Z
    4e90:	71 81       	ldd	r23, Z+1	; 0x01
    4e92:	82 81       	ldd	r24, Z+2	; 0x02
    4e94:	93 81       	ldd	r25, Z+3	; 0x03
    4e96:	20 e0       	ldi	r18, 0x00	; 0
    4e98:	3f ef       	ldi	r19, 0xFF	; 255
    4e9a:	4f e7       	ldi	r20, 0x7F	; 127
    4e9c:	57 e4       	ldi	r21, 0x47	; 71
    4e9e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4ea2:	18 16       	cp	r1, r24
    4ea4:	0c f0       	brlt	.+2      	; 0x4ea8 <main+0x54c>
    4ea6:	43 c0       	rjmp	.+134    	; 0x4f2e <main+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4ea8:	fe 01       	movw	r30, r28
    4eaa:	ed 54       	subi	r30, 0x4D	; 77
    4eac:	ff 4f       	sbci	r31, 0xFF	; 255
    4eae:	60 81       	ld	r22, Z
    4eb0:	71 81       	ldd	r23, Z+1	; 0x01
    4eb2:	82 81       	ldd	r24, Z+2	; 0x02
    4eb4:	93 81       	ldd	r25, Z+3	; 0x03
    4eb6:	20 e0       	ldi	r18, 0x00	; 0
    4eb8:	30 e0       	ldi	r19, 0x00	; 0
    4eba:	40 e2       	ldi	r20, 0x20	; 32
    4ebc:	51 e4       	ldi	r21, 0x41	; 65
    4ebe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ec2:	dc 01       	movw	r26, r24
    4ec4:	cb 01       	movw	r24, r22
    4ec6:	8e 01       	movw	r16, r28
    4ec8:	03 55       	subi	r16, 0x53	; 83
    4eca:	1f 4f       	sbci	r17, 0xFF	; 255
    4ecc:	bc 01       	movw	r22, r24
    4ece:	cd 01       	movw	r24, r26
    4ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	cb 01       	movw	r24, r22
    4ed8:	f8 01       	movw	r30, r16
    4eda:	91 83       	std	Z+1, r25	; 0x01
    4edc:	80 83       	st	Z, r24
    4ede:	1f c0       	rjmp	.+62     	; 0x4f1e <main+0x5c2>
    4ee0:	fe 01       	movw	r30, r28
    4ee2:	e5 55       	subi	r30, 0x55	; 85
    4ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    4ee6:	80 e9       	ldi	r24, 0x90	; 144
    4ee8:	91 e0       	ldi	r25, 0x01	; 1
    4eea:	91 83       	std	Z+1, r25	; 0x01
    4eec:	80 83       	st	Z, r24
    4eee:	fe 01       	movw	r30, r28
    4ef0:	e5 55       	subi	r30, 0x55	; 85
    4ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef4:	80 81       	ld	r24, Z
    4ef6:	91 81       	ldd	r25, Z+1	; 0x01
    4ef8:	01 97       	sbiw	r24, 0x01	; 1
    4efa:	f1 f7       	brne	.-4      	; 0x4ef8 <main+0x59c>
    4efc:	fe 01       	movw	r30, r28
    4efe:	e5 55       	subi	r30, 0x55	; 85
    4f00:	ff 4f       	sbci	r31, 0xFF	; 255
    4f02:	91 83       	std	Z+1, r25	; 0x01
    4f04:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4f06:	de 01       	movw	r26, r28
    4f08:	a3 55       	subi	r26, 0x53	; 83
    4f0a:	bf 4f       	sbci	r27, 0xFF	; 255
    4f0c:	fe 01       	movw	r30, r28
    4f0e:	e3 55       	subi	r30, 0x53	; 83
    4f10:	ff 4f       	sbci	r31, 0xFF	; 255
    4f12:	80 81       	ld	r24, Z
    4f14:	91 81       	ldd	r25, Z+1	; 0x01
    4f16:	01 97       	sbiw	r24, 0x01	; 1
    4f18:	11 96       	adiw	r26, 0x01	; 1
    4f1a:	9c 93       	st	X, r25
    4f1c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4f1e:	fe 01       	movw	r30, r28
    4f20:	e3 55       	subi	r30, 0x53	; 83
    4f22:	ff 4f       	sbci	r31, 0xFF	; 255
    4f24:	80 81       	ld	r24, Z
    4f26:	91 81       	ldd	r25, Z+1	; 0x01
    4f28:	00 97       	sbiw	r24, 0x00	; 0
    4f2a:	d1 f6       	brne	.-76     	; 0x4ee0 <main+0x584>
    4f2c:	44 cd       	rjmp	.-1400   	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4f2e:	8e 01       	movw	r16, r28
    4f30:	03 55       	subi	r16, 0x53	; 83
    4f32:	1f 4f       	sbci	r17, 0xFF	; 255
    4f34:	fe 01       	movw	r30, r28
    4f36:	e1 55       	subi	r30, 0x51	; 81
    4f38:	ff 4f       	sbci	r31, 0xFF	; 255
    4f3a:	60 81       	ld	r22, Z
    4f3c:	71 81       	ldd	r23, Z+1	; 0x01
    4f3e:	82 81       	ldd	r24, Z+2	; 0x02
    4f40:	93 81       	ldd	r25, Z+3	; 0x03
    4f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4f46:	dc 01       	movw	r26, r24
    4f48:	cb 01       	movw	r24, r22
    4f4a:	f8 01       	movw	r30, r16
    4f4c:	91 83       	std	Z+1, r25	; 0x01
    4f4e:	80 83       	st	Z, r24
    4f50:	de 01       	movw	r26, r28
    4f52:	a7 55       	subi	r26, 0x57	; 87
    4f54:	bf 4f       	sbci	r27, 0xFF	; 255
    4f56:	fe 01       	movw	r30, r28
    4f58:	e3 55       	subi	r30, 0x53	; 83
    4f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f5c:	80 81       	ld	r24, Z
    4f5e:	91 81       	ldd	r25, Z+1	; 0x01
    4f60:	11 96       	adiw	r26, 0x01	; 1
    4f62:	9c 93       	st	X, r25
    4f64:	8e 93       	st	-X, r24
    4f66:	fe 01       	movw	r30, r28
    4f68:	e7 55       	subi	r30, 0x57	; 87
    4f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f6c:	80 81       	ld	r24, Z
    4f6e:	91 81       	ldd	r25, Z+1	; 0x01
    4f70:	01 97       	sbiw	r24, 0x01	; 1
    4f72:	f1 f7       	brne	.-4      	; 0x4f70 <main+0x614>
    4f74:	fe 01       	movw	r30, r28
    4f76:	e7 55       	subi	r30, 0x57	; 87
    4f78:	ff 4f       	sbci	r31, 0xFF	; 255
    4f7a:	91 83       	std	Z+1, r25	; 0x01
    4f7c:	80 83       	st	Z, r24
    4f7e:	1b cd       	rjmp	.-1482   	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    4f80:	fe 01       	movw	r30, r28
    4f82:	e5 52       	subi	r30, 0x25	; 37
    4f84:	ff 4f       	sbci	r31, 0xFF	; 255
    4f86:	80 81       	ld	r24, Z
    4f88:	91 81       	ldd	r25, Z+1	; 0x01
    4f8a:	82 34       	cpi	r24, 0x42	; 66
    4f8c:	91 05       	cpc	r25, r1
    4f8e:	08 f4       	brcc	.+2      	; 0x4f92 <main+0x636>
    4f90:	e0 c0       	rjmp	.+448    	; 0x5152 <main+0x7f6>
    4f92:	fe 01       	movw	r30, r28
    4f94:	e7 52       	subi	r30, 0x27	; 39
    4f96:	ff 4f       	sbci	r31, 0xFF	; 255
    4f98:	80 81       	ld	r24, Z
    4f9a:	91 81       	ldd	r25, Z+1	; 0x01
    4f9c:	f1 e0       	ldi	r31, 0x01	; 1
    4f9e:	8d 37       	cpi	r24, 0x7D	; 125
    4fa0:	9f 07       	cpc	r25, r31
    4fa2:	08 f4       	brcc	.+2      	; 0x4fa6 <main+0x64a>
    4fa4:	d6 c0       	rjmp	.+428    	; 0x5152 <main+0x7f6>
    4fa6:	fe 01       	movw	r30, r28
    4fa8:	e9 52       	subi	r30, 0x29	; 41
    4faa:	ff 4f       	sbci	r31, 0xFF	; 255
    4fac:	80 81       	ld	r24, Z
    4fae:	91 81       	ldd	r25, Z+1	; 0x01
    4fb0:	21 e0       	ldi	r18, 0x01	; 1
    4fb2:	86 38       	cpi	r24, 0x86	; 134
    4fb4:	92 07       	cpc	r25, r18
    4fb6:	08 f0       	brcs	.+2      	; 0x4fba <main+0x65e>
    4fb8:	cc c0       	rjmp	.+408    	; 0x5152 <main+0x7f6>
    4fba:	fe 01       	movw	r30, r28
    4fbc:	eb 52       	subi	r30, 0x2B	; 43
    4fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4fc0:	80 81       	ld	r24, Z
    4fc2:	91 81       	ldd	r25, Z+1	; 0x01
    4fc4:	e1 e0       	ldi	r30, 0x01	; 1
    4fc6:	8d 32       	cpi	r24, 0x2D	; 45
    4fc8:	9e 07       	cpc	r25, r30
    4fca:	08 f4       	brcc	.+2      	; 0x4fce <main+0x672>
    4fcc:	c2 c0       	rjmp	.+388    	; 0x5152 <main+0x7f6>
    4fce:	fe 01       	movw	r30, r28
    4fd0:	ed 52       	subi	r30, 0x2D	; 45
    4fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    4fd4:	80 81       	ld	r24, Z
    4fd6:	91 81       	ldd	r25, Z+1	; 0x01
    4fd8:	87 39       	cpi	r24, 0x97	; 151
    4fda:	91 05       	cpc	r25, r1
    4fdc:	08 f4       	brcc	.+2      	; 0x4fe0 <main+0x684>
    4fde:	b9 c0       	rjmp	.+370    	; 0x5152 <main+0x7f6>
		{
			H_LCD_Void_LCDWriteString("OK");
    4fe0:	89 e7       	ldi	r24, 0x79	; 121
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    4fe8:	fe 01       	movw	r30, r28
    4fea:	eb 55       	subi	r30, 0x5B	; 91
    4fec:	ff 4f       	sbci	r31, 0xFF	; 255
    4fee:	80 e0       	ldi	r24, 0x00	; 0
    4ff0:	90 e0       	ldi	r25, 0x00	; 0
    4ff2:	aa ef       	ldi	r26, 0xFA	; 250
    4ff4:	b3 e4       	ldi	r27, 0x43	; 67
    4ff6:	80 83       	st	Z, r24
    4ff8:	91 83       	std	Z+1, r25	; 0x01
    4ffa:	a2 83       	std	Z+2, r26	; 0x02
    4ffc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ffe:	8e 01       	movw	r16, r28
    5000:	0f 55       	subi	r16, 0x5F	; 95
    5002:	1f 4f       	sbci	r17, 0xFF	; 255
    5004:	fe 01       	movw	r30, r28
    5006:	eb 55       	subi	r30, 0x5B	; 91
    5008:	ff 4f       	sbci	r31, 0xFF	; 255
    500a:	60 81       	ld	r22, Z
    500c:	71 81       	ldd	r23, Z+1	; 0x01
    500e:	82 81       	ldd	r24, Z+2	; 0x02
    5010:	93 81       	ldd	r25, Z+3	; 0x03
    5012:	20 e0       	ldi	r18, 0x00	; 0
    5014:	30 e0       	ldi	r19, 0x00	; 0
    5016:	4a e7       	ldi	r20, 0x7A	; 122
    5018:	55 e4       	ldi	r21, 0x45	; 69
    501a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    501e:	dc 01       	movw	r26, r24
    5020:	cb 01       	movw	r24, r22
    5022:	f8 01       	movw	r30, r16
    5024:	80 83       	st	Z, r24
    5026:	91 83       	std	Z+1, r25	; 0x01
    5028:	a2 83       	std	Z+2, r26	; 0x02
    502a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    502c:	fe 01       	movw	r30, r28
    502e:	ef 55       	subi	r30, 0x5F	; 95
    5030:	ff 4f       	sbci	r31, 0xFF	; 255
    5032:	60 81       	ld	r22, Z
    5034:	71 81       	ldd	r23, Z+1	; 0x01
    5036:	82 81       	ldd	r24, Z+2	; 0x02
    5038:	93 81       	ldd	r25, Z+3	; 0x03
    503a:	20 e0       	ldi	r18, 0x00	; 0
    503c:	30 e0       	ldi	r19, 0x00	; 0
    503e:	40 e8       	ldi	r20, 0x80	; 128
    5040:	5f e3       	ldi	r21, 0x3F	; 63
    5042:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5046:	88 23       	and	r24, r24
    5048:	44 f4       	brge	.+16     	; 0x505a <main+0x6fe>
		__ticks = 1;
    504a:	fe 01       	movw	r30, r28
    504c:	e1 56       	subi	r30, 0x61	; 97
    504e:	ff 4f       	sbci	r31, 0xFF	; 255
    5050:	81 e0       	ldi	r24, 0x01	; 1
    5052:	90 e0       	ldi	r25, 0x00	; 0
    5054:	91 83       	std	Z+1, r25	; 0x01
    5056:	80 83       	st	Z, r24
    5058:	64 c0       	rjmp	.+200    	; 0x5122 <main+0x7c6>
	else if (__tmp > 65535)
    505a:	fe 01       	movw	r30, r28
    505c:	ef 55       	subi	r30, 0x5F	; 95
    505e:	ff 4f       	sbci	r31, 0xFF	; 255
    5060:	60 81       	ld	r22, Z
    5062:	71 81       	ldd	r23, Z+1	; 0x01
    5064:	82 81       	ldd	r24, Z+2	; 0x02
    5066:	93 81       	ldd	r25, Z+3	; 0x03
    5068:	20 e0       	ldi	r18, 0x00	; 0
    506a:	3f ef       	ldi	r19, 0xFF	; 255
    506c:	4f e7       	ldi	r20, 0x7F	; 127
    506e:	57 e4       	ldi	r21, 0x47	; 71
    5070:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5074:	18 16       	cp	r1, r24
    5076:	0c f0       	brlt	.+2      	; 0x507a <main+0x71e>
    5078:	43 c0       	rjmp	.+134    	; 0x5100 <main+0x7a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    507a:	fe 01       	movw	r30, r28
    507c:	eb 55       	subi	r30, 0x5B	; 91
    507e:	ff 4f       	sbci	r31, 0xFF	; 255
    5080:	60 81       	ld	r22, Z
    5082:	71 81       	ldd	r23, Z+1	; 0x01
    5084:	82 81       	ldd	r24, Z+2	; 0x02
    5086:	93 81       	ldd	r25, Z+3	; 0x03
    5088:	20 e0       	ldi	r18, 0x00	; 0
    508a:	30 e0       	ldi	r19, 0x00	; 0
    508c:	40 e2       	ldi	r20, 0x20	; 32
    508e:	51 e4       	ldi	r21, 0x41	; 65
    5090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5094:	dc 01       	movw	r26, r24
    5096:	cb 01       	movw	r24, r22
    5098:	8e 01       	movw	r16, r28
    509a:	01 56       	subi	r16, 0x61	; 97
    509c:	1f 4f       	sbci	r17, 0xFF	; 255
    509e:	bc 01       	movw	r22, r24
    50a0:	cd 01       	movw	r24, r26
    50a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50a6:	dc 01       	movw	r26, r24
    50a8:	cb 01       	movw	r24, r22
    50aa:	f8 01       	movw	r30, r16
    50ac:	91 83       	std	Z+1, r25	; 0x01
    50ae:	80 83       	st	Z, r24
    50b0:	1f c0       	rjmp	.+62     	; 0x50f0 <main+0x794>
    50b2:	fe 01       	movw	r30, r28
    50b4:	e3 56       	subi	r30, 0x63	; 99
    50b6:	ff 4f       	sbci	r31, 0xFF	; 255
    50b8:	80 e9       	ldi	r24, 0x90	; 144
    50ba:	91 e0       	ldi	r25, 0x01	; 1
    50bc:	91 83       	std	Z+1, r25	; 0x01
    50be:	80 83       	st	Z, r24
    50c0:	fe 01       	movw	r30, r28
    50c2:	e3 56       	subi	r30, 0x63	; 99
    50c4:	ff 4f       	sbci	r31, 0xFF	; 255
    50c6:	80 81       	ld	r24, Z
    50c8:	91 81       	ldd	r25, Z+1	; 0x01
    50ca:	01 97       	sbiw	r24, 0x01	; 1
    50cc:	f1 f7       	brne	.-4      	; 0x50ca <main+0x76e>
    50ce:	fe 01       	movw	r30, r28
    50d0:	e3 56       	subi	r30, 0x63	; 99
    50d2:	ff 4f       	sbci	r31, 0xFF	; 255
    50d4:	91 83       	std	Z+1, r25	; 0x01
    50d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50d8:	de 01       	movw	r26, r28
    50da:	a1 56       	subi	r26, 0x61	; 97
    50dc:	bf 4f       	sbci	r27, 0xFF	; 255
    50de:	fe 01       	movw	r30, r28
    50e0:	e1 56       	subi	r30, 0x61	; 97
    50e2:	ff 4f       	sbci	r31, 0xFF	; 255
    50e4:	80 81       	ld	r24, Z
    50e6:	91 81       	ldd	r25, Z+1	; 0x01
    50e8:	01 97       	sbiw	r24, 0x01	; 1
    50ea:	11 96       	adiw	r26, 0x01	; 1
    50ec:	9c 93       	st	X, r25
    50ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50f0:	fe 01       	movw	r30, r28
    50f2:	e1 56       	subi	r30, 0x61	; 97
    50f4:	ff 4f       	sbci	r31, 0xFF	; 255
    50f6:	80 81       	ld	r24, Z
    50f8:	91 81       	ldd	r25, Z+1	; 0x01
    50fa:	00 97       	sbiw	r24, 0x00	; 0
    50fc:	d1 f6       	brne	.-76     	; 0x50b2 <main+0x756>
    50fe:	5b cc       	rjmp	.-1866   	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5100:	8e 01       	movw	r16, r28
    5102:	01 56       	subi	r16, 0x61	; 97
    5104:	1f 4f       	sbci	r17, 0xFF	; 255
    5106:	fe 01       	movw	r30, r28
    5108:	ef 55       	subi	r30, 0x5F	; 95
    510a:	ff 4f       	sbci	r31, 0xFF	; 255
    510c:	60 81       	ld	r22, Z
    510e:	71 81       	ldd	r23, Z+1	; 0x01
    5110:	82 81       	ldd	r24, Z+2	; 0x02
    5112:	93 81       	ldd	r25, Z+3	; 0x03
    5114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5118:	dc 01       	movw	r26, r24
    511a:	cb 01       	movw	r24, r22
    511c:	f8 01       	movw	r30, r16
    511e:	91 83       	std	Z+1, r25	; 0x01
    5120:	80 83       	st	Z, r24
    5122:	de 01       	movw	r26, r28
    5124:	a5 56       	subi	r26, 0x65	; 101
    5126:	bf 4f       	sbci	r27, 0xFF	; 255
    5128:	fe 01       	movw	r30, r28
    512a:	e1 56       	subi	r30, 0x61	; 97
    512c:	ff 4f       	sbci	r31, 0xFF	; 255
    512e:	80 81       	ld	r24, Z
    5130:	91 81       	ldd	r25, Z+1	; 0x01
    5132:	11 96       	adiw	r26, 0x01	; 1
    5134:	9c 93       	st	X, r25
    5136:	8e 93       	st	-X, r24
    5138:	fe 01       	movw	r30, r28
    513a:	e5 56       	subi	r30, 0x65	; 101
    513c:	ff 4f       	sbci	r31, 0xFF	; 255
    513e:	80 81       	ld	r24, Z
    5140:	91 81       	ldd	r25, Z+1	; 0x01
    5142:	01 97       	sbiw	r24, 0x01	; 1
    5144:	f1 f7       	brne	.-4      	; 0x5142 <main+0x7e6>
    5146:	fe 01       	movw	r30, r28
    5148:	e5 56       	subi	r30, 0x65	; 101
    514a:	ff 4f       	sbci	r31, 0xFF	; 255
    514c:	91 83       	std	Z+1, r25	; 0x01
    514e:	80 83       	st	Z, r24
    5150:	32 cc       	rjmp	.-1948   	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		//2 Fingers used
		//print Nice to meet you at victory sign
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    5152:	fe 01       	movw	r30, r28
    5154:	e5 52       	subi	r30, 0x25	; 37
    5156:	ff 4f       	sbci	r31, 0xFF	; 255
    5158:	80 81       	ld	r24, Z
    515a:	91 81       	ldd	r25, Z+1	; 0x01
    515c:	82 34       	cpi	r24, 0x42	; 66
    515e:	91 05       	cpc	r25, r1
    5160:	08 f4       	brcc	.+2      	; 0x5164 <main+0x808>
    5162:	e0 c0       	rjmp	.+448    	; 0x5324 <main+0x9c8>
    5164:	fe 01       	movw	r30, r28
    5166:	e7 52       	subi	r30, 0x27	; 39
    5168:	ff 4f       	sbci	r31, 0xFF	; 255
    516a:	80 81       	ld	r24, Z
    516c:	91 81       	ldd	r25, Z+1	; 0x01
    516e:	f1 e0       	ldi	r31, 0x01	; 1
    5170:	8c 37       	cpi	r24, 0x7C	; 124
    5172:	9f 07       	cpc	r25, r31
    5174:	08 f0       	brcs	.+2      	; 0x5178 <main+0x81c>
    5176:	d6 c0       	rjmp	.+428    	; 0x5324 <main+0x9c8>
    5178:	fe 01       	movw	r30, r28
    517a:	e9 52       	subi	r30, 0x29	; 41
    517c:	ff 4f       	sbci	r31, 0xFF	; 255
    517e:	80 81       	ld	r24, Z
    5180:	91 81       	ldd	r25, Z+1	; 0x01
    5182:	21 e0       	ldi	r18, 0x01	; 1
    5184:	87 38       	cpi	r24, 0x87	; 135
    5186:	92 07       	cpc	r25, r18
    5188:	08 f4       	brcc	.+2      	; 0x518c <main+0x830>
    518a:	cc c0       	rjmp	.+408    	; 0x5324 <main+0x9c8>
    518c:	fe 01       	movw	r30, r28
    518e:	eb 52       	subi	r30, 0x2B	; 43
    5190:	ff 4f       	sbci	r31, 0xFF	; 255
    5192:	80 81       	ld	r24, Z
    5194:	91 81       	ldd	r25, Z+1	; 0x01
    5196:	e1 e0       	ldi	r30, 0x01	; 1
    5198:	8c 32       	cpi	r24, 0x2C	; 44
    519a:	9e 07       	cpc	r25, r30
    519c:	08 f0       	brcs	.+2      	; 0x51a0 <main+0x844>
    519e:	c2 c0       	rjmp	.+388    	; 0x5324 <main+0x9c8>
    51a0:	fe 01       	movw	r30, r28
    51a2:	ed 52       	subi	r30, 0x2D	; 45
    51a4:	ff 4f       	sbci	r31, 0xFF	; 255
    51a6:	80 81       	ld	r24, Z
    51a8:	91 81       	ldd	r25, Z+1	; 0x01
    51aa:	87 39       	cpi	r24, 0x97	; 151
    51ac:	91 05       	cpc	r25, r1
    51ae:	08 f4       	brcc	.+2      	; 0x51b2 <main+0x856>
    51b0:	b9 c0       	rjmp	.+370    	; 0x5324 <main+0x9c8>
		{
			H_LCD_Void_LCDWriteString("Nice to meet you");
    51b2:	8c e7       	ldi	r24, 0x7C	; 124
    51b4:	90 e0       	ldi	r25, 0x00	; 0
    51b6:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    51ba:	fe 01       	movw	r30, r28
    51bc:	e9 56       	subi	r30, 0x69	; 105
    51be:	ff 4f       	sbci	r31, 0xFF	; 255
    51c0:	80 e0       	ldi	r24, 0x00	; 0
    51c2:	90 e0       	ldi	r25, 0x00	; 0
    51c4:	aa ef       	ldi	r26, 0xFA	; 250
    51c6:	b3 e4       	ldi	r27, 0x43	; 67
    51c8:	80 83       	st	Z, r24
    51ca:	91 83       	std	Z+1, r25	; 0x01
    51cc:	a2 83       	std	Z+2, r26	; 0x02
    51ce:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    51d0:	8e 01       	movw	r16, r28
    51d2:	0d 56       	subi	r16, 0x6D	; 109
    51d4:	1f 4f       	sbci	r17, 0xFF	; 255
    51d6:	fe 01       	movw	r30, r28
    51d8:	e9 56       	subi	r30, 0x69	; 105
    51da:	ff 4f       	sbci	r31, 0xFF	; 255
    51dc:	60 81       	ld	r22, Z
    51de:	71 81       	ldd	r23, Z+1	; 0x01
    51e0:	82 81       	ldd	r24, Z+2	; 0x02
    51e2:	93 81       	ldd	r25, Z+3	; 0x03
    51e4:	20 e0       	ldi	r18, 0x00	; 0
    51e6:	30 e0       	ldi	r19, 0x00	; 0
    51e8:	4a e7       	ldi	r20, 0x7A	; 122
    51ea:	55 e4       	ldi	r21, 0x45	; 69
    51ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51f0:	dc 01       	movw	r26, r24
    51f2:	cb 01       	movw	r24, r22
    51f4:	f8 01       	movw	r30, r16
    51f6:	80 83       	st	Z, r24
    51f8:	91 83       	std	Z+1, r25	; 0x01
    51fa:	a2 83       	std	Z+2, r26	; 0x02
    51fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    51fe:	fe 01       	movw	r30, r28
    5200:	ed 56       	subi	r30, 0x6D	; 109
    5202:	ff 4f       	sbci	r31, 0xFF	; 255
    5204:	60 81       	ld	r22, Z
    5206:	71 81       	ldd	r23, Z+1	; 0x01
    5208:	82 81       	ldd	r24, Z+2	; 0x02
    520a:	93 81       	ldd	r25, Z+3	; 0x03
    520c:	20 e0       	ldi	r18, 0x00	; 0
    520e:	30 e0       	ldi	r19, 0x00	; 0
    5210:	40 e8       	ldi	r20, 0x80	; 128
    5212:	5f e3       	ldi	r21, 0x3F	; 63
    5214:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5218:	88 23       	and	r24, r24
    521a:	44 f4       	brge	.+16     	; 0x522c <main+0x8d0>
		__ticks = 1;
    521c:	fe 01       	movw	r30, r28
    521e:	ef 56       	subi	r30, 0x6F	; 111
    5220:	ff 4f       	sbci	r31, 0xFF	; 255
    5222:	81 e0       	ldi	r24, 0x01	; 1
    5224:	90 e0       	ldi	r25, 0x00	; 0
    5226:	91 83       	std	Z+1, r25	; 0x01
    5228:	80 83       	st	Z, r24
    522a:	64 c0       	rjmp	.+200    	; 0x52f4 <main+0x998>
	else if (__tmp > 65535)
    522c:	fe 01       	movw	r30, r28
    522e:	ed 56       	subi	r30, 0x6D	; 109
    5230:	ff 4f       	sbci	r31, 0xFF	; 255
    5232:	60 81       	ld	r22, Z
    5234:	71 81       	ldd	r23, Z+1	; 0x01
    5236:	82 81       	ldd	r24, Z+2	; 0x02
    5238:	93 81       	ldd	r25, Z+3	; 0x03
    523a:	20 e0       	ldi	r18, 0x00	; 0
    523c:	3f ef       	ldi	r19, 0xFF	; 255
    523e:	4f e7       	ldi	r20, 0x7F	; 127
    5240:	57 e4       	ldi	r21, 0x47	; 71
    5242:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5246:	18 16       	cp	r1, r24
    5248:	0c f0       	brlt	.+2      	; 0x524c <main+0x8f0>
    524a:	43 c0       	rjmp	.+134    	; 0x52d2 <main+0x976>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    524c:	fe 01       	movw	r30, r28
    524e:	e9 56       	subi	r30, 0x69	; 105
    5250:	ff 4f       	sbci	r31, 0xFF	; 255
    5252:	60 81       	ld	r22, Z
    5254:	71 81       	ldd	r23, Z+1	; 0x01
    5256:	82 81       	ldd	r24, Z+2	; 0x02
    5258:	93 81       	ldd	r25, Z+3	; 0x03
    525a:	20 e0       	ldi	r18, 0x00	; 0
    525c:	30 e0       	ldi	r19, 0x00	; 0
    525e:	40 e2       	ldi	r20, 0x20	; 32
    5260:	51 e4       	ldi	r21, 0x41	; 65
    5262:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5266:	dc 01       	movw	r26, r24
    5268:	cb 01       	movw	r24, r22
    526a:	8e 01       	movw	r16, r28
    526c:	0f 56       	subi	r16, 0x6F	; 111
    526e:	1f 4f       	sbci	r17, 0xFF	; 255
    5270:	bc 01       	movw	r22, r24
    5272:	cd 01       	movw	r24, r26
    5274:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5278:	dc 01       	movw	r26, r24
    527a:	cb 01       	movw	r24, r22
    527c:	f8 01       	movw	r30, r16
    527e:	91 83       	std	Z+1, r25	; 0x01
    5280:	80 83       	st	Z, r24
    5282:	1f c0       	rjmp	.+62     	; 0x52c2 <main+0x966>
    5284:	fe 01       	movw	r30, r28
    5286:	e1 57       	subi	r30, 0x71	; 113
    5288:	ff 4f       	sbci	r31, 0xFF	; 255
    528a:	80 e9       	ldi	r24, 0x90	; 144
    528c:	91 e0       	ldi	r25, 0x01	; 1
    528e:	91 83       	std	Z+1, r25	; 0x01
    5290:	80 83       	st	Z, r24
    5292:	fe 01       	movw	r30, r28
    5294:	e1 57       	subi	r30, 0x71	; 113
    5296:	ff 4f       	sbci	r31, 0xFF	; 255
    5298:	80 81       	ld	r24, Z
    529a:	91 81       	ldd	r25, Z+1	; 0x01
    529c:	01 97       	sbiw	r24, 0x01	; 1
    529e:	f1 f7       	brne	.-4      	; 0x529c <main+0x940>
    52a0:	fe 01       	movw	r30, r28
    52a2:	e1 57       	subi	r30, 0x71	; 113
    52a4:	ff 4f       	sbci	r31, 0xFF	; 255
    52a6:	91 83       	std	Z+1, r25	; 0x01
    52a8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52aa:	de 01       	movw	r26, r28
    52ac:	af 56       	subi	r26, 0x6F	; 111
    52ae:	bf 4f       	sbci	r27, 0xFF	; 255
    52b0:	fe 01       	movw	r30, r28
    52b2:	ef 56       	subi	r30, 0x6F	; 111
    52b4:	ff 4f       	sbci	r31, 0xFF	; 255
    52b6:	80 81       	ld	r24, Z
    52b8:	91 81       	ldd	r25, Z+1	; 0x01
    52ba:	01 97       	sbiw	r24, 0x01	; 1
    52bc:	11 96       	adiw	r26, 0x01	; 1
    52be:	9c 93       	st	X, r25
    52c0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52c2:	fe 01       	movw	r30, r28
    52c4:	ef 56       	subi	r30, 0x6F	; 111
    52c6:	ff 4f       	sbci	r31, 0xFF	; 255
    52c8:	80 81       	ld	r24, Z
    52ca:	91 81       	ldd	r25, Z+1	; 0x01
    52cc:	00 97       	sbiw	r24, 0x00	; 0
    52ce:	d1 f6       	brne	.-76     	; 0x5284 <main+0x928>
    52d0:	72 cb       	rjmp	.-2332   	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d2:	8e 01       	movw	r16, r28
    52d4:	0f 56       	subi	r16, 0x6F	; 111
    52d6:	1f 4f       	sbci	r17, 0xFF	; 255
    52d8:	fe 01       	movw	r30, r28
    52da:	ed 56       	subi	r30, 0x6D	; 109
    52dc:	ff 4f       	sbci	r31, 0xFF	; 255
    52de:	60 81       	ld	r22, Z
    52e0:	71 81       	ldd	r23, Z+1	; 0x01
    52e2:	82 81       	ldd	r24, Z+2	; 0x02
    52e4:	93 81       	ldd	r25, Z+3	; 0x03
    52e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52ea:	dc 01       	movw	r26, r24
    52ec:	cb 01       	movw	r24, r22
    52ee:	f8 01       	movw	r30, r16
    52f0:	91 83       	std	Z+1, r25	; 0x01
    52f2:	80 83       	st	Z, r24
    52f4:	de 01       	movw	r26, r28
    52f6:	a3 57       	subi	r26, 0x73	; 115
    52f8:	bf 4f       	sbci	r27, 0xFF	; 255
    52fa:	fe 01       	movw	r30, r28
    52fc:	ef 56       	subi	r30, 0x6F	; 111
    52fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5300:	80 81       	ld	r24, Z
    5302:	91 81       	ldd	r25, Z+1	; 0x01
    5304:	11 96       	adiw	r26, 0x01	; 1
    5306:	9c 93       	st	X, r25
    5308:	8e 93       	st	-X, r24
    530a:	fe 01       	movw	r30, r28
    530c:	e3 57       	subi	r30, 0x73	; 115
    530e:	ff 4f       	sbci	r31, 0xFF	; 255
    5310:	80 81       	ld	r24, Z
    5312:	91 81       	ldd	r25, Z+1	; 0x01
    5314:	01 97       	sbiw	r24, 0x01	; 1
    5316:	f1 f7       	brne	.-4      	; 0x5314 <main+0x9b8>
    5318:	fe 01       	movw	r30, r28
    531a:	e3 57       	subi	r30, 0x73	; 115
    531c:	ff 4f       	sbci	r31, 0xFF	; 255
    531e:	91 83       	std	Z+1, r25	; 0x01
    5320:	80 83       	st	Z, r24
    5322:	49 cb       	rjmp	.-2414   	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    5324:	fe 01       	movw	r30, r28
    5326:	e5 52       	subi	r30, 0x25	; 37
    5328:	ff 4f       	sbci	r31, 0xFF	; 255
    532a:	80 81       	ld	r24, Z
    532c:	91 81       	ldd	r25, Z+1	; 0x01
    532e:	81 34       	cpi	r24, 0x41	; 65
    5330:	91 05       	cpc	r25, r1
    5332:	08 f0       	brcs	.+2      	; 0x5336 <main+0x9da>
    5334:	e0 c0       	rjmp	.+448    	; 0x54f6 <main+0xb9a>
    5336:	fe 01       	movw	r30, r28
    5338:	e7 52       	subi	r30, 0x27	; 39
    533a:	ff 4f       	sbci	r31, 0xFF	; 255
    533c:	80 81       	ld	r24, Z
    533e:	91 81       	ldd	r25, Z+1	; 0x01
    5340:	f1 e0       	ldi	r31, 0x01	; 1
    5342:	8d 37       	cpi	r24, 0x7D	; 125
    5344:	9f 07       	cpc	r25, r31
    5346:	08 f4       	brcc	.+2      	; 0x534a <main+0x9ee>
    5348:	d6 c0       	rjmp	.+428    	; 0x54f6 <main+0xb9a>
    534a:	fe 01       	movw	r30, r28
    534c:	e9 52       	subi	r30, 0x29	; 41
    534e:	ff 4f       	sbci	r31, 0xFF	; 255
    5350:	80 81       	ld	r24, Z
    5352:	91 81       	ldd	r25, Z+1	; 0x01
    5354:	21 e0       	ldi	r18, 0x01	; 1
    5356:	87 38       	cpi	r24, 0x87	; 135
    5358:	92 07       	cpc	r25, r18
    535a:	08 f4       	brcc	.+2      	; 0x535e <main+0xa02>
    535c:	cc c0       	rjmp	.+408    	; 0x54f6 <main+0xb9a>
    535e:	fe 01       	movw	r30, r28
    5360:	eb 52       	subi	r30, 0x2B	; 43
    5362:	ff 4f       	sbci	r31, 0xFF	; 255
    5364:	80 81       	ld	r24, Z
    5366:	91 81       	ldd	r25, Z+1	; 0x01
    5368:	e1 e0       	ldi	r30, 0x01	; 1
    536a:	8d 32       	cpi	r24, 0x2D	; 45
    536c:	9e 07       	cpc	r25, r30
    536e:	08 f4       	brcc	.+2      	; 0x5372 <main+0xa16>
    5370:	c2 c0       	rjmp	.+388    	; 0x54f6 <main+0xb9a>
    5372:	fe 01       	movw	r30, r28
    5374:	ed 52       	subi	r30, 0x2D	; 45
    5376:	ff 4f       	sbci	r31, 0xFF	; 255
    5378:	80 81       	ld	r24, Z
    537a:	91 81       	ldd	r25, Z+1	; 0x01
    537c:	86 39       	cpi	r24, 0x96	; 150
    537e:	91 05       	cpc	r25, r1
    5380:	08 f0       	brcs	.+2      	; 0x5384 <main+0xa28>
    5382:	b9 c0       	rjmp	.+370    	; 0x54f6 <main+0xb9a>
		{
			H_LCD_Void_LCDWriteString("No");
    5384:	8d e8       	ldi	r24, 0x8D	; 141
    5386:	90 e0       	ldi	r25, 0x00	; 0
    5388:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    538c:	fe 01       	movw	r30, r28
    538e:	e7 57       	subi	r30, 0x77	; 119
    5390:	ff 4f       	sbci	r31, 0xFF	; 255
    5392:	80 e0       	ldi	r24, 0x00	; 0
    5394:	90 e0       	ldi	r25, 0x00	; 0
    5396:	aa ef       	ldi	r26, 0xFA	; 250
    5398:	b3 e4       	ldi	r27, 0x43	; 67
    539a:	80 83       	st	Z, r24
    539c:	91 83       	std	Z+1, r25	; 0x01
    539e:	a2 83       	std	Z+2, r26	; 0x02
    53a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53a2:	8e 01       	movw	r16, r28
    53a4:	0b 57       	subi	r16, 0x7B	; 123
    53a6:	1f 4f       	sbci	r17, 0xFF	; 255
    53a8:	fe 01       	movw	r30, r28
    53aa:	e7 57       	subi	r30, 0x77	; 119
    53ac:	ff 4f       	sbci	r31, 0xFF	; 255
    53ae:	60 81       	ld	r22, Z
    53b0:	71 81       	ldd	r23, Z+1	; 0x01
    53b2:	82 81       	ldd	r24, Z+2	; 0x02
    53b4:	93 81       	ldd	r25, Z+3	; 0x03
    53b6:	20 e0       	ldi	r18, 0x00	; 0
    53b8:	30 e0       	ldi	r19, 0x00	; 0
    53ba:	4a e7       	ldi	r20, 0x7A	; 122
    53bc:	55 e4       	ldi	r21, 0x45	; 69
    53be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53c2:	dc 01       	movw	r26, r24
    53c4:	cb 01       	movw	r24, r22
    53c6:	f8 01       	movw	r30, r16
    53c8:	80 83       	st	Z, r24
    53ca:	91 83       	std	Z+1, r25	; 0x01
    53cc:	a2 83       	std	Z+2, r26	; 0x02
    53ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53d0:	fe 01       	movw	r30, r28
    53d2:	eb 57       	subi	r30, 0x7B	; 123
    53d4:	ff 4f       	sbci	r31, 0xFF	; 255
    53d6:	60 81       	ld	r22, Z
    53d8:	71 81       	ldd	r23, Z+1	; 0x01
    53da:	82 81       	ldd	r24, Z+2	; 0x02
    53dc:	93 81       	ldd	r25, Z+3	; 0x03
    53de:	20 e0       	ldi	r18, 0x00	; 0
    53e0:	30 e0       	ldi	r19, 0x00	; 0
    53e2:	40 e8       	ldi	r20, 0x80	; 128
    53e4:	5f e3       	ldi	r21, 0x3F	; 63
    53e6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    53ea:	88 23       	and	r24, r24
    53ec:	44 f4       	brge	.+16     	; 0x53fe <main+0xaa2>
		__ticks = 1;
    53ee:	fe 01       	movw	r30, r28
    53f0:	ed 57       	subi	r30, 0x7D	; 125
    53f2:	ff 4f       	sbci	r31, 0xFF	; 255
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	91 83       	std	Z+1, r25	; 0x01
    53fa:	80 83       	st	Z, r24
    53fc:	64 c0       	rjmp	.+200    	; 0x54c6 <main+0xb6a>
	else if (__tmp > 65535)
    53fe:	fe 01       	movw	r30, r28
    5400:	eb 57       	subi	r30, 0x7B	; 123
    5402:	ff 4f       	sbci	r31, 0xFF	; 255
    5404:	60 81       	ld	r22, Z
    5406:	71 81       	ldd	r23, Z+1	; 0x01
    5408:	82 81       	ldd	r24, Z+2	; 0x02
    540a:	93 81       	ldd	r25, Z+3	; 0x03
    540c:	20 e0       	ldi	r18, 0x00	; 0
    540e:	3f ef       	ldi	r19, 0xFF	; 255
    5410:	4f e7       	ldi	r20, 0x7F	; 127
    5412:	57 e4       	ldi	r21, 0x47	; 71
    5414:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5418:	18 16       	cp	r1, r24
    541a:	0c f0       	brlt	.+2      	; 0x541e <main+0xac2>
    541c:	43 c0       	rjmp	.+134    	; 0x54a4 <main+0xb48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    541e:	fe 01       	movw	r30, r28
    5420:	e7 57       	subi	r30, 0x77	; 119
    5422:	ff 4f       	sbci	r31, 0xFF	; 255
    5424:	60 81       	ld	r22, Z
    5426:	71 81       	ldd	r23, Z+1	; 0x01
    5428:	82 81       	ldd	r24, Z+2	; 0x02
    542a:	93 81       	ldd	r25, Z+3	; 0x03
    542c:	20 e0       	ldi	r18, 0x00	; 0
    542e:	30 e0       	ldi	r19, 0x00	; 0
    5430:	40 e2       	ldi	r20, 0x20	; 32
    5432:	51 e4       	ldi	r21, 0x41	; 65
    5434:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5438:	dc 01       	movw	r26, r24
    543a:	cb 01       	movw	r24, r22
    543c:	8e 01       	movw	r16, r28
    543e:	0d 57       	subi	r16, 0x7D	; 125
    5440:	1f 4f       	sbci	r17, 0xFF	; 255
    5442:	bc 01       	movw	r22, r24
    5444:	cd 01       	movw	r24, r26
    5446:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    544a:	dc 01       	movw	r26, r24
    544c:	cb 01       	movw	r24, r22
    544e:	f8 01       	movw	r30, r16
    5450:	91 83       	std	Z+1, r25	; 0x01
    5452:	80 83       	st	Z, r24
    5454:	1f c0       	rjmp	.+62     	; 0x5494 <main+0xb38>
    5456:	fe 01       	movw	r30, r28
    5458:	ef 57       	subi	r30, 0x7F	; 127
    545a:	ff 4f       	sbci	r31, 0xFF	; 255
    545c:	80 e9       	ldi	r24, 0x90	; 144
    545e:	91 e0       	ldi	r25, 0x01	; 1
    5460:	91 83       	std	Z+1, r25	; 0x01
    5462:	80 83       	st	Z, r24
    5464:	fe 01       	movw	r30, r28
    5466:	ef 57       	subi	r30, 0x7F	; 127
    5468:	ff 4f       	sbci	r31, 0xFF	; 255
    546a:	80 81       	ld	r24, Z
    546c:	91 81       	ldd	r25, Z+1	; 0x01
    546e:	01 97       	sbiw	r24, 0x01	; 1
    5470:	f1 f7       	brne	.-4      	; 0x546e <main+0xb12>
    5472:	fe 01       	movw	r30, r28
    5474:	ef 57       	subi	r30, 0x7F	; 127
    5476:	ff 4f       	sbci	r31, 0xFF	; 255
    5478:	91 83       	std	Z+1, r25	; 0x01
    547a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    547c:	de 01       	movw	r26, r28
    547e:	ad 57       	subi	r26, 0x7D	; 125
    5480:	bf 4f       	sbci	r27, 0xFF	; 255
    5482:	fe 01       	movw	r30, r28
    5484:	ed 57       	subi	r30, 0x7D	; 125
    5486:	ff 4f       	sbci	r31, 0xFF	; 255
    5488:	80 81       	ld	r24, Z
    548a:	91 81       	ldd	r25, Z+1	; 0x01
    548c:	01 97       	sbiw	r24, 0x01	; 1
    548e:	11 96       	adiw	r26, 0x01	; 1
    5490:	9c 93       	st	X, r25
    5492:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5494:	fe 01       	movw	r30, r28
    5496:	ed 57       	subi	r30, 0x7D	; 125
    5498:	ff 4f       	sbci	r31, 0xFF	; 255
    549a:	80 81       	ld	r24, Z
    549c:	91 81       	ldd	r25, Z+1	; 0x01
    549e:	00 97       	sbiw	r24, 0x00	; 0
    54a0:	d1 f6       	brne	.-76     	; 0x5456 <main+0xafa>
    54a2:	89 ca       	rjmp	.-2798   	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54a4:	8e 01       	movw	r16, r28
    54a6:	0d 57       	subi	r16, 0x7D	; 125
    54a8:	1f 4f       	sbci	r17, 0xFF	; 255
    54aa:	fe 01       	movw	r30, r28
    54ac:	eb 57       	subi	r30, 0x7B	; 123
    54ae:	ff 4f       	sbci	r31, 0xFF	; 255
    54b0:	60 81       	ld	r22, Z
    54b2:	71 81       	ldd	r23, Z+1	; 0x01
    54b4:	82 81       	ldd	r24, Z+2	; 0x02
    54b6:	93 81       	ldd	r25, Z+3	; 0x03
    54b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54bc:	dc 01       	movw	r26, r24
    54be:	cb 01       	movw	r24, r22
    54c0:	f8 01       	movw	r30, r16
    54c2:	91 83       	std	Z+1, r25	; 0x01
    54c4:	80 83       	st	Z, r24
    54c6:	de 01       	movw	r26, r28
    54c8:	a1 58       	subi	r26, 0x81	; 129
    54ca:	bf 4f       	sbci	r27, 0xFF	; 255
    54cc:	fe 01       	movw	r30, r28
    54ce:	ed 57       	subi	r30, 0x7D	; 125
    54d0:	ff 4f       	sbci	r31, 0xFF	; 255
    54d2:	80 81       	ld	r24, Z
    54d4:	91 81       	ldd	r25, Z+1	; 0x01
    54d6:	11 96       	adiw	r26, 0x01	; 1
    54d8:	9c 93       	st	X, r25
    54da:	8e 93       	st	-X, r24
    54dc:	fe 01       	movw	r30, r28
    54de:	e1 58       	subi	r30, 0x81	; 129
    54e0:	ff 4f       	sbci	r31, 0xFF	; 255
    54e2:	80 81       	ld	r24, Z
    54e4:	91 81       	ldd	r25, Z+1	; 0x01
    54e6:	01 97       	sbiw	r24, 0x01	; 1
    54e8:	f1 f7       	brne	.-4      	; 0x54e6 <main+0xb8a>
    54ea:	fe 01       	movw	r30, r28
    54ec:	e1 58       	subi	r30, 0x81	; 129
    54ee:	ff 4f       	sbci	r31, 0xFF	; 255
    54f0:	91 83       	std	Z+1, r25	; 0x01
    54f2:	80 83       	st	Z, r24
    54f4:	60 ca       	rjmp	.-2880   	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    54f6:	fe 01       	movw	r30, r28
    54f8:	e5 52       	subi	r30, 0x25	; 37
    54fa:	ff 4f       	sbci	r31, 0xFF	; 255
    54fc:	80 81       	ld	r24, Z
    54fe:	91 81       	ldd	r25, Z+1	; 0x01
    5500:	81 34       	cpi	r24, 0x41	; 65
    5502:	91 05       	cpc	r25, r1
    5504:	08 f0       	brcs	.+2      	; 0x5508 <main+0xbac>
    5506:	e0 c0       	rjmp	.+448    	; 0x56c8 <main+0xd6c>
    5508:	fe 01       	movw	r30, r28
    550a:	e7 52       	subi	r30, 0x27	; 39
    550c:	ff 4f       	sbci	r31, 0xFF	; 255
    550e:	80 81       	ld	r24, Z
    5510:	91 81       	ldd	r25, Z+1	; 0x01
    5512:	f1 e0       	ldi	r31, 0x01	; 1
    5514:	8c 37       	cpi	r24, 0x7C	; 124
    5516:	9f 07       	cpc	r25, r31
    5518:	08 f0       	brcs	.+2      	; 0x551c <main+0xbc0>
    551a:	d6 c0       	rjmp	.+428    	; 0x56c8 <main+0xd6c>
    551c:	fe 01       	movw	r30, r28
    551e:	e9 52       	subi	r30, 0x29	; 41
    5520:	ff 4f       	sbci	r31, 0xFF	; 255
    5522:	80 81       	ld	r24, Z
    5524:	91 81       	ldd	r25, Z+1	; 0x01
    5526:	21 e0       	ldi	r18, 0x01	; 1
    5528:	87 38       	cpi	r24, 0x87	; 135
    552a:	92 07       	cpc	r25, r18
    552c:	08 f4       	brcc	.+2      	; 0x5530 <main+0xbd4>
    552e:	cc c0       	rjmp	.+408    	; 0x56c8 <main+0xd6c>
    5530:	fe 01       	movw	r30, r28
    5532:	eb 52       	subi	r30, 0x2B	; 43
    5534:	ff 4f       	sbci	r31, 0xFF	; 255
    5536:	80 81       	ld	r24, Z
    5538:	91 81       	ldd	r25, Z+1	; 0x01
    553a:	e1 e0       	ldi	r30, 0x01	; 1
    553c:	8d 32       	cpi	r24, 0x2D	; 45
    553e:	9e 07       	cpc	r25, r30
    5540:	08 f4       	brcc	.+2      	; 0x5544 <main+0xbe8>
    5542:	c2 c0       	rjmp	.+388    	; 0x56c8 <main+0xd6c>
    5544:	fe 01       	movw	r30, r28
    5546:	ed 52       	subi	r30, 0x2D	; 45
    5548:	ff 4f       	sbci	r31, 0xFF	; 255
    554a:	80 81       	ld	r24, Z
    554c:	91 81       	ldd	r25, Z+1	; 0x01
    554e:	87 39       	cpi	r24, 0x97	; 151
    5550:	91 05       	cpc	r25, r1
    5552:	08 f4       	brcc	.+2      	; 0x5556 <main+0xbfa>
    5554:	b9 c0       	rjmp	.+370    	; 0x56c8 <main+0xd6c>
		{
			H_LCD_Void_LCDWriteString("Yes");
    5556:	80 e9       	ldi	r24, 0x90	; 144
    5558:	90 e0       	ldi	r25, 0x00	; 0
    555a:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    555e:	fe 01       	movw	r30, r28
    5560:	e5 58       	subi	r30, 0x85	; 133
    5562:	ff 4f       	sbci	r31, 0xFF	; 255
    5564:	80 e0       	ldi	r24, 0x00	; 0
    5566:	90 e0       	ldi	r25, 0x00	; 0
    5568:	aa ef       	ldi	r26, 0xFA	; 250
    556a:	b3 e4       	ldi	r27, 0x43	; 67
    556c:	80 83       	st	Z, r24
    556e:	91 83       	std	Z+1, r25	; 0x01
    5570:	a2 83       	std	Z+2, r26	; 0x02
    5572:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5574:	8e 01       	movw	r16, r28
    5576:	09 58       	subi	r16, 0x89	; 137
    5578:	1f 4f       	sbci	r17, 0xFF	; 255
    557a:	fe 01       	movw	r30, r28
    557c:	e5 58       	subi	r30, 0x85	; 133
    557e:	ff 4f       	sbci	r31, 0xFF	; 255
    5580:	60 81       	ld	r22, Z
    5582:	71 81       	ldd	r23, Z+1	; 0x01
    5584:	82 81       	ldd	r24, Z+2	; 0x02
    5586:	93 81       	ldd	r25, Z+3	; 0x03
    5588:	20 e0       	ldi	r18, 0x00	; 0
    558a:	30 e0       	ldi	r19, 0x00	; 0
    558c:	4a e7       	ldi	r20, 0x7A	; 122
    558e:	55 e4       	ldi	r21, 0x45	; 69
    5590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5594:	dc 01       	movw	r26, r24
    5596:	cb 01       	movw	r24, r22
    5598:	f8 01       	movw	r30, r16
    559a:	80 83       	st	Z, r24
    559c:	91 83       	std	Z+1, r25	; 0x01
    559e:	a2 83       	std	Z+2, r26	; 0x02
    55a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    55a2:	fe 01       	movw	r30, r28
    55a4:	e9 58       	subi	r30, 0x89	; 137
    55a6:	ff 4f       	sbci	r31, 0xFF	; 255
    55a8:	60 81       	ld	r22, Z
    55aa:	71 81       	ldd	r23, Z+1	; 0x01
    55ac:	82 81       	ldd	r24, Z+2	; 0x02
    55ae:	93 81       	ldd	r25, Z+3	; 0x03
    55b0:	20 e0       	ldi	r18, 0x00	; 0
    55b2:	30 e0       	ldi	r19, 0x00	; 0
    55b4:	40 e8       	ldi	r20, 0x80	; 128
    55b6:	5f e3       	ldi	r21, 0x3F	; 63
    55b8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    55bc:	88 23       	and	r24, r24
    55be:	44 f4       	brge	.+16     	; 0x55d0 <main+0xc74>
		__ticks = 1;
    55c0:	fe 01       	movw	r30, r28
    55c2:	eb 58       	subi	r30, 0x8B	; 139
    55c4:	ff 4f       	sbci	r31, 0xFF	; 255
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	90 e0       	ldi	r25, 0x00	; 0
    55ca:	91 83       	std	Z+1, r25	; 0x01
    55cc:	80 83       	st	Z, r24
    55ce:	64 c0       	rjmp	.+200    	; 0x5698 <main+0xd3c>
	else if (__tmp > 65535)
    55d0:	fe 01       	movw	r30, r28
    55d2:	e9 58       	subi	r30, 0x89	; 137
    55d4:	ff 4f       	sbci	r31, 0xFF	; 255
    55d6:	60 81       	ld	r22, Z
    55d8:	71 81       	ldd	r23, Z+1	; 0x01
    55da:	82 81       	ldd	r24, Z+2	; 0x02
    55dc:	93 81       	ldd	r25, Z+3	; 0x03
    55de:	20 e0       	ldi	r18, 0x00	; 0
    55e0:	3f ef       	ldi	r19, 0xFF	; 255
    55e2:	4f e7       	ldi	r20, 0x7F	; 127
    55e4:	57 e4       	ldi	r21, 0x47	; 71
    55e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    55ea:	18 16       	cp	r1, r24
    55ec:	0c f0       	brlt	.+2      	; 0x55f0 <main+0xc94>
    55ee:	43 c0       	rjmp	.+134    	; 0x5676 <main+0xd1a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    55f0:	fe 01       	movw	r30, r28
    55f2:	e5 58       	subi	r30, 0x85	; 133
    55f4:	ff 4f       	sbci	r31, 0xFF	; 255
    55f6:	60 81       	ld	r22, Z
    55f8:	71 81       	ldd	r23, Z+1	; 0x01
    55fa:	82 81       	ldd	r24, Z+2	; 0x02
    55fc:	93 81       	ldd	r25, Z+3	; 0x03
    55fe:	20 e0       	ldi	r18, 0x00	; 0
    5600:	30 e0       	ldi	r19, 0x00	; 0
    5602:	40 e2       	ldi	r20, 0x20	; 32
    5604:	51 e4       	ldi	r21, 0x41	; 65
    5606:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    560a:	dc 01       	movw	r26, r24
    560c:	cb 01       	movw	r24, r22
    560e:	8e 01       	movw	r16, r28
    5610:	0b 58       	subi	r16, 0x8B	; 139
    5612:	1f 4f       	sbci	r17, 0xFF	; 255
    5614:	bc 01       	movw	r22, r24
    5616:	cd 01       	movw	r24, r26
    5618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    561c:	dc 01       	movw	r26, r24
    561e:	cb 01       	movw	r24, r22
    5620:	f8 01       	movw	r30, r16
    5622:	91 83       	std	Z+1, r25	; 0x01
    5624:	80 83       	st	Z, r24
    5626:	1f c0       	rjmp	.+62     	; 0x5666 <main+0xd0a>
    5628:	fe 01       	movw	r30, r28
    562a:	ed 58       	subi	r30, 0x8D	; 141
    562c:	ff 4f       	sbci	r31, 0xFF	; 255
    562e:	80 e9       	ldi	r24, 0x90	; 144
    5630:	91 e0       	ldi	r25, 0x01	; 1
    5632:	91 83       	std	Z+1, r25	; 0x01
    5634:	80 83       	st	Z, r24
    5636:	fe 01       	movw	r30, r28
    5638:	ed 58       	subi	r30, 0x8D	; 141
    563a:	ff 4f       	sbci	r31, 0xFF	; 255
    563c:	80 81       	ld	r24, Z
    563e:	91 81       	ldd	r25, Z+1	; 0x01
    5640:	01 97       	sbiw	r24, 0x01	; 1
    5642:	f1 f7       	brne	.-4      	; 0x5640 <main+0xce4>
    5644:	fe 01       	movw	r30, r28
    5646:	ed 58       	subi	r30, 0x8D	; 141
    5648:	ff 4f       	sbci	r31, 0xFF	; 255
    564a:	91 83       	std	Z+1, r25	; 0x01
    564c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    564e:	de 01       	movw	r26, r28
    5650:	ab 58       	subi	r26, 0x8B	; 139
    5652:	bf 4f       	sbci	r27, 0xFF	; 255
    5654:	fe 01       	movw	r30, r28
    5656:	eb 58       	subi	r30, 0x8B	; 139
    5658:	ff 4f       	sbci	r31, 0xFF	; 255
    565a:	80 81       	ld	r24, Z
    565c:	91 81       	ldd	r25, Z+1	; 0x01
    565e:	01 97       	sbiw	r24, 0x01	; 1
    5660:	11 96       	adiw	r26, 0x01	; 1
    5662:	9c 93       	st	X, r25
    5664:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5666:	fe 01       	movw	r30, r28
    5668:	eb 58       	subi	r30, 0x8B	; 139
    566a:	ff 4f       	sbci	r31, 0xFF	; 255
    566c:	80 81       	ld	r24, Z
    566e:	91 81       	ldd	r25, Z+1	; 0x01
    5670:	00 97       	sbiw	r24, 0x00	; 0
    5672:	d1 f6       	brne	.-76     	; 0x5628 <main+0xccc>
    5674:	a0 c9       	rjmp	.-3264   	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5676:	8e 01       	movw	r16, r28
    5678:	0b 58       	subi	r16, 0x8B	; 139
    567a:	1f 4f       	sbci	r17, 0xFF	; 255
    567c:	fe 01       	movw	r30, r28
    567e:	e9 58       	subi	r30, 0x89	; 137
    5680:	ff 4f       	sbci	r31, 0xFF	; 255
    5682:	60 81       	ld	r22, Z
    5684:	71 81       	ldd	r23, Z+1	; 0x01
    5686:	82 81       	ldd	r24, Z+2	; 0x02
    5688:	93 81       	ldd	r25, Z+3	; 0x03
    568a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    568e:	dc 01       	movw	r26, r24
    5690:	cb 01       	movw	r24, r22
    5692:	f8 01       	movw	r30, r16
    5694:	91 83       	std	Z+1, r25	; 0x01
    5696:	80 83       	st	Z, r24
    5698:	de 01       	movw	r26, r28
    569a:	af 58       	subi	r26, 0x8F	; 143
    569c:	bf 4f       	sbci	r27, 0xFF	; 255
    569e:	fe 01       	movw	r30, r28
    56a0:	eb 58       	subi	r30, 0x8B	; 139
    56a2:	ff 4f       	sbci	r31, 0xFF	; 255
    56a4:	80 81       	ld	r24, Z
    56a6:	91 81       	ldd	r25, Z+1	; 0x01
    56a8:	11 96       	adiw	r26, 0x01	; 1
    56aa:	9c 93       	st	X, r25
    56ac:	8e 93       	st	-X, r24
    56ae:	fe 01       	movw	r30, r28
    56b0:	ef 58       	subi	r30, 0x8F	; 143
    56b2:	ff 4f       	sbci	r31, 0xFF	; 255
    56b4:	80 81       	ld	r24, Z
    56b6:	91 81       	ldd	r25, Z+1	; 0x01
    56b8:	01 97       	sbiw	r24, 0x01	; 1
    56ba:	f1 f7       	brne	.-4      	; 0x56b8 <main+0xd5c>
    56bc:	fe 01       	movw	r30, r28
    56be:	ef 58       	subi	r30, 0x8F	; 143
    56c0:	ff 4f       	sbci	r31, 0xFF	; 255
    56c2:	91 83       	std	Z+1, r25	; 0x01
    56c4:	80 83       	st	Z, r24
    56c6:	77 c9       	rjmp	.-3346   	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    56c8:	fe 01       	movw	r30, r28
    56ca:	e5 52       	subi	r30, 0x25	; 37
    56cc:	ff 4f       	sbci	r31, 0xFF	; 255
    56ce:	80 81       	ld	r24, Z
    56d0:	91 81       	ldd	r25, Z+1	; 0x01
    56d2:	82 34       	cpi	r24, 0x42	; 66
    56d4:	91 05       	cpc	r25, r1
    56d6:	08 f4       	brcc	.+2      	; 0x56da <main+0xd7e>
    56d8:	e0 c0       	rjmp	.+448    	; 0x589a <main+0xf3e>
    56da:	fe 01       	movw	r30, r28
    56dc:	e7 52       	subi	r30, 0x27	; 39
    56de:	ff 4f       	sbci	r31, 0xFF	; 255
    56e0:	80 81       	ld	r24, Z
    56e2:	91 81       	ldd	r25, Z+1	; 0x01
    56e4:	f1 e0       	ldi	r31, 0x01	; 1
    56e6:	8d 37       	cpi	r24, 0x7D	; 125
    56e8:	9f 07       	cpc	r25, r31
    56ea:	08 f4       	brcc	.+2      	; 0x56ee <main+0xd92>
    56ec:	d6 c0       	rjmp	.+428    	; 0x589a <main+0xf3e>
    56ee:	fe 01       	movw	r30, r28
    56f0:	e9 52       	subi	r30, 0x29	; 41
    56f2:	ff 4f       	sbci	r31, 0xFF	; 255
    56f4:	80 81       	ld	r24, Z
    56f6:	91 81       	ldd	r25, Z+1	; 0x01
    56f8:	21 e0       	ldi	r18, 0x01	; 1
    56fa:	87 38       	cpi	r24, 0x87	; 135
    56fc:	92 07       	cpc	r25, r18
    56fe:	08 f4       	brcc	.+2      	; 0x5702 <main+0xda6>
    5700:	cc c0       	rjmp	.+408    	; 0x589a <main+0xf3e>
    5702:	fe 01       	movw	r30, r28
    5704:	eb 52       	subi	r30, 0x2B	; 43
    5706:	ff 4f       	sbci	r31, 0xFF	; 255
    5708:	80 81       	ld	r24, Z
    570a:	91 81       	ldd	r25, Z+1	; 0x01
    570c:	e1 e0       	ldi	r30, 0x01	; 1
    570e:	8d 32       	cpi	r24, 0x2D	; 45
    5710:	9e 07       	cpc	r25, r30
    5712:	08 f4       	brcc	.+2      	; 0x5716 <main+0xdba>
    5714:	c2 c0       	rjmp	.+388    	; 0x589a <main+0xf3e>
    5716:	fe 01       	movw	r30, r28
    5718:	ed 52       	subi	r30, 0x2D	; 45
    571a:	ff 4f       	sbci	r31, 0xFF	; 255
    571c:	80 81       	ld	r24, Z
    571e:	91 81       	ldd	r25, Z+1	; 0x01
    5720:	87 39       	cpi	r24, 0x97	; 151
    5722:	91 05       	cpc	r25, r1
    5724:	08 f4       	brcc	.+2      	; 0x5728 <main+0xdcc>
    5726:	b9 c0       	rjmp	.+370    	; 0x589a <main+0xf3e>
		{
			H_LCD_Void_LCDWriteString("Big");
    5728:	84 e9       	ldi	r24, 0x94	; 148
    572a:	90 e0       	ldi	r25, 0x00	; 0
    572c:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    5730:	fe 01       	movw	r30, r28
    5732:	e3 59       	subi	r30, 0x93	; 147
    5734:	ff 4f       	sbci	r31, 0xFF	; 255
    5736:	80 e0       	ldi	r24, 0x00	; 0
    5738:	90 e0       	ldi	r25, 0x00	; 0
    573a:	aa ef       	ldi	r26, 0xFA	; 250
    573c:	b3 e4       	ldi	r27, 0x43	; 67
    573e:	80 83       	st	Z, r24
    5740:	91 83       	std	Z+1, r25	; 0x01
    5742:	a2 83       	std	Z+2, r26	; 0x02
    5744:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5746:	8e 01       	movw	r16, r28
    5748:	07 59       	subi	r16, 0x97	; 151
    574a:	1f 4f       	sbci	r17, 0xFF	; 255
    574c:	fe 01       	movw	r30, r28
    574e:	e3 59       	subi	r30, 0x93	; 147
    5750:	ff 4f       	sbci	r31, 0xFF	; 255
    5752:	60 81       	ld	r22, Z
    5754:	71 81       	ldd	r23, Z+1	; 0x01
    5756:	82 81       	ldd	r24, Z+2	; 0x02
    5758:	93 81       	ldd	r25, Z+3	; 0x03
    575a:	20 e0       	ldi	r18, 0x00	; 0
    575c:	30 e0       	ldi	r19, 0x00	; 0
    575e:	4a e7       	ldi	r20, 0x7A	; 122
    5760:	55 e4       	ldi	r21, 0x45	; 69
    5762:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5766:	dc 01       	movw	r26, r24
    5768:	cb 01       	movw	r24, r22
    576a:	f8 01       	movw	r30, r16
    576c:	80 83       	st	Z, r24
    576e:	91 83       	std	Z+1, r25	; 0x01
    5770:	a2 83       	std	Z+2, r26	; 0x02
    5772:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5774:	fe 01       	movw	r30, r28
    5776:	e7 59       	subi	r30, 0x97	; 151
    5778:	ff 4f       	sbci	r31, 0xFF	; 255
    577a:	60 81       	ld	r22, Z
    577c:	71 81       	ldd	r23, Z+1	; 0x01
    577e:	82 81       	ldd	r24, Z+2	; 0x02
    5780:	93 81       	ldd	r25, Z+3	; 0x03
    5782:	20 e0       	ldi	r18, 0x00	; 0
    5784:	30 e0       	ldi	r19, 0x00	; 0
    5786:	40 e8       	ldi	r20, 0x80	; 128
    5788:	5f e3       	ldi	r21, 0x3F	; 63
    578a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    578e:	88 23       	and	r24, r24
    5790:	44 f4       	brge	.+16     	; 0x57a2 <main+0xe46>
		__ticks = 1;
    5792:	fe 01       	movw	r30, r28
    5794:	e9 59       	subi	r30, 0x99	; 153
    5796:	ff 4f       	sbci	r31, 0xFF	; 255
    5798:	81 e0       	ldi	r24, 0x01	; 1
    579a:	90 e0       	ldi	r25, 0x00	; 0
    579c:	91 83       	std	Z+1, r25	; 0x01
    579e:	80 83       	st	Z, r24
    57a0:	64 c0       	rjmp	.+200    	; 0x586a <main+0xf0e>
	else if (__tmp > 65535)
    57a2:	fe 01       	movw	r30, r28
    57a4:	e7 59       	subi	r30, 0x97	; 151
    57a6:	ff 4f       	sbci	r31, 0xFF	; 255
    57a8:	60 81       	ld	r22, Z
    57aa:	71 81       	ldd	r23, Z+1	; 0x01
    57ac:	82 81       	ldd	r24, Z+2	; 0x02
    57ae:	93 81       	ldd	r25, Z+3	; 0x03
    57b0:	20 e0       	ldi	r18, 0x00	; 0
    57b2:	3f ef       	ldi	r19, 0xFF	; 255
    57b4:	4f e7       	ldi	r20, 0x7F	; 127
    57b6:	57 e4       	ldi	r21, 0x47	; 71
    57b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    57bc:	18 16       	cp	r1, r24
    57be:	0c f0       	brlt	.+2      	; 0x57c2 <main+0xe66>
    57c0:	43 c0       	rjmp	.+134    	; 0x5848 <main+0xeec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    57c2:	fe 01       	movw	r30, r28
    57c4:	e3 59       	subi	r30, 0x93	; 147
    57c6:	ff 4f       	sbci	r31, 0xFF	; 255
    57c8:	60 81       	ld	r22, Z
    57ca:	71 81       	ldd	r23, Z+1	; 0x01
    57cc:	82 81       	ldd	r24, Z+2	; 0x02
    57ce:	93 81       	ldd	r25, Z+3	; 0x03
    57d0:	20 e0       	ldi	r18, 0x00	; 0
    57d2:	30 e0       	ldi	r19, 0x00	; 0
    57d4:	40 e2       	ldi	r20, 0x20	; 32
    57d6:	51 e4       	ldi	r21, 0x41	; 65
    57d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    57dc:	dc 01       	movw	r26, r24
    57de:	cb 01       	movw	r24, r22
    57e0:	8e 01       	movw	r16, r28
    57e2:	09 59       	subi	r16, 0x99	; 153
    57e4:	1f 4f       	sbci	r17, 0xFF	; 255
    57e6:	bc 01       	movw	r22, r24
    57e8:	cd 01       	movw	r24, r26
    57ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57ee:	dc 01       	movw	r26, r24
    57f0:	cb 01       	movw	r24, r22
    57f2:	f8 01       	movw	r30, r16
    57f4:	91 83       	std	Z+1, r25	; 0x01
    57f6:	80 83       	st	Z, r24
    57f8:	1f c0       	rjmp	.+62     	; 0x5838 <main+0xedc>
    57fa:	fe 01       	movw	r30, r28
    57fc:	eb 59       	subi	r30, 0x9B	; 155
    57fe:	ff 4f       	sbci	r31, 0xFF	; 255
    5800:	80 e9       	ldi	r24, 0x90	; 144
    5802:	91 e0       	ldi	r25, 0x01	; 1
    5804:	91 83       	std	Z+1, r25	; 0x01
    5806:	80 83       	st	Z, r24
    5808:	fe 01       	movw	r30, r28
    580a:	eb 59       	subi	r30, 0x9B	; 155
    580c:	ff 4f       	sbci	r31, 0xFF	; 255
    580e:	80 81       	ld	r24, Z
    5810:	91 81       	ldd	r25, Z+1	; 0x01
    5812:	01 97       	sbiw	r24, 0x01	; 1
    5814:	f1 f7       	brne	.-4      	; 0x5812 <main+0xeb6>
    5816:	fe 01       	movw	r30, r28
    5818:	eb 59       	subi	r30, 0x9B	; 155
    581a:	ff 4f       	sbci	r31, 0xFF	; 255
    581c:	91 83       	std	Z+1, r25	; 0x01
    581e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5820:	de 01       	movw	r26, r28
    5822:	a9 59       	subi	r26, 0x99	; 153
    5824:	bf 4f       	sbci	r27, 0xFF	; 255
    5826:	fe 01       	movw	r30, r28
    5828:	e9 59       	subi	r30, 0x99	; 153
    582a:	ff 4f       	sbci	r31, 0xFF	; 255
    582c:	80 81       	ld	r24, Z
    582e:	91 81       	ldd	r25, Z+1	; 0x01
    5830:	01 97       	sbiw	r24, 0x01	; 1
    5832:	11 96       	adiw	r26, 0x01	; 1
    5834:	9c 93       	st	X, r25
    5836:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5838:	fe 01       	movw	r30, r28
    583a:	e9 59       	subi	r30, 0x99	; 153
    583c:	ff 4f       	sbci	r31, 0xFF	; 255
    583e:	80 81       	ld	r24, Z
    5840:	91 81       	ldd	r25, Z+1	; 0x01
    5842:	00 97       	sbiw	r24, 0x00	; 0
    5844:	d1 f6       	brne	.-76     	; 0x57fa <main+0xe9e>
    5846:	b7 c8       	rjmp	.-3730   	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5848:	8e 01       	movw	r16, r28
    584a:	09 59       	subi	r16, 0x99	; 153
    584c:	1f 4f       	sbci	r17, 0xFF	; 255
    584e:	fe 01       	movw	r30, r28
    5850:	e7 59       	subi	r30, 0x97	; 151
    5852:	ff 4f       	sbci	r31, 0xFF	; 255
    5854:	60 81       	ld	r22, Z
    5856:	71 81       	ldd	r23, Z+1	; 0x01
    5858:	82 81       	ldd	r24, Z+2	; 0x02
    585a:	93 81       	ldd	r25, Z+3	; 0x03
    585c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5860:	dc 01       	movw	r26, r24
    5862:	cb 01       	movw	r24, r22
    5864:	f8 01       	movw	r30, r16
    5866:	91 83       	std	Z+1, r25	; 0x01
    5868:	80 83       	st	Z, r24
    586a:	de 01       	movw	r26, r28
    586c:	ad 59       	subi	r26, 0x9D	; 157
    586e:	bf 4f       	sbci	r27, 0xFF	; 255
    5870:	fe 01       	movw	r30, r28
    5872:	e9 59       	subi	r30, 0x99	; 153
    5874:	ff 4f       	sbci	r31, 0xFF	; 255
    5876:	80 81       	ld	r24, Z
    5878:	91 81       	ldd	r25, Z+1	; 0x01
    587a:	11 96       	adiw	r26, 0x01	; 1
    587c:	9c 93       	st	X, r25
    587e:	8e 93       	st	-X, r24
    5880:	fe 01       	movw	r30, r28
    5882:	ed 59       	subi	r30, 0x9D	; 157
    5884:	ff 4f       	sbci	r31, 0xFF	; 255
    5886:	80 81       	ld	r24, Z
    5888:	91 81       	ldd	r25, Z+1	; 0x01
    588a:	01 97       	sbiw	r24, 0x01	; 1
    588c:	f1 f7       	brne	.-4      	; 0x588a <main+0xf2e>
    588e:	fe 01       	movw	r30, r28
    5890:	ed 59       	subi	r30, 0x9D	; 157
    5892:	ff 4f       	sbci	r31, 0xFF	; 255
    5894:	91 83       	std	Z+1, r25	; 0x01
    5896:	80 83       	st	Z, r24
    5898:	8e c8       	rjmp	.-3812   	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    589a:	fe 01       	movw	r30, r28
    589c:	e5 52       	subi	r30, 0x25	; 37
    589e:	ff 4f       	sbci	r31, 0xFF	; 255
    58a0:	80 81       	ld	r24, Z
    58a2:	91 81       	ldd	r25, Z+1	; 0x01
    58a4:	82 34       	cpi	r24, 0x42	; 66
    58a6:	91 05       	cpc	r25, r1
    58a8:	08 f4       	brcc	.+2      	; 0x58ac <main+0xf50>
    58aa:	e2 c0       	rjmp	.+452    	; 0x5a70 <main+0x1114>
    58ac:	fe 01       	movw	r30, r28
    58ae:	e7 52       	subi	r30, 0x27	; 39
    58b0:	ff 4f       	sbci	r31, 0xFF	; 255
    58b2:	80 81       	ld	r24, Z
    58b4:	91 81       	ldd	r25, Z+1	; 0x01
    58b6:	f1 e0       	ldi	r31, 0x01	; 1
    58b8:	8c 37       	cpi	r24, 0x7C	; 124
    58ba:	9f 07       	cpc	r25, r31
    58bc:	08 f0       	brcs	.+2      	; 0x58c0 <main+0xf64>
    58be:	d8 c0       	rjmp	.+432    	; 0x5a70 <main+0x1114>
    58c0:	fe 01       	movw	r30, r28
    58c2:	e9 52       	subi	r30, 0x29	; 41
    58c4:	ff 4f       	sbci	r31, 0xFF	; 255
    58c6:	80 81       	ld	r24, Z
    58c8:	91 81       	ldd	r25, Z+1	; 0x01
    58ca:	21 e0       	ldi	r18, 0x01	; 1
    58cc:	86 38       	cpi	r24, 0x86	; 134
    58ce:	92 07       	cpc	r25, r18
    58d0:	08 f0       	brcs	.+2      	; 0x58d4 <main+0xf78>
    58d2:	ce c0       	rjmp	.+412    	; 0x5a70 <main+0x1114>
    58d4:	fe 01       	movw	r30, r28
    58d6:	eb 52       	subi	r30, 0x2B	; 43
    58d8:	ff 4f       	sbci	r31, 0xFF	; 255
    58da:	80 81       	ld	r24, Z
    58dc:	91 81       	ldd	r25, Z+1	; 0x01
    58de:	e1 e0       	ldi	r30, 0x01	; 1
    58e0:	8d 32       	cpi	r24, 0x2D	; 45
    58e2:	9e 07       	cpc	r25, r30
    58e4:	08 f4       	brcc	.+2      	; 0x58e8 <main+0xf8c>
    58e6:	c4 c0       	rjmp	.+392    	; 0x5a70 <main+0x1114>
    58e8:	fe 01       	movw	r30, r28
    58ea:	ed 52       	subi	r30, 0x2D	; 45
    58ec:	ff 4f       	sbci	r31, 0xFF	; 255
    58ee:	80 81       	ld	r24, Z
    58f0:	91 81       	ldd	r25, Z+1	; 0x01
    58f2:	87 39       	cpi	r24, 0x97	; 151
    58f4:	91 05       	cpc	r25, r1
    58f6:	08 f4       	brcc	.+2      	; 0x58fa <main+0xf9e>
    58f8:	bb c0       	rjmp	.+374    	; 0x5a70 <main+0x1114>
		{
			H_LCD_Void_LCDWriteString("Call me");
    58fa:	88 e9       	ldi	r24, 0x98	; 152
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    5902:	fe 01       	movw	r30, r28
    5904:	e1 5a       	subi	r30, 0xA1	; 161
    5906:	ff 4f       	sbci	r31, 0xFF	; 255
    5908:	80 e0       	ldi	r24, 0x00	; 0
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	aa ef       	ldi	r26, 0xFA	; 250
    590e:	b3 e4       	ldi	r27, 0x43	; 67
    5910:	80 83       	st	Z, r24
    5912:	91 83       	std	Z+1, r25	; 0x01
    5914:	a2 83       	std	Z+2, r26	; 0x02
    5916:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5918:	8e 01       	movw	r16, r28
    591a:	05 5a       	subi	r16, 0xA5	; 165
    591c:	1f 4f       	sbci	r17, 0xFF	; 255
    591e:	fe 01       	movw	r30, r28
    5920:	e1 5a       	subi	r30, 0xA1	; 161
    5922:	ff 4f       	sbci	r31, 0xFF	; 255
    5924:	60 81       	ld	r22, Z
    5926:	71 81       	ldd	r23, Z+1	; 0x01
    5928:	82 81       	ldd	r24, Z+2	; 0x02
    592a:	93 81       	ldd	r25, Z+3	; 0x03
    592c:	20 e0       	ldi	r18, 0x00	; 0
    592e:	30 e0       	ldi	r19, 0x00	; 0
    5930:	4a e7       	ldi	r20, 0x7A	; 122
    5932:	55 e4       	ldi	r21, 0x45	; 69
    5934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5938:	dc 01       	movw	r26, r24
    593a:	cb 01       	movw	r24, r22
    593c:	f8 01       	movw	r30, r16
    593e:	80 83       	st	Z, r24
    5940:	91 83       	std	Z+1, r25	; 0x01
    5942:	a2 83       	std	Z+2, r26	; 0x02
    5944:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5946:	fe 01       	movw	r30, r28
    5948:	e5 5a       	subi	r30, 0xA5	; 165
    594a:	ff 4f       	sbci	r31, 0xFF	; 255
    594c:	60 81       	ld	r22, Z
    594e:	71 81       	ldd	r23, Z+1	; 0x01
    5950:	82 81       	ldd	r24, Z+2	; 0x02
    5952:	93 81       	ldd	r25, Z+3	; 0x03
    5954:	20 e0       	ldi	r18, 0x00	; 0
    5956:	30 e0       	ldi	r19, 0x00	; 0
    5958:	40 e8       	ldi	r20, 0x80	; 128
    595a:	5f e3       	ldi	r21, 0x3F	; 63
    595c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5960:	88 23       	and	r24, r24
    5962:	44 f4       	brge	.+16     	; 0x5974 <main+0x1018>
		__ticks = 1;
    5964:	fe 01       	movw	r30, r28
    5966:	e7 5a       	subi	r30, 0xA7	; 167
    5968:	ff 4f       	sbci	r31, 0xFF	; 255
    596a:	81 e0       	ldi	r24, 0x01	; 1
    596c:	90 e0       	ldi	r25, 0x00	; 0
    596e:	91 83       	std	Z+1, r25	; 0x01
    5970:	80 83       	st	Z, r24
    5972:	65 c0       	rjmp	.+202    	; 0x5a3e <main+0x10e2>
	else if (__tmp > 65535)
    5974:	fe 01       	movw	r30, r28
    5976:	e5 5a       	subi	r30, 0xA5	; 165
    5978:	ff 4f       	sbci	r31, 0xFF	; 255
    597a:	60 81       	ld	r22, Z
    597c:	71 81       	ldd	r23, Z+1	; 0x01
    597e:	82 81       	ldd	r24, Z+2	; 0x02
    5980:	93 81       	ldd	r25, Z+3	; 0x03
    5982:	20 e0       	ldi	r18, 0x00	; 0
    5984:	3f ef       	ldi	r19, 0xFF	; 255
    5986:	4f e7       	ldi	r20, 0x7F	; 127
    5988:	57 e4       	ldi	r21, 0x47	; 71
    598a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    598e:	18 16       	cp	r1, r24
    5990:	0c f0       	brlt	.+2      	; 0x5994 <main+0x1038>
    5992:	44 c0       	rjmp	.+136    	; 0x5a1c <main+0x10c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5994:	fe 01       	movw	r30, r28
    5996:	e1 5a       	subi	r30, 0xA1	; 161
    5998:	ff 4f       	sbci	r31, 0xFF	; 255
    599a:	60 81       	ld	r22, Z
    599c:	71 81       	ldd	r23, Z+1	; 0x01
    599e:	82 81       	ldd	r24, Z+2	; 0x02
    59a0:	93 81       	ldd	r25, Z+3	; 0x03
    59a2:	20 e0       	ldi	r18, 0x00	; 0
    59a4:	30 e0       	ldi	r19, 0x00	; 0
    59a6:	40 e2       	ldi	r20, 0x20	; 32
    59a8:	51 e4       	ldi	r21, 0x41	; 65
    59aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59ae:	dc 01       	movw	r26, r24
    59b0:	cb 01       	movw	r24, r22
    59b2:	8e 01       	movw	r16, r28
    59b4:	07 5a       	subi	r16, 0xA7	; 167
    59b6:	1f 4f       	sbci	r17, 0xFF	; 255
    59b8:	bc 01       	movw	r22, r24
    59ba:	cd 01       	movw	r24, r26
    59bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    59c0:	dc 01       	movw	r26, r24
    59c2:	cb 01       	movw	r24, r22
    59c4:	f8 01       	movw	r30, r16
    59c6:	91 83       	std	Z+1, r25	; 0x01
    59c8:	80 83       	st	Z, r24
    59ca:	1f c0       	rjmp	.+62     	; 0x5a0a <main+0x10ae>
    59cc:	fe 01       	movw	r30, r28
    59ce:	e9 5a       	subi	r30, 0xA9	; 169
    59d0:	ff 4f       	sbci	r31, 0xFF	; 255
    59d2:	80 e9       	ldi	r24, 0x90	; 144
    59d4:	91 e0       	ldi	r25, 0x01	; 1
    59d6:	91 83       	std	Z+1, r25	; 0x01
    59d8:	80 83       	st	Z, r24
    59da:	fe 01       	movw	r30, r28
    59dc:	e9 5a       	subi	r30, 0xA9	; 169
    59de:	ff 4f       	sbci	r31, 0xFF	; 255
    59e0:	80 81       	ld	r24, Z
    59e2:	91 81       	ldd	r25, Z+1	; 0x01
    59e4:	01 97       	sbiw	r24, 0x01	; 1
    59e6:	f1 f7       	brne	.-4      	; 0x59e4 <main+0x1088>
    59e8:	fe 01       	movw	r30, r28
    59ea:	e9 5a       	subi	r30, 0xA9	; 169
    59ec:	ff 4f       	sbci	r31, 0xFF	; 255
    59ee:	91 83       	std	Z+1, r25	; 0x01
    59f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    59f2:	de 01       	movw	r26, r28
    59f4:	a7 5a       	subi	r26, 0xA7	; 167
    59f6:	bf 4f       	sbci	r27, 0xFF	; 255
    59f8:	fe 01       	movw	r30, r28
    59fa:	e7 5a       	subi	r30, 0xA7	; 167
    59fc:	ff 4f       	sbci	r31, 0xFF	; 255
    59fe:	80 81       	ld	r24, Z
    5a00:	91 81       	ldd	r25, Z+1	; 0x01
    5a02:	01 97       	sbiw	r24, 0x01	; 1
    5a04:	11 96       	adiw	r26, 0x01	; 1
    5a06:	9c 93       	st	X, r25
    5a08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a0a:	fe 01       	movw	r30, r28
    5a0c:	e7 5a       	subi	r30, 0xA7	; 167
    5a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a10:	80 81       	ld	r24, Z
    5a12:	91 81       	ldd	r25, Z+1	; 0x01
    5a14:	00 97       	sbiw	r24, 0x00	; 0
    5a16:	d1 f6       	brne	.-76     	; 0x59cc <main+0x1070>
    5a18:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a1c:	8e 01       	movw	r16, r28
    5a1e:	07 5a       	subi	r16, 0xA7	; 167
    5a20:	1f 4f       	sbci	r17, 0xFF	; 255
    5a22:	fe 01       	movw	r30, r28
    5a24:	e5 5a       	subi	r30, 0xA5	; 165
    5a26:	ff 4f       	sbci	r31, 0xFF	; 255
    5a28:	60 81       	ld	r22, Z
    5a2a:	71 81       	ldd	r23, Z+1	; 0x01
    5a2c:	82 81       	ldd	r24, Z+2	; 0x02
    5a2e:	93 81       	ldd	r25, Z+3	; 0x03
    5a30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a34:	dc 01       	movw	r26, r24
    5a36:	cb 01       	movw	r24, r22
    5a38:	f8 01       	movw	r30, r16
    5a3a:	91 83       	std	Z+1, r25	; 0x01
    5a3c:	80 83       	st	Z, r24
    5a3e:	de 01       	movw	r26, r28
    5a40:	ab 5a       	subi	r26, 0xAB	; 171
    5a42:	bf 4f       	sbci	r27, 0xFF	; 255
    5a44:	fe 01       	movw	r30, r28
    5a46:	e7 5a       	subi	r30, 0xA7	; 167
    5a48:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4a:	80 81       	ld	r24, Z
    5a4c:	91 81       	ldd	r25, Z+1	; 0x01
    5a4e:	11 96       	adiw	r26, 0x01	; 1
    5a50:	9c 93       	st	X, r25
    5a52:	8e 93       	st	-X, r24
    5a54:	fe 01       	movw	r30, r28
    5a56:	eb 5a       	subi	r30, 0xAB	; 171
    5a58:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5a:	80 81       	ld	r24, Z
    5a5c:	91 81       	ldd	r25, Z+1	; 0x01
    5a5e:	01 97       	sbiw	r24, 0x01	; 1
    5a60:	f1 f7       	brne	.-4      	; 0x5a5e <main+0x1102>
    5a62:	fe 01       	movw	r30, r28
    5a64:	eb 5a       	subi	r30, 0xAB	; 171
    5a66:	ff 4f       	sbci	r31, 0xFF	; 255
    5a68:	91 83       	std	Z+1, r25	; 0x01
    5a6a:	80 83       	st	Z, r24
    5a6c:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		//3 Fingers used
		//print I love you if 2 fingers at middle not flexed
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4>Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    5a70:	fe 01       	movw	r30, r28
    5a72:	e5 52       	subi	r30, 0x25	; 37
    5a74:	ff 4f       	sbci	r31, 0xFF	; 255
    5a76:	80 81       	ld	r24, Z
    5a78:	91 81       	ldd	r25, Z+1	; 0x01
    5a7a:	81 34       	cpi	r24, 0x41	; 65
    5a7c:	91 05       	cpc	r25, r1
    5a7e:	08 f0       	brcs	.+2      	; 0x5a82 <main+0x1126>
    5a80:	e2 c0       	rjmp	.+452    	; 0x5c46 <main+0x12ea>
    5a82:	fe 01       	movw	r30, r28
    5a84:	e7 52       	subi	r30, 0x27	; 39
    5a86:	ff 4f       	sbci	r31, 0xFF	; 255
    5a88:	80 81       	ld	r24, Z
    5a8a:	91 81       	ldd	r25, Z+1	; 0x01
    5a8c:	f1 e0       	ldi	r31, 0x01	; 1
    5a8e:	8d 37       	cpi	r24, 0x7D	; 125
    5a90:	9f 07       	cpc	r25, r31
    5a92:	08 f4       	brcc	.+2      	; 0x5a96 <main+0x113a>
    5a94:	d8 c0       	rjmp	.+432    	; 0x5c46 <main+0x12ea>
    5a96:	fe 01       	movw	r30, r28
    5a98:	e9 52       	subi	r30, 0x29	; 41
    5a9a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a9c:	80 81       	ld	r24, Z
    5a9e:	91 81       	ldd	r25, Z+1	; 0x01
    5aa0:	21 e0       	ldi	r18, 0x01	; 1
    5aa2:	87 38       	cpi	r24, 0x87	; 135
    5aa4:	92 07       	cpc	r25, r18
    5aa6:	08 f4       	brcc	.+2      	; 0x5aaa <main+0x114e>
    5aa8:	ce c0       	rjmp	.+412    	; 0x5c46 <main+0x12ea>
    5aaa:	fe 01       	movw	r30, r28
    5aac:	eb 52       	subi	r30, 0x2B	; 43
    5aae:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab0:	80 81       	ld	r24, Z
    5ab2:	91 81       	ldd	r25, Z+1	; 0x01
    5ab4:	e1 e0       	ldi	r30, 0x01	; 1
    5ab6:	8d 32       	cpi	r24, 0x2D	; 45
    5ab8:	9e 07       	cpc	r25, r30
    5aba:	08 f4       	brcc	.+2      	; 0x5abe <main+0x1162>
    5abc:	c4 c0       	rjmp	.+392    	; 0x5c46 <main+0x12ea>
    5abe:	fe 01       	movw	r30, r28
    5ac0:	ed 52       	subi	r30, 0x2D	; 45
    5ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac4:	80 81       	ld	r24, Z
    5ac6:	91 81       	ldd	r25, Z+1	; 0x01
    5ac8:	87 39       	cpi	r24, 0x97	; 151
    5aca:	91 05       	cpc	r25, r1
    5acc:	08 f4       	brcc	.+2      	; 0x5ad0 <main+0x1174>
    5ace:	bb c0       	rjmp	.+374    	; 0x5c46 <main+0x12ea>
		{
			H_LCD_Void_LCDWriteString("I love you");
    5ad0:	80 ea       	ldi	r24, 0xA0	; 160
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    5ad8:	fe 01       	movw	r30, r28
    5ada:	ef 5a       	subi	r30, 0xAF	; 175
    5adc:	ff 4f       	sbci	r31, 0xFF	; 255
    5ade:	80 e0       	ldi	r24, 0x00	; 0
    5ae0:	90 e0       	ldi	r25, 0x00	; 0
    5ae2:	aa ef       	ldi	r26, 0xFA	; 250
    5ae4:	b3 e4       	ldi	r27, 0x43	; 67
    5ae6:	80 83       	st	Z, r24
    5ae8:	91 83       	std	Z+1, r25	; 0x01
    5aea:	a2 83       	std	Z+2, r26	; 0x02
    5aec:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5aee:	8e 01       	movw	r16, r28
    5af0:	03 5b       	subi	r16, 0xB3	; 179
    5af2:	1f 4f       	sbci	r17, 0xFF	; 255
    5af4:	fe 01       	movw	r30, r28
    5af6:	ef 5a       	subi	r30, 0xAF	; 175
    5af8:	ff 4f       	sbci	r31, 0xFF	; 255
    5afa:	60 81       	ld	r22, Z
    5afc:	71 81       	ldd	r23, Z+1	; 0x01
    5afe:	82 81       	ldd	r24, Z+2	; 0x02
    5b00:	93 81       	ldd	r25, Z+3	; 0x03
    5b02:	20 e0       	ldi	r18, 0x00	; 0
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	4a e7       	ldi	r20, 0x7A	; 122
    5b08:	55 e4       	ldi	r21, 0x45	; 69
    5b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b0e:	dc 01       	movw	r26, r24
    5b10:	cb 01       	movw	r24, r22
    5b12:	f8 01       	movw	r30, r16
    5b14:	80 83       	st	Z, r24
    5b16:	91 83       	std	Z+1, r25	; 0x01
    5b18:	a2 83       	std	Z+2, r26	; 0x02
    5b1a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b1c:	fe 01       	movw	r30, r28
    5b1e:	e3 5b       	subi	r30, 0xB3	; 179
    5b20:	ff 4f       	sbci	r31, 0xFF	; 255
    5b22:	60 81       	ld	r22, Z
    5b24:	71 81       	ldd	r23, Z+1	; 0x01
    5b26:	82 81       	ldd	r24, Z+2	; 0x02
    5b28:	93 81       	ldd	r25, Z+3	; 0x03
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	40 e8       	ldi	r20, 0x80	; 128
    5b30:	5f e3       	ldi	r21, 0x3F	; 63
    5b32:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5b36:	88 23       	and	r24, r24
    5b38:	44 f4       	brge	.+16     	; 0x5b4a <main+0x11ee>
		__ticks = 1;
    5b3a:	fe 01       	movw	r30, r28
    5b3c:	e5 5b       	subi	r30, 0xB5	; 181
    5b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b40:	81 e0       	ldi	r24, 0x01	; 1
    5b42:	90 e0       	ldi	r25, 0x00	; 0
    5b44:	91 83       	std	Z+1, r25	; 0x01
    5b46:	80 83       	st	Z, r24
    5b48:	65 c0       	rjmp	.+202    	; 0x5c14 <main+0x12b8>
	else if (__tmp > 65535)
    5b4a:	fe 01       	movw	r30, r28
    5b4c:	e3 5b       	subi	r30, 0xB3	; 179
    5b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b50:	60 81       	ld	r22, Z
    5b52:	71 81       	ldd	r23, Z+1	; 0x01
    5b54:	82 81       	ldd	r24, Z+2	; 0x02
    5b56:	93 81       	ldd	r25, Z+3	; 0x03
    5b58:	20 e0       	ldi	r18, 0x00	; 0
    5b5a:	3f ef       	ldi	r19, 0xFF	; 255
    5b5c:	4f e7       	ldi	r20, 0x7F	; 127
    5b5e:	57 e4       	ldi	r21, 0x47	; 71
    5b60:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5b64:	18 16       	cp	r1, r24
    5b66:	0c f0       	brlt	.+2      	; 0x5b6a <main+0x120e>
    5b68:	44 c0       	rjmp	.+136    	; 0x5bf2 <main+0x1296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b6a:	fe 01       	movw	r30, r28
    5b6c:	ef 5a       	subi	r30, 0xAF	; 175
    5b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    5b70:	60 81       	ld	r22, Z
    5b72:	71 81       	ldd	r23, Z+1	; 0x01
    5b74:	82 81       	ldd	r24, Z+2	; 0x02
    5b76:	93 81       	ldd	r25, Z+3	; 0x03
    5b78:	20 e0       	ldi	r18, 0x00	; 0
    5b7a:	30 e0       	ldi	r19, 0x00	; 0
    5b7c:	40 e2       	ldi	r20, 0x20	; 32
    5b7e:	51 e4       	ldi	r21, 0x41	; 65
    5b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b84:	dc 01       	movw	r26, r24
    5b86:	cb 01       	movw	r24, r22
    5b88:	8e 01       	movw	r16, r28
    5b8a:	05 5b       	subi	r16, 0xB5	; 181
    5b8c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b8e:	bc 01       	movw	r22, r24
    5b90:	cd 01       	movw	r24, r26
    5b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5b96:	dc 01       	movw	r26, r24
    5b98:	cb 01       	movw	r24, r22
    5b9a:	f8 01       	movw	r30, r16
    5b9c:	91 83       	std	Z+1, r25	; 0x01
    5b9e:	80 83       	st	Z, r24
    5ba0:	1f c0       	rjmp	.+62     	; 0x5be0 <main+0x1284>
    5ba2:	fe 01       	movw	r30, r28
    5ba4:	e7 5b       	subi	r30, 0xB7	; 183
    5ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ba8:	80 e9       	ldi	r24, 0x90	; 144
    5baa:	91 e0       	ldi	r25, 0x01	; 1
    5bac:	91 83       	std	Z+1, r25	; 0x01
    5bae:	80 83       	st	Z, r24
    5bb0:	fe 01       	movw	r30, r28
    5bb2:	e7 5b       	subi	r30, 0xB7	; 183
    5bb4:	ff 4f       	sbci	r31, 0xFF	; 255
    5bb6:	80 81       	ld	r24, Z
    5bb8:	91 81       	ldd	r25, Z+1	; 0x01
    5bba:	01 97       	sbiw	r24, 0x01	; 1
    5bbc:	f1 f7       	brne	.-4      	; 0x5bba <main+0x125e>
    5bbe:	fe 01       	movw	r30, r28
    5bc0:	e7 5b       	subi	r30, 0xB7	; 183
    5bc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc4:	91 83       	std	Z+1, r25	; 0x01
    5bc6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bc8:	de 01       	movw	r26, r28
    5bca:	a5 5b       	subi	r26, 0xB5	; 181
    5bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    5bce:	fe 01       	movw	r30, r28
    5bd0:	e5 5b       	subi	r30, 0xB5	; 181
    5bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd4:	80 81       	ld	r24, Z
    5bd6:	91 81       	ldd	r25, Z+1	; 0x01
    5bd8:	01 97       	sbiw	r24, 0x01	; 1
    5bda:	11 96       	adiw	r26, 0x01	; 1
    5bdc:	9c 93       	st	X, r25
    5bde:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5be0:	fe 01       	movw	r30, r28
    5be2:	e5 5b       	subi	r30, 0xB5	; 181
    5be4:	ff 4f       	sbci	r31, 0xFF	; 255
    5be6:	80 81       	ld	r24, Z
    5be8:	91 81       	ldd	r25, Z+1	; 0x01
    5bea:	00 97       	sbiw	r24, 0x00	; 0
    5bec:	d1 f6       	brne	.-76     	; 0x5ba2 <main+0x1246>
    5bee:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5bf2:	8e 01       	movw	r16, r28
    5bf4:	05 5b       	subi	r16, 0xB5	; 181
    5bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    5bf8:	fe 01       	movw	r30, r28
    5bfa:	e3 5b       	subi	r30, 0xB3	; 179
    5bfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bfe:	60 81       	ld	r22, Z
    5c00:	71 81       	ldd	r23, Z+1	; 0x01
    5c02:	82 81       	ldd	r24, Z+2	; 0x02
    5c04:	93 81       	ldd	r25, Z+3	; 0x03
    5c06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c0a:	dc 01       	movw	r26, r24
    5c0c:	cb 01       	movw	r24, r22
    5c0e:	f8 01       	movw	r30, r16
    5c10:	91 83       	std	Z+1, r25	; 0x01
    5c12:	80 83       	st	Z, r24
    5c14:	de 01       	movw	r26, r28
    5c16:	a9 5b       	subi	r26, 0xB9	; 185
    5c18:	bf 4f       	sbci	r27, 0xFF	; 255
    5c1a:	fe 01       	movw	r30, r28
    5c1c:	e5 5b       	subi	r30, 0xB5	; 181
    5c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c20:	80 81       	ld	r24, Z
    5c22:	91 81       	ldd	r25, Z+1	; 0x01
    5c24:	11 96       	adiw	r26, 0x01	; 1
    5c26:	9c 93       	st	X, r25
    5c28:	8e 93       	st	-X, r24
    5c2a:	fe 01       	movw	r30, r28
    5c2c:	e9 5b       	subi	r30, 0xB9	; 185
    5c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    5c30:	80 81       	ld	r24, Z
    5c32:	91 81       	ldd	r25, Z+1	; 0x01
    5c34:	01 97       	sbiw	r24, 0x01	; 1
    5c36:	f1 f7       	brne	.-4      	; 0x5c34 <main+0x12d8>
    5c38:	fe 01       	movw	r30, r28
    5c3a:	e9 5b       	subi	r30, 0xB9	; 185
    5c3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c3e:	91 83       	std	Z+1, r25	; 0x01
    5c40:	80 83       	st	Z, r24
    5c42:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		//print May I help you if 3 middle fingers flexed
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    5c46:	fe 01       	movw	r30, r28
    5c48:	e5 52       	subi	r30, 0x25	; 37
    5c4a:	ff 4f       	sbci	r31, 0xFF	; 255
    5c4c:	80 81       	ld	r24, Z
    5c4e:	91 81       	ldd	r25, Z+1	; 0x01
    5c50:	82 34       	cpi	r24, 0x42	; 66
    5c52:	91 05       	cpc	r25, r1
    5c54:	08 f4       	brcc	.+2      	; 0x5c58 <main+0x12fc>
    5c56:	b3 c0       	rjmp	.+358    	; 0x5dbe <main+0x1462>
    5c58:	fe 01       	movw	r30, r28
    5c5a:	e7 52       	subi	r30, 0x27	; 39
    5c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5c5e:	80 81       	ld	r24, Z
    5c60:	91 81       	ldd	r25, Z+1	; 0x01
    5c62:	f1 e0       	ldi	r31, 0x01	; 1
    5c64:	8c 37       	cpi	r24, 0x7C	; 124
    5c66:	9f 07       	cpc	r25, r31
    5c68:	08 f0       	brcs	.+2      	; 0x5c6c <main+0x1310>
    5c6a:	a9 c0       	rjmp	.+338    	; 0x5dbe <main+0x1462>
    5c6c:	fe 01       	movw	r30, r28
    5c6e:	e9 52       	subi	r30, 0x29	; 41
    5c70:	ff 4f       	sbci	r31, 0xFF	; 255
    5c72:	80 81       	ld	r24, Z
    5c74:	91 81       	ldd	r25, Z+1	; 0x01
    5c76:	21 e0       	ldi	r18, 0x01	; 1
    5c78:	87 38       	cpi	r24, 0x87	; 135
    5c7a:	92 07       	cpc	r25, r18
    5c7c:	08 f4       	brcc	.+2      	; 0x5c80 <main+0x1324>
    5c7e:	9f c0       	rjmp	.+318    	; 0x5dbe <main+0x1462>
    5c80:	fe 01       	movw	r30, r28
    5c82:	eb 52       	subi	r30, 0x2B	; 43
    5c84:	ff 4f       	sbci	r31, 0xFF	; 255
    5c86:	80 81       	ld	r24, Z
    5c88:	91 81       	ldd	r25, Z+1	; 0x01
    5c8a:	e1 e0       	ldi	r30, 0x01	; 1
    5c8c:	8c 32       	cpi	r24, 0x2C	; 44
    5c8e:	9e 07       	cpc	r25, r30
    5c90:	08 f0       	brcs	.+2      	; 0x5c94 <main+0x1338>
    5c92:	95 c0       	rjmp	.+298    	; 0x5dbe <main+0x1462>
    5c94:	fe 01       	movw	r30, r28
    5c96:	ed 52       	subi	r30, 0x2D	; 45
    5c98:	ff 4f       	sbci	r31, 0xFF	; 255
    5c9a:	80 81       	ld	r24, Z
    5c9c:	91 81       	ldd	r25, Z+1	; 0x01
    5c9e:	86 39       	cpi	r24, 0x96	; 150
    5ca0:	91 05       	cpc	r25, r1
    5ca2:	08 f0       	brcs	.+2      	; 0x5ca6 <main+0x134a>
    5ca4:	8c c0       	rjmp	.+280    	; 0x5dbe <main+0x1462>
		{
			H_LCD_Void_LCDWriteString("May I help you?");
    5ca6:	8b ea       	ldi	r24, 0xAB	; 171
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    5cae:	fe 01       	movw	r30, r28
    5cb0:	ed 5b       	subi	r30, 0xBD	; 189
    5cb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5cb4:	80 e0       	ldi	r24, 0x00	; 0
    5cb6:	90 e0       	ldi	r25, 0x00	; 0
    5cb8:	aa ef       	ldi	r26, 0xFA	; 250
    5cba:	b3 e4       	ldi	r27, 0x43	; 67
    5cbc:	80 83       	st	Z, r24
    5cbe:	91 83       	std	Z+1, r25	; 0x01
    5cc0:	a2 83       	std	Z+2, r26	; 0x02
    5cc2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cc4:	8e 01       	movw	r16, r28
    5cc6:	01 5c       	subi	r16, 0xC1	; 193
    5cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    5cca:	fe 01       	movw	r30, r28
    5ccc:	ed 5b       	subi	r30, 0xBD	; 189
    5cce:	ff 4f       	sbci	r31, 0xFF	; 255
    5cd0:	60 81       	ld	r22, Z
    5cd2:	71 81       	ldd	r23, Z+1	; 0x01
    5cd4:	82 81       	ldd	r24, Z+2	; 0x02
    5cd6:	93 81       	ldd	r25, Z+3	; 0x03
    5cd8:	20 e0       	ldi	r18, 0x00	; 0
    5cda:	30 e0       	ldi	r19, 0x00	; 0
    5cdc:	4a e7       	ldi	r20, 0x7A	; 122
    5cde:	55 e4       	ldi	r21, 0x45	; 69
    5ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ce4:	dc 01       	movw	r26, r24
    5ce6:	cb 01       	movw	r24, r22
    5ce8:	f8 01       	movw	r30, r16
    5cea:	80 83       	st	Z, r24
    5cec:	91 83       	std	Z+1, r25	; 0x01
    5cee:	a2 83       	std	Z+2, r26	; 0x02
    5cf0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5cf2:	fe 01       	movw	r30, r28
    5cf4:	ff 96       	adiw	r30, 0x3f	; 63
    5cf6:	60 81       	ld	r22, Z
    5cf8:	71 81       	ldd	r23, Z+1	; 0x01
    5cfa:	82 81       	ldd	r24, Z+2	; 0x02
    5cfc:	93 81       	ldd	r25, Z+3	; 0x03
    5cfe:	20 e0       	ldi	r18, 0x00	; 0
    5d00:	30 e0       	ldi	r19, 0x00	; 0
    5d02:	40 e8       	ldi	r20, 0x80	; 128
    5d04:	5f e3       	ldi	r21, 0x3F	; 63
    5d06:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5d0a:	88 23       	and	r24, r24
    5d0c:	2c f4       	brge	.+10     	; 0x5d18 <main+0x13bc>
		__ticks = 1;
    5d0e:	81 e0       	ldi	r24, 0x01	; 1
    5d10:	90 e0       	ldi	r25, 0x00	; 0
    5d12:	9e af       	std	Y+62, r25	; 0x3e
    5d14:	8d af       	std	Y+61, r24	; 0x3d
    5d16:	47 c0       	rjmp	.+142    	; 0x5da6 <main+0x144a>
	else if (__tmp > 65535)
    5d18:	fe 01       	movw	r30, r28
    5d1a:	ff 96       	adiw	r30, 0x3f	; 63
    5d1c:	60 81       	ld	r22, Z
    5d1e:	71 81       	ldd	r23, Z+1	; 0x01
    5d20:	82 81       	ldd	r24, Z+2	; 0x02
    5d22:	93 81       	ldd	r25, Z+3	; 0x03
    5d24:	20 e0       	ldi	r18, 0x00	; 0
    5d26:	3f ef       	ldi	r19, 0xFF	; 255
    5d28:	4f e7       	ldi	r20, 0x7F	; 127
    5d2a:	57 e4       	ldi	r21, 0x47	; 71
    5d2c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5d30:	18 16       	cp	r1, r24
    5d32:	6c f5       	brge	.+90     	; 0x5d8e <main+0x1432>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d34:	fe 01       	movw	r30, r28
    5d36:	ed 5b       	subi	r30, 0xBD	; 189
    5d38:	ff 4f       	sbci	r31, 0xFF	; 255
    5d3a:	60 81       	ld	r22, Z
    5d3c:	71 81       	ldd	r23, Z+1	; 0x01
    5d3e:	82 81       	ldd	r24, Z+2	; 0x02
    5d40:	93 81       	ldd	r25, Z+3	; 0x03
    5d42:	20 e0       	ldi	r18, 0x00	; 0
    5d44:	30 e0       	ldi	r19, 0x00	; 0
    5d46:	40 e2       	ldi	r20, 0x20	; 32
    5d48:	51 e4       	ldi	r21, 0x41	; 65
    5d4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d4e:	dc 01       	movw	r26, r24
    5d50:	cb 01       	movw	r24, r22
    5d52:	bc 01       	movw	r22, r24
    5d54:	cd 01       	movw	r24, r26
    5d56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d5a:	dc 01       	movw	r26, r24
    5d5c:	cb 01       	movw	r24, r22
    5d5e:	9e af       	std	Y+62, r25	; 0x3e
    5d60:	8d af       	std	Y+61, r24	; 0x3d
    5d62:	0f c0       	rjmp	.+30     	; 0x5d82 <main+0x1426>
    5d64:	80 e9       	ldi	r24, 0x90	; 144
    5d66:	91 e0       	ldi	r25, 0x01	; 1
    5d68:	9c af       	std	Y+60, r25	; 0x3c
    5d6a:	8b af       	std	Y+59, r24	; 0x3b
    5d6c:	8b ad       	ldd	r24, Y+59	; 0x3b
    5d6e:	9c ad       	ldd	r25, Y+60	; 0x3c
    5d70:	01 97       	sbiw	r24, 0x01	; 1
    5d72:	f1 f7       	brne	.-4      	; 0x5d70 <main+0x1414>
    5d74:	9c af       	std	Y+60, r25	; 0x3c
    5d76:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d78:	8d ad       	ldd	r24, Y+61	; 0x3d
    5d7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    5d7c:	01 97       	sbiw	r24, 0x01	; 1
    5d7e:	9e af       	std	Y+62, r25	; 0x3e
    5d80:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d82:	8d ad       	ldd	r24, Y+61	; 0x3d
    5d84:	9e ad       	ldd	r25, Y+62	; 0x3e
    5d86:	00 97       	sbiw	r24, 0x00	; 0
    5d88:	69 f7       	brne	.-38     	; 0x5d64 <main+0x1408>
    5d8a:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d8e:	fe 01       	movw	r30, r28
    5d90:	ff 96       	adiw	r30, 0x3f	; 63
    5d92:	60 81       	ld	r22, Z
    5d94:	71 81       	ldd	r23, Z+1	; 0x01
    5d96:	82 81       	ldd	r24, Z+2	; 0x02
    5d98:	93 81       	ldd	r25, Z+3	; 0x03
    5d9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d9e:	dc 01       	movw	r26, r24
    5da0:	cb 01       	movw	r24, r22
    5da2:	9e af       	std	Y+62, r25	; 0x3e
    5da4:	8d af       	std	Y+61, r24	; 0x3d
    5da6:	8d ad       	ldd	r24, Y+61	; 0x3d
    5da8:	9e ad       	ldd	r25, Y+62	; 0x3e
    5daa:	9a af       	std	Y+58, r25	; 0x3a
    5dac:	89 af       	std	Y+57, r24	; 0x39
    5dae:	89 ad       	ldd	r24, Y+57	; 0x39
    5db0:	9a ad       	ldd	r25, Y+58	; 0x3a
    5db2:	01 97       	sbiw	r24, 0x01	; 1
    5db4:	f1 f7       	brne	.-4      	; 0x5db2 <main+0x1456>
    5db6:	9a af       	std	Y+58, r25	; 0x3a
    5db8:	89 af       	std	Y+57, r24	; 0x39
    5dba:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3<Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    5dbe:	fe 01       	movw	r30, r28
    5dc0:	e5 52       	subi	r30, 0x25	; 37
    5dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc4:	80 81       	ld	r24, Z
    5dc6:	91 81       	ldd	r25, Z+1	; 0x01
    5dc8:	81 34       	cpi	r24, 0x41	; 65
    5dca:	91 05       	cpc	r25, r1
    5dcc:	08 f0       	brcs	.+2      	; 0x5dd0 <main+0x1474>
    5dce:	a0 c0       	rjmp	.+320    	; 0x5f10 <main+0x15b4>
    5dd0:	fe 01       	movw	r30, r28
    5dd2:	e7 52       	subi	r30, 0x27	; 39
    5dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    5dd6:	80 81       	ld	r24, Z
    5dd8:	91 81       	ldd	r25, Z+1	; 0x01
    5dda:	f1 e0       	ldi	r31, 0x01	; 1
    5ddc:	8c 37       	cpi	r24, 0x7C	; 124
    5dde:	9f 07       	cpc	r25, r31
    5de0:	08 f0       	brcs	.+2      	; 0x5de4 <main+0x1488>
    5de2:	96 c0       	rjmp	.+300    	; 0x5f10 <main+0x15b4>
    5de4:	fe 01       	movw	r30, r28
    5de6:	e9 52       	subi	r30, 0x29	; 41
    5de8:	ff 4f       	sbci	r31, 0xFF	; 255
    5dea:	80 81       	ld	r24, Z
    5dec:	91 81       	ldd	r25, Z+1	; 0x01
    5dee:	21 e0       	ldi	r18, 0x01	; 1
    5df0:	86 38       	cpi	r24, 0x86	; 134
    5df2:	92 07       	cpc	r25, r18
    5df4:	08 f0       	brcs	.+2      	; 0x5df8 <main+0x149c>
    5df6:	8c c0       	rjmp	.+280    	; 0x5f10 <main+0x15b4>
    5df8:	fe 01       	movw	r30, r28
    5dfa:	eb 52       	subi	r30, 0x2B	; 43
    5dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    5dfe:	80 81       	ld	r24, Z
    5e00:	91 81       	ldd	r25, Z+1	; 0x01
    5e02:	e1 e0       	ldi	r30, 0x01	; 1
    5e04:	8c 32       	cpi	r24, 0x2C	; 44
    5e06:	9e 07       	cpc	r25, r30
    5e08:	08 f0       	brcs	.+2      	; 0x5e0c <main+0x14b0>
    5e0a:	82 c0       	rjmp	.+260    	; 0x5f10 <main+0x15b4>
    5e0c:	fe 01       	movw	r30, r28
    5e0e:	ed 52       	subi	r30, 0x2D	; 45
    5e10:	ff 4f       	sbci	r31, 0xFF	; 255
    5e12:	80 81       	ld	r24, Z
    5e14:	91 81       	ldd	r25, Z+1	; 0x01
    5e16:	86 39       	cpi	r24, 0x96	; 150
    5e18:	91 05       	cpc	r25, r1
    5e1a:	08 f0       	brcs	.+2      	; 0x5e1e <main+0x14c2>
    5e1c:	79 c0       	rjmp	.+242    	; 0x5f10 <main+0x15b4>
		{
			H_LCD_Void_LCDWriteString("Perfect");
    5e1e:	8b eb       	ldi	r24, 0xBB	; 187
    5e20:	90 e0       	ldi	r25, 0x00	; 0
    5e22:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    5e26:	80 e0       	ldi	r24, 0x00	; 0
    5e28:	90 e0       	ldi	r25, 0x00	; 0
    5e2a:	aa ef       	ldi	r26, 0xFA	; 250
    5e2c:	b3 e4       	ldi	r27, 0x43	; 67
    5e2e:	8d ab       	std	Y+53, r24	; 0x35
    5e30:	9e ab       	std	Y+54, r25	; 0x36
    5e32:	af ab       	std	Y+55, r26	; 0x37
    5e34:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e36:	6d a9       	ldd	r22, Y+53	; 0x35
    5e38:	7e a9       	ldd	r23, Y+54	; 0x36
    5e3a:	8f a9       	ldd	r24, Y+55	; 0x37
    5e3c:	98 ad       	ldd	r25, Y+56	; 0x38
    5e3e:	20 e0       	ldi	r18, 0x00	; 0
    5e40:	30 e0       	ldi	r19, 0x00	; 0
    5e42:	4a e7       	ldi	r20, 0x7A	; 122
    5e44:	55 e4       	ldi	r21, 0x45	; 69
    5e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e4a:	dc 01       	movw	r26, r24
    5e4c:	cb 01       	movw	r24, r22
    5e4e:	89 ab       	std	Y+49, r24	; 0x31
    5e50:	9a ab       	std	Y+50, r25	; 0x32
    5e52:	ab ab       	std	Y+51, r26	; 0x33
    5e54:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5e56:	69 a9       	ldd	r22, Y+49	; 0x31
    5e58:	7a a9       	ldd	r23, Y+50	; 0x32
    5e5a:	8b a9       	ldd	r24, Y+51	; 0x33
    5e5c:	9c a9       	ldd	r25, Y+52	; 0x34
    5e5e:	20 e0       	ldi	r18, 0x00	; 0
    5e60:	30 e0       	ldi	r19, 0x00	; 0
    5e62:	40 e8       	ldi	r20, 0x80	; 128
    5e64:	5f e3       	ldi	r21, 0x3F	; 63
    5e66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5e6a:	88 23       	and	r24, r24
    5e6c:	2c f4       	brge	.+10     	; 0x5e78 <main+0x151c>
		__ticks = 1;
    5e6e:	81 e0       	ldi	r24, 0x01	; 1
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	98 ab       	std	Y+48, r25	; 0x30
    5e74:	8f a7       	std	Y+47, r24	; 0x2f
    5e76:	40 c0       	rjmp	.+128    	; 0x5ef8 <main+0x159c>
	else if (__tmp > 65535)
    5e78:	69 a9       	ldd	r22, Y+49	; 0x31
    5e7a:	7a a9       	ldd	r23, Y+50	; 0x32
    5e7c:	8b a9       	ldd	r24, Y+51	; 0x33
    5e7e:	9c a9       	ldd	r25, Y+52	; 0x34
    5e80:	20 e0       	ldi	r18, 0x00	; 0
    5e82:	3f ef       	ldi	r19, 0xFF	; 255
    5e84:	4f e7       	ldi	r20, 0x7F	; 127
    5e86:	57 e4       	ldi	r21, 0x47	; 71
    5e88:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5e8c:	18 16       	cp	r1, r24
    5e8e:	54 f5       	brge	.+84     	; 0x5ee4 <main+0x1588>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e90:	6d a9       	ldd	r22, Y+53	; 0x35
    5e92:	7e a9       	ldd	r23, Y+54	; 0x36
    5e94:	8f a9       	ldd	r24, Y+55	; 0x37
    5e96:	98 ad       	ldd	r25, Y+56	; 0x38
    5e98:	20 e0       	ldi	r18, 0x00	; 0
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	40 e2       	ldi	r20, 0x20	; 32
    5e9e:	51 e4       	ldi	r21, 0x41	; 65
    5ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ea4:	dc 01       	movw	r26, r24
    5ea6:	cb 01       	movw	r24, r22
    5ea8:	bc 01       	movw	r22, r24
    5eaa:	cd 01       	movw	r24, r26
    5eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5eb0:	dc 01       	movw	r26, r24
    5eb2:	cb 01       	movw	r24, r22
    5eb4:	98 ab       	std	Y+48, r25	; 0x30
    5eb6:	8f a7       	std	Y+47, r24	; 0x2f
    5eb8:	0f c0       	rjmp	.+30     	; 0x5ed8 <main+0x157c>
    5eba:	80 e9       	ldi	r24, 0x90	; 144
    5ebc:	91 e0       	ldi	r25, 0x01	; 1
    5ebe:	9e a7       	std	Y+46, r25	; 0x2e
    5ec0:	8d a7       	std	Y+45, r24	; 0x2d
    5ec2:	8d a5       	ldd	r24, Y+45	; 0x2d
    5ec4:	9e a5       	ldd	r25, Y+46	; 0x2e
    5ec6:	01 97       	sbiw	r24, 0x01	; 1
    5ec8:	f1 f7       	brne	.-4      	; 0x5ec6 <main+0x156a>
    5eca:	9e a7       	std	Y+46, r25	; 0x2e
    5ecc:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ece:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ed0:	98 a9       	ldd	r25, Y+48	; 0x30
    5ed2:	01 97       	sbiw	r24, 0x01	; 1
    5ed4:	98 ab       	std	Y+48, r25	; 0x30
    5ed6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ed8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5eda:	98 a9       	ldd	r25, Y+48	; 0x30
    5edc:	00 97       	sbiw	r24, 0x00	; 0
    5ede:	69 f7       	brne	.-38     	; 0x5eba <main+0x155e>
    5ee0:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ee4:	69 a9       	ldd	r22, Y+49	; 0x31
    5ee6:	7a a9       	ldd	r23, Y+50	; 0x32
    5ee8:	8b a9       	ldd	r24, Y+51	; 0x33
    5eea:	9c a9       	ldd	r25, Y+52	; 0x34
    5eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5ef0:	dc 01       	movw	r26, r24
    5ef2:	cb 01       	movw	r24, r22
    5ef4:	98 ab       	std	Y+48, r25	; 0x30
    5ef6:	8f a7       	std	Y+47, r24	; 0x2f
    5ef8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5efa:	98 a9       	ldd	r25, Y+48	; 0x30
    5efc:	9c a7       	std	Y+44, r25	; 0x2c
    5efe:	8b a7       	std	Y+43, r24	; 0x2b
    5f00:	8b a5       	ldd	r24, Y+43	; 0x2b
    5f02:	9c a5       	ldd	r25, Y+44	; 0x2c
    5f04:	01 97       	sbiw	r24, 0x01	; 1
    5f06:	f1 f7       	brne	.-4      	; 0x5f04 <main+0x15a8>
    5f08:	9c a7       	std	Y+44, r25	; 0x2c
    5f0a:	8b a7       	std	Y+43, r24	; 0x2b
    5f0c:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		else if(Finger_Sensor_1>Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5>Finger_Sensor_5_Bent)
    5f10:	fe 01       	movw	r30, r28
    5f12:	e5 52       	subi	r30, 0x25	; 37
    5f14:	ff 4f       	sbci	r31, 0xFF	; 255
    5f16:	80 81       	ld	r24, Z
    5f18:	91 81       	ldd	r25, Z+1	; 0x01
    5f1a:	82 34       	cpi	r24, 0x42	; 66
    5f1c:	91 05       	cpc	r25, r1
    5f1e:	08 f4       	brcc	.+2      	; 0x5f22 <main+0x15c6>
    5f20:	a0 c0       	rjmp	.+320    	; 0x6062 <main+0x1706>
    5f22:	fe 01       	movw	r30, r28
    5f24:	e7 52       	subi	r30, 0x27	; 39
    5f26:	ff 4f       	sbci	r31, 0xFF	; 255
    5f28:	80 81       	ld	r24, Z
    5f2a:	91 81       	ldd	r25, Z+1	; 0x01
    5f2c:	f1 e0       	ldi	r31, 0x01	; 1
    5f2e:	8d 37       	cpi	r24, 0x7D	; 125
    5f30:	9f 07       	cpc	r25, r31
    5f32:	08 f4       	brcc	.+2      	; 0x5f36 <main+0x15da>
    5f34:	96 c0       	rjmp	.+300    	; 0x6062 <main+0x1706>
    5f36:	fe 01       	movw	r30, r28
    5f38:	e9 52       	subi	r30, 0x29	; 41
    5f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f3c:	80 81       	ld	r24, Z
    5f3e:	91 81       	ldd	r25, Z+1	; 0x01
    5f40:	21 e0       	ldi	r18, 0x01	; 1
    5f42:	87 38       	cpi	r24, 0x87	; 135
    5f44:	92 07       	cpc	r25, r18
    5f46:	08 f4       	brcc	.+2      	; 0x5f4a <main+0x15ee>
    5f48:	8c c0       	rjmp	.+280    	; 0x6062 <main+0x1706>
    5f4a:	fe 01       	movw	r30, r28
    5f4c:	eb 52       	subi	r30, 0x2B	; 43
    5f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5f50:	80 81       	ld	r24, Z
    5f52:	91 81       	ldd	r25, Z+1	; 0x01
    5f54:	e1 e0       	ldi	r30, 0x01	; 1
    5f56:	8c 32       	cpi	r24, 0x2C	; 44
    5f58:	9e 07       	cpc	r25, r30
    5f5a:	08 f0       	brcs	.+2      	; 0x5f5e <main+0x1602>
    5f5c:	82 c0       	rjmp	.+260    	; 0x6062 <main+0x1706>
    5f5e:	fe 01       	movw	r30, r28
    5f60:	ed 52       	subi	r30, 0x2D	; 45
    5f62:	ff 4f       	sbci	r31, 0xFF	; 255
    5f64:	80 81       	ld	r24, Z
    5f66:	91 81       	ldd	r25, Z+1	; 0x01
    5f68:	87 39       	cpi	r24, 0x97	; 151
    5f6a:	91 05       	cpc	r25, r1
    5f6c:	08 f4       	brcc	.+2      	; 0x5f70 <main+0x1614>
    5f6e:	79 c0       	rjmp	.+242    	; 0x6062 <main+0x1706>
		{
			H_LCD_Void_LCDWriteString("Bang Bang");
    5f70:	83 ec       	ldi	r24, 0xC3	; 195
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    5f78:	80 e0       	ldi	r24, 0x00	; 0
    5f7a:	90 e0       	ldi	r25, 0x00	; 0
    5f7c:	aa ef       	ldi	r26, 0xFA	; 250
    5f7e:	b3 e4       	ldi	r27, 0x43	; 67
    5f80:	8f a3       	std	Y+39, r24	; 0x27
    5f82:	98 a7       	std	Y+40, r25	; 0x28
    5f84:	a9 a7       	std	Y+41, r26	; 0x29
    5f86:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f88:	6f a1       	ldd	r22, Y+39	; 0x27
    5f8a:	78 a5       	ldd	r23, Y+40	; 0x28
    5f8c:	89 a5       	ldd	r24, Y+41	; 0x29
    5f8e:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f90:	20 e0       	ldi	r18, 0x00	; 0
    5f92:	30 e0       	ldi	r19, 0x00	; 0
    5f94:	4a e7       	ldi	r20, 0x7A	; 122
    5f96:	55 e4       	ldi	r21, 0x45	; 69
    5f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f9c:	dc 01       	movw	r26, r24
    5f9e:	cb 01       	movw	r24, r22
    5fa0:	8b a3       	std	Y+35, r24	; 0x23
    5fa2:	9c a3       	std	Y+36, r25	; 0x24
    5fa4:	ad a3       	std	Y+37, r26	; 0x25
    5fa6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5fa8:	6b a1       	ldd	r22, Y+35	; 0x23
    5faa:	7c a1       	ldd	r23, Y+36	; 0x24
    5fac:	8d a1       	ldd	r24, Y+37	; 0x25
    5fae:	9e a1       	ldd	r25, Y+38	; 0x26
    5fb0:	20 e0       	ldi	r18, 0x00	; 0
    5fb2:	30 e0       	ldi	r19, 0x00	; 0
    5fb4:	40 e8       	ldi	r20, 0x80	; 128
    5fb6:	5f e3       	ldi	r21, 0x3F	; 63
    5fb8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5fbc:	88 23       	and	r24, r24
    5fbe:	2c f4       	brge	.+10     	; 0x5fca <main+0x166e>
		__ticks = 1;
    5fc0:	81 e0       	ldi	r24, 0x01	; 1
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	9a a3       	std	Y+34, r25	; 0x22
    5fc6:	89 a3       	std	Y+33, r24	; 0x21
    5fc8:	40 c0       	rjmp	.+128    	; 0x604a <main+0x16ee>
	else if (__tmp > 65535)
    5fca:	6b a1       	ldd	r22, Y+35	; 0x23
    5fcc:	7c a1       	ldd	r23, Y+36	; 0x24
    5fce:	8d a1       	ldd	r24, Y+37	; 0x25
    5fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    5fd2:	20 e0       	ldi	r18, 0x00	; 0
    5fd4:	3f ef       	ldi	r19, 0xFF	; 255
    5fd6:	4f e7       	ldi	r20, 0x7F	; 127
    5fd8:	57 e4       	ldi	r21, 0x47	; 71
    5fda:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    5fde:	18 16       	cp	r1, r24
    5fe0:	54 f5       	brge	.+84     	; 0x6036 <main+0x16da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fe2:	6f a1       	ldd	r22, Y+39	; 0x27
    5fe4:	78 a5       	ldd	r23, Y+40	; 0x28
    5fe6:	89 a5       	ldd	r24, Y+41	; 0x29
    5fe8:	9a a5       	ldd	r25, Y+42	; 0x2a
    5fea:	20 e0       	ldi	r18, 0x00	; 0
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	40 e2       	ldi	r20, 0x20	; 32
    5ff0:	51 e4       	ldi	r21, 0x41	; 65
    5ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5ff6:	dc 01       	movw	r26, r24
    5ff8:	cb 01       	movw	r24, r22
    5ffa:	bc 01       	movw	r22, r24
    5ffc:	cd 01       	movw	r24, r26
    5ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6002:	dc 01       	movw	r26, r24
    6004:	cb 01       	movw	r24, r22
    6006:	9a a3       	std	Y+34, r25	; 0x22
    6008:	89 a3       	std	Y+33, r24	; 0x21
    600a:	0f c0       	rjmp	.+30     	; 0x602a <main+0x16ce>
    600c:	80 e9       	ldi	r24, 0x90	; 144
    600e:	91 e0       	ldi	r25, 0x01	; 1
    6010:	98 a3       	std	Y+32, r25	; 0x20
    6012:	8f 8f       	std	Y+31, r24	; 0x1f
    6014:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6016:	98 a1       	ldd	r25, Y+32	; 0x20
    6018:	01 97       	sbiw	r24, 0x01	; 1
    601a:	f1 f7       	brne	.-4      	; 0x6018 <main+0x16bc>
    601c:	98 a3       	std	Y+32, r25	; 0x20
    601e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6020:	89 a1       	ldd	r24, Y+33	; 0x21
    6022:	9a a1       	ldd	r25, Y+34	; 0x22
    6024:	01 97       	sbiw	r24, 0x01	; 1
    6026:	9a a3       	std	Y+34, r25	; 0x22
    6028:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    602a:	89 a1       	ldd	r24, Y+33	; 0x21
    602c:	9a a1       	ldd	r25, Y+34	; 0x22
    602e:	00 97       	sbiw	r24, 0x00	; 0
    6030:	69 f7       	brne	.-38     	; 0x600c <main+0x16b0>
    6032:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6036:	6b a1       	ldd	r22, Y+35	; 0x23
    6038:	7c a1       	ldd	r23, Y+36	; 0x24
    603a:	8d a1       	ldd	r24, Y+37	; 0x25
    603c:	9e a1       	ldd	r25, Y+38	; 0x26
    603e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6042:	dc 01       	movw	r26, r24
    6044:	cb 01       	movw	r24, r22
    6046:	9a a3       	std	Y+34, r25	; 0x22
    6048:	89 a3       	std	Y+33, r24	; 0x21
    604a:	89 a1       	ldd	r24, Y+33	; 0x21
    604c:	9a a1       	ldd	r25, Y+34	; 0x22
    604e:	9e 8f       	std	Y+30, r25	; 0x1e
    6050:	8d 8f       	std	Y+29, r24	; 0x1d
    6052:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6054:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6056:	01 97       	sbiw	r24, 0x01	; 1
    6058:	f1 f7       	brne	.-4      	; 0x6056 <main+0x16fa>
    605a:	9e 8f       	std	Y+30, r25	; 0x1e
    605c:	8d 8f       	std	Y+29, r24	; 0x1d
    605e:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		//4 Fingers used
		//print Nice to meet you if only thumb not flexed
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2<Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    6062:	fe 01       	movw	r30, r28
    6064:	e5 52       	subi	r30, 0x25	; 37
    6066:	ff 4f       	sbci	r31, 0xFF	; 255
    6068:	80 81       	ld	r24, Z
    606a:	91 81       	ldd	r25, Z+1	; 0x01
    606c:	81 34       	cpi	r24, 0x41	; 65
    606e:	91 05       	cpc	r25, r1
    6070:	08 f0       	brcs	.+2      	; 0x6074 <main+0x1718>
    6072:	a0 c0       	rjmp	.+320    	; 0x61b4 <main+0x1858>
    6074:	fe 01       	movw	r30, r28
    6076:	e7 52       	subi	r30, 0x27	; 39
    6078:	ff 4f       	sbci	r31, 0xFF	; 255
    607a:	80 81       	ld	r24, Z
    607c:	91 81       	ldd	r25, Z+1	; 0x01
    607e:	f1 e0       	ldi	r31, 0x01	; 1
    6080:	8c 37       	cpi	r24, 0x7C	; 124
    6082:	9f 07       	cpc	r25, r31
    6084:	08 f0       	brcs	.+2      	; 0x6088 <main+0x172c>
    6086:	96 c0       	rjmp	.+300    	; 0x61b4 <main+0x1858>
    6088:	fe 01       	movw	r30, r28
    608a:	e9 52       	subi	r30, 0x29	; 41
    608c:	ff 4f       	sbci	r31, 0xFF	; 255
    608e:	80 81       	ld	r24, Z
    6090:	91 81       	ldd	r25, Z+1	; 0x01
    6092:	21 e0       	ldi	r18, 0x01	; 1
    6094:	87 38       	cpi	r24, 0x87	; 135
    6096:	92 07       	cpc	r25, r18
    6098:	08 f4       	brcc	.+2      	; 0x609c <main+0x1740>
    609a:	8c c0       	rjmp	.+280    	; 0x61b4 <main+0x1858>
    609c:	fe 01       	movw	r30, r28
    609e:	eb 52       	subi	r30, 0x2B	; 43
    60a0:	ff 4f       	sbci	r31, 0xFF	; 255
    60a2:	80 81       	ld	r24, Z
    60a4:	91 81       	ldd	r25, Z+1	; 0x01
    60a6:	e1 e0       	ldi	r30, 0x01	; 1
    60a8:	8c 32       	cpi	r24, 0x2C	; 44
    60aa:	9e 07       	cpc	r25, r30
    60ac:	08 f0       	brcs	.+2      	; 0x60b0 <main+0x1754>
    60ae:	82 c0       	rjmp	.+260    	; 0x61b4 <main+0x1858>
    60b0:	fe 01       	movw	r30, r28
    60b2:	ed 52       	subi	r30, 0x2D	; 45
    60b4:	ff 4f       	sbci	r31, 0xFF	; 255
    60b6:	80 81       	ld	r24, Z
    60b8:	91 81       	ldd	r25, Z+1	; 0x01
    60ba:	86 39       	cpi	r24, 0x96	; 150
    60bc:	91 05       	cpc	r25, r1
    60be:	08 f0       	brcs	.+2      	; 0x60c2 <main+0x1766>
    60c0:	79 c0       	rjmp	.+242    	; 0x61b4 <main+0x1858>
		{
			H_LCD_Void_LCDWriteString("Nice to meet you");
    60c2:	8c e7       	ldi	r24, 0x7C	; 124
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    60ca:	80 e0       	ldi	r24, 0x00	; 0
    60cc:	90 e0       	ldi	r25, 0x00	; 0
    60ce:	aa ef       	ldi	r26, 0xFA	; 250
    60d0:	b3 e4       	ldi	r27, 0x43	; 67
    60d2:	89 8f       	std	Y+25, r24	; 0x19
    60d4:	9a 8f       	std	Y+26, r25	; 0x1a
    60d6:	ab 8f       	std	Y+27, r26	; 0x1b
    60d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60da:	69 8d       	ldd	r22, Y+25	; 0x19
    60dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    60de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    60e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    60e2:	20 e0       	ldi	r18, 0x00	; 0
    60e4:	30 e0       	ldi	r19, 0x00	; 0
    60e6:	4a e7       	ldi	r20, 0x7A	; 122
    60e8:	55 e4       	ldi	r21, 0x45	; 69
    60ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    60ee:	dc 01       	movw	r26, r24
    60f0:	cb 01       	movw	r24, r22
    60f2:	8d 8b       	std	Y+21, r24	; 0x15
    60f4:	9e 8b       	std	Y+22, r25	; 0x16
    60f6:	af 8b       	std	Y+23, r26	; 0x17
    60f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    60fa:	6d 89       	ldd	r22, Y+21	; 0x15
    60fc:	7e 89       	ldd	r23, Y+22	; 0x16
    60fe:	8f 89       	ldd	r24, Y+23	; 0x17
    6100:	98 8d       	ldd	r25, Y+24	; 0x18
    6102:	20 e0       	ldi	r18, 0x00	; 0
    6104:	30 e0       	ldi	r19, 0x00	; 0
    6106:	40 e8       	ldi	r20, 0x80	; 128
    6108:	5f e3       	ldi	r21, 0x3F	; 63
    610a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    610e:	88 23       	and	r24, r24
    6110:	2c f4       	brge	.+10     	; 0x611c <main+0x17c0>
		__ticks = 1;
    6112:	81 e0       	ldi	r24, 0x01	; 1
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	9c 8b       	std	Y+20, r25	; 0x14
    6118:	8b 8b       	std	Y+19, r24	; 0x13
    611a:	40 c0       	rjmp	.+128    	; 0x619c <main+0x1840>
	else if (__tmp > 65535)
    611c:	6d 89       	ldd	r22, Y+21	; 0x15
    611e:	7e 89       	ldd	r23, Y+22	; 0x16
    6120:	8f 89       	ldd	r24, Y+23	; 0x17
    6122:	98 8d       	ldd	r25, Y+24	; 0x18
    6124:	20 e0       	ldi	r18, 0x00	; 0
    6126:	3f ef       	ldi	r19, 0xFF	; 255
    6128:	4f e7       	ldi	r20, 0x7F	; 127
    612a:	57 e4       	ldi	r21, 0x47	; 71
    612c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    6130:	18 16       	cp	r1, r24
    6132:	54 f5       	brge	.+84     	; 0x6188 <main+0x182c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6134:	69 8d       	ldd	r22, Y+25	; 0x19
    6136:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6138:	8b 8d       	ldd	r24, Y+27	; 0x1b
    613a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    613c:	20 e0       	ldi	r18, 0x00	; 0
    613e:	30 e0       	ldi	r19, 0x00	; 0
    6140:	40 e2       	ldi	r20, 0x20	; 32
    6142:	51 e4       	ldi	r21, 0x41	; 65
    6144:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6148:	dc 01       	movw	r26, r24
    614a:	cb 01       	movw	r24, r22
    614c:	bc 01       	movw	r22, r24
    614e:	cd 01       	movw	r24, r26
    6150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6154:	dc 01       	movw	r26, r24
    6156:	cb 01       	movw	r24, r22
    6158:	9c 8b       	std	Y+20, r25	; 0x14
    615a:	8b 8b       	std	Y+19, r24	; 0x13
    615c:	0f c0       	rjmp	.+30     	; 0x617c <main+0x1820>
    615e:	80 e9       	ldi	r24, 0x90	; 144
    6160:	91 e0       	ldi	r25, 0x01	; 1
    6162:	9a 8b       	std	Y+18, r25	; 0x12
    6164:	89 8b       	std	Y+17, r24	; 0x11
    6166:	89 89       	ldd	r24, Y+17	; 0x11
    6168:	9a 89       	ldd	r25, Y+18	; 0x12
    616a:	01 97       	sbiw	r24, 0x01	; 1
    616c:	f1 f7       	brne	.-4      	; 0x616a <main+0x180e>
    616e:	9a 8b       	std	Y+18, r25	; 0x12
    6170:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6172:	8b 89       	ldd	r24, Y+19	; 0x13
    6174:	9c 89       	ldd	r25, Y+20	; 0x14
    6176:	01 97       	sbiw	r24, 0x01	; 1
    6178:	9c 8b       	std	Y+20, r25	; 0x14
    617a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    617c:	8b 89       	ldd	r24, Y+19	; 0x13
    617e:	9c 89       	ldd	r25, Y+20	; 0x14
    6180:	00 97       	sbiw	r24, 0x00	; 0
    6182:	69 f7       	brne	.-38     	; 0x615e <main+0x1802>
    6184:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6188:	6d 89       	ldd	r22, Y+21	; 0x15
    618a:	7e 89       	ldd	r23, Y+22	; 0x16
    618c:	8f 89       	ldd	r24, Y+23	; 0x17
    618e:	98 8d       	ldd	r25, Y+24	; 0x18
    6190:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6194:	dc 01       	movw	r26, r24
    6196:	cb 01       	movw	r24, r22
    6198:	9c 8b       	std	Y+20, r25	; 0x14
    619a:	8b 8b       	std	Y+19, r24	; 0x13
    619c:	8b 89       	ldd	r24, Y+19	; 0x13
    619e:	9c 89       	ldd	r25, Y+20	; 0x14
    61a0:	98 8b       	std	Y+16, r25	; 0x10
    61a2:	8f 87       	std	Y+15, r24	; 0x0f
    61a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    61a6:	98 89       	ldd	r25, Y+16	; 0x10
    61a8:	01 97       	sbiw	r24, 0x01	; 1
    61aa:	f1 f7       	brne	.-4      	; 0x61a8 <main+0x184c>
    61ac:	98 8b       	std	Y+16, r25	; 0x10
    61ae:	8f 87       	std	Y+15, r24	; 0x0f
    61b0:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			_delay_ms(500);
		}
		//5 Fingers used
		//print See you later when all fingers are flexed
		else if(Finger_Sensor_1<Finger_Sensor_1_Bent && Finger_Sensor_2>Finger_Sensor_2_Bent && Finger_Sensor_3>Finger_Sensor_3_Bent && Finger_Sensor_4<Finger_Sensor_4_Bent && Finger_Sensor_5<Finger_Sensor_5_Bent)
    61b4:	fe 01       	movw	r30, r28
    61b6:	e5 52       	subi	r30, 0x25	; 37
    61b8:	ff 4f       	sbci	r31, 0xFF	; 255
    61ba:	80 81       	ld	r24, Z
    61bc:	91 81       	ldd	r25, Z+1	; 0x01
    61be:	81 34       	cpi	r24, 0x41	; 65
    61c0:	91 05       	cpc	r25, r1
    61c2:	10 f0       	brcs	.+4      	; 0x61c8 <main+0x186c>
    61c4:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
    61c8:	fe 01       	movw	r30, r28
    61ca:	e7 52       	subi	r30, 0x27	; 39
    61cc:	ff 4f       	sbci	r31, 0xFF	; 255
    61ce:	80 81       	ld	r24, Z
    61d0:	91 81       	ldd	r25, Z+1	; 0x01
    61d2:	f1 e0       	ldi	r31, 0x01	; 1
    61d4:	8d 37       	cpi	r24, 0x7D	; 125
    61d6:	9f 07       	cpc	r25, r31
    61d8:	10 f4       	brcc	.+4      	; 0x61de <main+0x1882>
    61da:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
    61de:	fe 01       	movw	r30, r28
    61e0:	e9 52       	subi	r30, 0x29	; 41
    61e2:	ff 4f       	sbci	r31, 0xFF	; 255
    61e4:	80 81       	ld	r24, Z
    61e6:	91 81       	ldd	r25, Z+1	; 0x01
    61e8:	21 e0       	ldi	r18, 0x01	; 1
    61ea:	87 38       	cpi	r24, 0x87	; 135
    61ec:	92 07       	cpc	r25, r18
    61ee:	10 f4       	brcc	.+4      	; 0x61f4 <main+0x1898>
    61f0:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
    61f4:	fe 01       	movw	r30, r28
    61f6:	eb 52       	subi	r30, 0x2B	; 43
    61f8:	ff 4f       	sbci	r31, 0xFF	; 255
    61fa:	80 81       	ld	r24, Z
    61fc:	91 81       	ldd	r25, Z+1	; 0x01
    61fe:	e1 e0       	ldi	r30, 0x01	; 1
    6200:	8c 32       	cpi	r24, 0x2C	; 44
    6202:	9e 07       	cpc	r25, r30
    6204:	10 f0       	brcs	.+4      	; 0x620a <main+0x18ae>
    6206:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
    620a:	fe 01       	movw	r30, r28
    620c:	ed 52       	subi	r30, 0x2D	; 45
    620e:	ff 4f       	sbci	r31, 0xFF	; 255
    6210:	80 81       	ld	r24, Z
    6212:	91 81       	ldd	r25, Z+1	; 0x01
    6214:	86 39       	cpi	r24, 0x96	; 150
    6216:	91 05       	cpc	r25, r1
    6218:	10 f0       	brcs	.+4      	; 0x621e <main+0x18c2>
    621a:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
		{
			H_LCD_Void_LCDWriteString("See you later");
    621e:	8d ec       	ldi	r24, 0xCD	; 205
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	0e 94 72 20 	call	0x40e4	; 0x40e4 <H_LCD_Void_LCDWriteString>
    6226:	80 e0       	ldi	r24, 0x00	; 0
    6228:	90 e0       	ldi	r25, 0x00	; 0
    622a:	aa ef       	ldi	r26, 0xFA	; 250
    622c:	b3 e4       	ldi	r27, 0x43	; 67
    622e:	8b 87       	std	Y+11, r24	; 0x0b
    6230:	9c 87       	std	Y+12, r25	; 0x0c
    6232:	ad 87       	std	Y+13, r26	; 0x0d
    6234:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6236:	6b 85       	ldd	r22, Y+11	; 0x0b
    6238:	7c 85       	ldd	r23, Y+12	; 0x0c
    623a:	8d 85       	ldd	r24, Y+13	; 0x0d
    623c:	9e 85       	ldd	r25, Y+14	; 0x0e
    623e:	20 e0       	ldi	r18, 0x00	; 0
    6240:	30 e0       	ldi	r19, 0x00	; 0
    6242:	4a e7       	ldi	r20, 0x7A	; 122
    6244:	55 e4       	ldi	r21, 0x45	; 69
    6246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    624a:	dc 01       	movw	r26, r24
    624c:	cb 01       	movw	r24, r22
    624e:	8f 83       	std	Y+7, r24	; 0x07
    6250:	98 87       	std	Y+8, r25	; 0x08
    6252:	a9 87       	std	Y+9, r26	; 0x09
    6254:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6256:	6f 81       	ldd	r22, Y+7	; 0x07
    6258:	78 85       	ldd	r23, Y+8	; 0x08
    625a:	89 85       	ldd	r24, Y+9	; 0x09
    625c:	9a 85       	ldd	r25, Y+10	; 0x0a
    625e:	20 e0       	ldi	r18, 0x00	; 0
    6260:	30 e0       	ldi	r19, 0x00	; 0
    6262:	40 e8       	ldi	r20, 0x80	; 128
    6264:	5f e3       	ldi	r21, 0x3F	; 63
    6266:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    626a:	88 23       	and	r24, r24
    626c:	2c f4       	brge	.+10     	; 0x6278 <main+0x191c>
		__ticks = 1;
    626e:	81 e0       	ldi	r24, 0x01	; 1
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	9e 83       	std	Y+6, r25	; 0x06
    6274:	8d 83       	std	Y+5, r24	; 0x05
    6276:	40 c0       	rjmp	.+128    	; 0x62f8 <main+0x199c>
	else if (__tmp > 65535)
    6278:	6f 81       	ldd	r22, Y+7	; 0x07
    627a:	78 85       	ldd	r23, Y+8	; 0x08
    627c:	89 85       	ldd	r24, Y+9	; 0x09
    627e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6280:	20 e0       	ldi	r18, 0x00	; 0
    6282:	3f ef       	ldi	r19, 0xFF	; 255
    6284:	4f e7       	ldi	r20, 0x7F	; 127
    6286:	57 e4       	ldi	r21, 0x47	; 71
    6288:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    628c:	18 16       	cp	r1, r24
    628e:	54 f5       	brge	.+84     	; 0x62e4 <main+0x1988>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6290:	6b 85       	ldd	r22, Y+11	; 0x0b
    6292:	7c 85       	ldd	r23, Y+12	; 0x0c
    6294:	8d 85       	ldd	r24, Y+13	; 0x0d
    6296:	9e 85       	ldd	r25, Y+14	; 0x0e
    6298:	20 e0       	ldi	r18, 0x00	; 0
    629a:	30 e0       	ldi	r19, 0x00	; 0
    629c:	40 e2       	ldi	r20, 0x20	; 32
    629e:	51 e4       	ldi	r21, 0x41	; 65
    62a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62a4:	dc 01       	movw	r26, r24
    62a6:	cb 01       	movw	r24, r22
    62a8:	bc 01       	movw	r22, r24
    62aa:	cd 01       	movw	r24, r26
    62ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62b0:	dc 01       	movw	r26, r24
    62b2:	cb 01       	movw	r24, r22
    62b4:	9e 83       	std	Y+6, r25	; 0x06
    62b6:	8d 83       	std	Y+5, r24	; 0x05
    62b8:	0f c0       	rjmp	.+30     	; 0x62d8 <main+0x197c>
    62ba:	80 e9       	ldi	r24, 0x90	; 144
    62bc:	91 e0       	ldi	r25, 0x01	; 1
    62be:	9c 83       	std	Y+4, r25	; 0x04
    62c0:	8b 83       	std	Y+3, r24	; 0x03
    62c2:	8b 81       	ldd	r24, Y+3	; 0x03
    62c4:	9c 81       	ldd	r25, Y+4	; 0x04
    62c6:	01 97       	sbiw	r24, 0x01	; 1
    62c8:	f1 f7       	brne	.-4      	; 0x62c6 <main+0x196a>
    62ca:	9c 83       	std	Y+4, r25	; 0x04
    62cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62ce:	8d 81       	ldd	r24, Y+5	; 0x05
    62d0:	9e 81       	ldd	r25, Y+6	; 0x06
    62d2:	01 97       	sbiw	r24, 0x01	; 1
    62d4:	9e 83       	std	Y+6, r25	; 0x06
    62d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62d8:	8d 81       	ldd	r24, Y+5	; 0x05
    62da:	9e 81       	ldd	r25, Y+6	; 0x06
    62dc:	00 97       	sbiw	r24, 0x00	; 0
    62de:	69 f7       	brne	.-38     	; 0x62ba <main+0x195e>
    62e0:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62e4:	6f 81       	ldd	r22, Y+7	; 0x07
    62e6:	78 85       	ldd	r23, Y+8	; 0x08
    62e8:	89 85       	ldd	r24, Y+9	; 0x09
    62ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    62ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62f0:	dc 01       	movw	r26, r24
    62f2:	cb 01       	movw	r24, r22
    62f4:	9e 83       	std	Y+6, r25	; 0x06
    62f6:	8d 83       	std	Y+5, r24	; 0x05
    62f8:	8d 81       	ldd	r24, Y+5	; 0x05
    62fa:	9e 81       	ldd	r25, Y+6	; 0x06
    62fc:	9a 83       	std	Y+2, r25	; 0x02
    62fe:	89 83       	std	Y+1, r24	; 0x01
    6300:	89 81       	ldd	r24, Y+1	; 0x01
    6302:	9a 81       	ldd	r25, Y+2	; 0x02
    6304:	01 97       	sbiw	r24, 0x01	; 1
    6306:	f1 f7       	brne	.-4      	; 0x6304 <main+0x19a8>
    6308:	9a 83       	std	Y+2, r25	; 0x02
    630a:	89 83       	std	Y+1, r24	; 0x01
    630c:	0c 94 db 24 	jmp	0x49b6	; 0x49b6 <main+0x5a>

00006310 <A_EXT_INT0_Execution>:
			_delay_ms(500);
		}
	}
}
void A_EXT_INT0_Execution(void)
{
    6310:	df 93       	push	r29
    6312:	cf 93       	push	r28
    6314:	cd b7       	in	r28, 0x3d	; 61
    6316:	de b7       	in	r29, 0x3e	; 62

}
    6318:	cf 91       	pop	r28
    631a:	df 91       	pop	r29
    631c:	08 95       	ret

0000631e <A_Timer0_Execution>:
void A_Timer0_Execution(void)
{
    631e:	df 93       	push	r29
    6320:	cf 93       	push	r28
    6322:	cd b7       	in	r28, 0x3d	; 61
    6324:	de b7       	in	r29, 0x3e	; 62

}
    6326:	cf 91       	pop	r28
    6328:	df 91       	pop	r29
    632a:	08 95       	ret

0000632c <__mulsi3>:
    632c:	62 9f       	mul	r22, r18
    632e:	d0 01       	movw	r26, r0
    6330:	73 9f       	mul	r23, r19
    6332:	f0 01       	movw	r30, r0
    6334:	82 9f       	mul	r24, r18
    6336:	e0 0d       	add	r30, r0
    6338:	f1 1d       	adc	r31, r1
    633a:	64 9f       	mul	r22, r20
    633c:	e0 0d       	add	r30, r0
    633e:	f1 1d       	adc	r31, r1
    6340:	92 9f       	mul	r25, r18
    6342:	f0 0d       	add	r31, r0
    6344:	83 9f       	mul	r24, r19
    6346:	f0 0d       	add	r31, r0
    6348:	74 9f       	mul	r23, r20
    634a:	f0 0d       	add	r31, r0
    634c:	65 9f       	mul	r22, r21
    634e:	f0 0d       	add	r31, r0
    6350:	99 27       	eor	r25, r25
    6352:	72 9f       	mul	r23, r18
    6354:	b0 0d       	add	r27, r0
    6356:	e1 1d       	adc	r30, r1
    6358:	f9 1f       	adc	r31, r25
    635a:	63 9f       	mul	r22, r19
    635c:	b0 0d       	add	r27, r0
    635e:	e1 1d       	adc	r30, r1
    6360:	f9 1f       	adc	r31, r25
    6362:	bd 01       	movw	r22, r26
    6364:	cf 01       	movw	r24, r30
    6366:	11 24       	eor	r1, r1
    6368:	08 95       	ret

0000636a <__udivmodqi4>:
    636a:	99 1b       	sub	r25, r25
    636c:	79 e0       	ldi	r23, 0x09	; 9
    636e:	04 c0       	rjmp	.+8      	; 0x6378 <__udivmodqi4_ep>

00006370 <__udivmodqi4_loop>:
    6370:	99 1f       	adc	r25, r25
    6372:	96 17       	cp	r25, r22
    6374:	08 f0       	brcs	.+2      	; 0x6378 <__udivmodqi4_ep>
    6376:	96 1b       	sub	r25, r22

00006378 <__udivmodqi4_ep>:
    6378:	88 1f       	adc	r24, r24
    637a:	7a 95       	dec	r23
    637c:	c9 f7       	brne	.-14     	; 0x6370 <__udivmodqi4_loop>
    637e:	80 95       	com	r24
    6380:	08 95       	ret

00006382 <__divmodhi4>:
    6382:	97 fb       	bst	r25, 7
    6384:	09 2e       	mov	r0, r25
    6386:	07 26       	eor	r0, r23
    6388:	0a d0       	rcall	.+20     	; 0x639e <__divmodhi4_neg1>
    638a:	77 fd       	sbrc	r23, 7
    638c:	04 d0       	rcall	.+8      	; 0x6396 <__divmodhi4_neg2>
    638e:	49 d0       	rcall	.+146    	; 0x6422 <__udivmodhi4>
    6390:	06 d0       	rcall	.+12     	; 0x639e <__divmodhi4_neg1>
    6392:	00 20       	and	r0, r0
    6394:	1a f4       	brpl	.+6      	; 0x639c <__divmodhi4_exit>

00006396 <__divmodhi4_neg2>:
    6396:	70 95       	com	r23
    6398:	61 95       	neg	r22
    639a:	7f 4f       	sbci	r23, 0xFF	; 255

0000639c <__divmodhi4_exit>:
    639c:	08 95       	ret

0000639e <__divmodhi4_neg1>:
    639e:	f6 f7       	brtc	.-4      	; 0x639c <__divmodhi4_exit>
    63a0:	90 95       	com	r25
    63a2:	81 95       	neg	r24
    63a4:	9f 4f       	sbci	r25, 0xFF	; 255
    63a6:	08 95       	ret

000063a8 <__udivmodsi4>:
    63a8:	a1 e2       	ldi	r26, 0x21	; 33
    63aa:	1a 2e       	mov	r1, r26
    63ac:	aa 1b       	sub	r26, r26
    63ae:	bb 1b       	sub	r27, r27
    63b0:	fd 01       	movw	r30, r26
    63b2:	0d c0       	rjmp	.+26     	; 0x63ce <__udivmodsi4_ep>

000063b4 <__udivmodsi4_loop>:
    63b4:	aa 1f       	adc	r26, r26
    63b6:	bb 1f       	adc	r27, r27
    63b8:	ee 1f       	adc	r30, r30
    63ba:	ff 1f       	adc	r31, r31
    63bc:	a2 17       	cp	r26, r18
    63be:	b3 07       	cpc	r27, r19
    63c0:	e4 07       	cpc	r30, r20
    63c2:	f5 07       	cpc	r31, r21
    63c4:	20 f0       	brcs	.+8      	; 0x63ce <__udivmodsi4_ep>
    63c6:	a2 1b       	sub	r26, r18
    63c8:	b3 0b       	sbc	r27, r19
    63ca:	e4 0b       	sbc	r30, r20
    63cc:	f5 0b       	sbc	r31, r21

000063ce <__udivmodsi4_ep>:
    63ce:	66 1f       	adc	r22, r22
    63d0:	77 1f       	adc	r23, r23
    63d2:	88 1f       	adc	r24, r24
    63d4:	99 1f       	adc	r25, r25
    63d6:	1a 94       	dec	r1
    63d8:	69 f7       	brne	.-38     	; 0x63b4 <__udivmodsi4_loop>
    63da:	60 95       	com	r22
    63dc:	70 95       	com	r23
    63de:	80 95       	com	r24
    63e0:	90 95       	com	r25
    63e2:	9b 01       	movw	r18, r22
    63e4:	ac 01       	movw	r20, r24
    63e6:	bd 01       	movw	r22, r26
    63e8:	cf 01       	movw	r24, r30
    63ea:	08 95       	ret

000063ec <__divmodsi4>:
    63ec:	97 fb       	bst	r25, 7
    63ee:	09 2e       	mov	r0, r25
    63f0:	05 26       	eor	r0, r21
    63f2:	0e d0       	rcall	.+28     	; 0x6410 <__divmodsi4_neg1>
    63f4:	57 fd       	sbrc	r21, 7
    63f6:	04 d0       	rcall	.+8      	; 0x6400 <__divmodsi4_neg2>
    63f8:	d7 df       	rcall	.-82     	; 0x63a8 <__udivmodsi4>
    63fa:	0a d0       	rcall	.+20     	; 0x6410 <__divmodsi4_neg1>
    63fc:	00 1c       	adc	r0, r0
    63fe:	38 f4       	brcc	.+14     	; 0x640e <__divmodsi4_exit>

00006400 <__divmodsi4_neg2>:
    6400:	50 95       	com	r21
    6402:	40 95       	com	r20
    6404:	30 95       	com	r19
    6406:	21 95       	neg	r18
    6408:	3f 4f       	sbci	r19, 0xFF	; 255
    640a:	4f 4f       	sbci	r20, 0xFF	; 255
    640c:	5f 4f       	sbci	r21, 0xFF	; 255

0000640e <__divmodsi4_exit>:
    640e:	08 95       	ret

00006410 <__divmodsi4_neg1>:
    6410:	f6 f7       	brtc	.-4      	; 0x640e <__divmodsi4_exit>
    6412:	90 95       	com	r25
    6414:	80 95       	com	r24
    6416:	70 95       	com	r23
    6418:	61 95       	neg	r22
    641a:	7f 4f       	sbci	r23, 0xFF	; 255
    641c:	8f 4f       	sbci	r24, 0xFF	; 255
    641e:	9f 4f       	sbci	r25, 0xFF	; 255
    6420:	08 95       	ret

00006422 <__udivmodhi4>:
    6422:	aa 1b       	sub	r26, r26
    6424:	bb 1b       	sub	r27, r27
    6426:	51 e1       	ldi	r21, 0x11	; 17
    6428:	07 c0       	rjmp	.+14     	; 0x6438 <__udivmodhi4_ep>

0000642a <__udivmodhi4_loop>:
    642a:	aa 1f       	adc	r26, r26
    642c:	bb 1f       	adc	r27, r27
    642e:	a6 17       	cp	r26, r22
    6430:	b7 07       	cpc	r27, r23
    6432:	10 f0       	brcs	.+4      	; 0x6438 <__udivmodhi4_ep>
    6434:	a6 1b       	sub	r26, r22
    6436:	b7 0b       	sbc	r27, r23

00006438 <__udivmodhi4_ep>:
    6438:	88 1f       	adc	r24, r24
    643a:	99 1f       	adc	r25, r25
    643c:	5a 95       	dec	r21
    643e:	a9 f7       	brne	.-22     	; 0x642a <__udivmodhi4_loop>
    6440:	80 95       	com	r24
    6442:	90 95       	com	r25
    6444:	bc 01       	movw	r22, r24
    6446:	cd 01       	movw	r24, r26
    6448:	08 95       	ret

0000644a <__prologue_saves__>:
    644a:	2f 92       	push	r2
    644c:	3f 92       	push	r3
    644e:	4f 92       	push	r4
    6450:	5f 92       	push	r5
    6452:	6f 92       	push	r6
    6454:	7f 92       	push	r7
    6456:	8f 92       	push	r8
    6458:	9f 92       	push	r9
    645a:	af 92       	push	r10
    645c:	bf 92       	push	r11
    645e:	cf 92       	push	r12
    6460:	df 92       	push	r13
    6462:	ef 92       	push	r14
    6464:	ff 92       	push	r15
    6466:	0f 93       	push	r16
    6468:	1f 93       	push	r17
    646a:	cf 93       	push	r28
    646c:	df 93       	push	r29
    646e:	cd b7       	in	r28, 0x3d	; 61
    6470:	de b7       	in	r29, 0x3e	; 62
    6472:	ca 1b       	sub	r28, r26
    6474:	db 0b       	sbc	r29, r27
    6476:	0f b6       	in	r0, 0x3f	; 63
    6478:	f8 94       	cli
    647a:	de bf       	out	0x3e, r29	; 62
    647c:	0f be       	out	0x3f, r0	; 63
    647e:	cd bf       	out	0x3d, r28	; 61
    6480:	09 94       	ijmp

00006482 <__epilogue_restores__>:
    6482:	2a 88       	ldd	r2, Y+18	; 0x12
    6484:	39 88       	ldd	r3, Y+17	; 0x11
    6486:	48 88       	ldd	r4, Y+16	; 0x10
    6488:	5f 84       	ldd	r5, Y+15	; 0x0f
    648a:	6e 84       	ldd	r6, Y+14	; 0x0e
    648c:	7d 84       	ldd	r7, Y+13	; 0x0d
    648e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6490:	9b 84       	ldd	r9, Y+11	; 0x0b
    6492:	aa 84       	ldd	r10, Y+10	; 0x0a
    6494:	b9 84       	ldd	r11, Y+9	; 0x09
    6496:	c8 84       	ldd	r12, Y+8	; 0x08
    6498:	df 80       	ldd	r13, Y+7	; 0x07
    649a:	ee 80       	ldd	r14, Y+6	; 0x06
    649c:	fd 80       	ldd	r15, Y+5	; 0x05
    649e:	0c 81       	ldd	r16, Y+4	; 0x04
    64a0:	1b 81       	ldd	r17, Y+3	; 0x03
    64a2:	aa 81       	ldd	r26, Y+2	; 0x02
    64a4:	b9 81       	ldd	r27, Y+1	; 0x01
    64a6:	ce 0f       	add	r28, r30
    64a8:	d1 1d       	adc	r29, r1
    64aa:	0f b6       	in	r0, 0x3f	; 63
    64ac:	f8 94       	cli
    64ae:	de bf       	out	0x3e, r29	; 62
    64b0:	0f be       	out	0x3f, r0	; 63
    64b2:	cd bf       	out	0x3d, r28	; 61
    64b4:	ed 01       	movw	r28, r26
    64b6:	08 95       	ret

000064b8 <_exit>:
    64b8:	f8 94       	cli

000064ba <__stop_program>:
    64ba:	ff cf       	rjmp	.-2      	; 0x64ba <__stop_program>
